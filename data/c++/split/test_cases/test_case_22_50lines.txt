  }
  __pyx_t_8 = (__pyx_v_self->_writer.get()->Error() != 0);
  if (__pyx_t_8) {

    /* "pywrapfst.pyx":4446
 *     # An error here usually indicates a key out of order.
 *     if self._writer.get().Error():
 *       raise FstArgError("Key out of order")             # <<<<<<<<<<<<<<
 * 
 *   cpdef string arc_type(self):
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_FstArgError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4446, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__96, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4446, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 4446, __pyx_L1_error)

    /* "pywrapfst.pyx":4445
 *       raise FstOpError("Incompatible or invalid arc type")
 *     # An error here usually indicates a key out of order.
 *     if self._writer.get().Error():             # <<<<<<<<<<<<<<
 *       raise FstArgError("Key out of order")
 * 
 */
  }

  /* "pywrapfst.pyx":4423
 *     self._writer.reset()
 * 
 *   cpdef void add(self, key, _Fst ifst) except *:             # <<<<<<<<<<<<<<
 *     """
 *     add(self, key, ifst)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pywrapfst.FarWriter.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

