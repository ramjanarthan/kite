  uint32 offset = 0;
  const uint32 block = find_inverted_primary_block(bit_index + 1);
  size_t num_zeros_in_block =
      kPrimaryBlockBits * (1 + block) - primary_index_[block];
  if (block > 0) {
    size_t num_zeros_next =
        kPrimaryBlockBits * block - primary_index_[block - 1];
    num_zeros_in_block -= num_zeros_next;
    remzeros -= num_zeros_next;
    offset += block * kSecondaryBlockSize;
  }
  // search the inverted secondary index
  uint32 word = find_inverted_secondary_block(offset, remzeros);
  uint32 sum_zeros_next_word = BitmapIndex::kStorageBitSize * (1 + word) -
                               secondary_index_[offset + word];
  uint32 sum_zeros_this_word = 0;
  if (word > 0) {
    sum_zeros_this_word = BitmapIndex::kStorageBitSize * word -
                          secondary_index_[offset + word - 1];
    remzeros -= sum_zeros_this_word;
    offset += word;
  }
  int nth = nth_bit(~bits_[offset], remzeros);
  size_t current_zero = (offset << BitmapIndex::kStorageLogBitSize) + nth;

  size_t next_zero;
  // Does the current block contain the next zero?
  if (num_zeros_in_block > remzeros + 1) {
    if (sum_zeros_next_word - sum_zeros_this_word >= remzeros + 1) {
      // the next zero is in this word
      next_zero = (offset << BitmapIndex::kStorageLogBitSize) +
                  nth_bit(~bits_[offset], remzeros + 1);
    } else {
      // Find the first field that is not all ones by linear scan.
      // In the worst case, this may scan 8Kbytes.  The alternative is
      // to inspect secondary_index_ looking for a place to jump to, but
      // that would probably use more cache.
      while (bits_[++offset] == ones) {
      }
      next_zero = (offset << BitmapIndex::kStorageLogBitSize) +
                  __builtin_ctzll(~bits_[offset]);
    }
  } else {
    // the next zero is in a different block, a full search is required.
    next_zero = Select0(bit_index + 1);
  }
  return std::make_pair(current_zero, next_zero);
}

size_t BitmapIndex::get_index_ones_count(size_t array_index) const {
  uint32 sum = 0;
  if (array_index > 0) {
    sum += secondary_index_[array_index - 1];
    uint32 end_block = (array_index - 1) / kSecondaryBlockSize;
    if (end_block > 0) sum += primary_index_[end_block - 1];
  }
  return sum;
}

void BitmapIndex::BuildIndex(const uint64 *bits, size_t size) {
  bits_ = bits;
  size_ = size;
  primary_index_.resize(primary_index_size());
  secondary_index_.resize(ArraySize());
  const uint64 zero = 0;
  const uint64 ones = ~zero;
  uint32 popcount = 0;
  for (uint32 block = 0; block * kSecondaryBlockSize < ArraySize(); block++) {
    uint32 block_popcount = 0;
    uint32 block_begin = block * kSecondaryBlockSize;
    uint32 block_end = block_begin + kSecondaryBlockSize;
    if (block_end > ArraySize()) block_end = ArraySize();
    for (uint32 j = block_begin; j < block_end; ++j) {
      uint64 mask = ones;
      if (j == ArraySize() - 1) {
        mask = ones >> (-size_ & BitmapIndex::kStorageBlockMask);
      }
      block_popcount += __builtin_popcountll(bits_[j] & mask);
      secondary_index_[j] = block_popcount;
    }
    popcount += block_popcount;
    primary_index_[block] = popcount;
  }
}

size_t BitmapIndex::find_secondary_block(size_t block_begin,
                                         size_t rem_bit_index) const {
  size_t block_end = block_begin + kSecondaryBlockSize;
  if (block_end > ArraySize()) block_end = ArraySize();
  return std::distance(
      secondary_index_.begin() + block_begin,
      std::lower_bound(secondary_index_.begin() + block_begin,
                       secondary_index_.begin() + block_end, rem_bit_index));
}

size_t BitmapIndex::find_inverted_secondary_block(size_t block_begin,
                                                  size_t rem_bit_index) const {
  size_t block_end = block_begin + kSecondaryBlockSize;
  if (block_end > ArraySize()) block_end = ArraySize();
  return InvertedSearch<BitmapIndex::kStorageBitSize>(secondary_index_,
