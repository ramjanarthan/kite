 *   @classmethod             # <<<<<<<<<<<<<<
 *   def read_text(cls, filename, bool allow_negative_labels=False):
 *     """
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9pywrapfst_SymbolTable->tp_dict, __pyx_n_s_read_text, __pyx_t_2) < 0) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_9pywrapfst_SymbolTable);

  /* "pywrapfst.pyx":1015
 * 
 *   @classmethod
 *   def read_fst(cls, filename, bool input_table):             # <<<<<<<<<<<<<<
 *     """
 *     SymbolTable.read_fst(filename, input_table)
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_9pywrapfst_SymbolTable, __pyx_n_s_read_fst); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "pywrapfst.pyx":1014
 *     return _init_SymbolTable(tsyms)
 * 
 *   @classmethod             # <<<<<<<<<<<<<<
 *   def read_fst(cls, filename, bool input_table):
 *     """
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_9pywrapfst_SymbolTable->tp_dict, __pyx_n_s_read_fst, __pyx_t_1) < 0) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_9pywrapfst_SymbolTable);

  /* "pywrapfst.pyx":2064
 *     return self
 * 
 *   cdef void _minimize(self, float delta=fst.kShortestDelta,             # <<<<<<<<<<<<<<
 *                       bool allow_nondet=False) except *:
 *     # This runs in-place when the second argument is null.
 */
  __pyx_k__35 = fst::kShortestDelta;

  /* "pywrapfst.pyx":2070
 *     self._check_mutating_imethod()
 * 
 *   def minimize(self, float delta=fst.kShortestDelta, bool allow_nondet=False):             # <<<<<<<<<<<<<<
 *     """
 *     minimize(self, delta=1e-6, allow_nondet=False)
 */
  __pyx_k__36 = fst::kShortestDelta;

  /* "pywrapfst.pyx":2170
 *     return self
 * 
 *   cdef void _prune(self, float delta=fst.kDelta, int64 nstate=fst.kNoStateId,             # <<<<<<<<<<<<<<
 *                    weight=None) except *:
 *     # Threshold is set to semiring Zero (no pruning) if no weight is specified.
 */
  __pyx_k__37 = fst::kDelta;
  __pyx_k__38 = fst::kNoStateId;

  /* "pywrapfst.pyx":2179
 * 
 *   def prune(self,
 *             float delta=fst.kDelta,             # <<<<<<<<<<<<<<
 *             int64 nstate=fst.kNoStateId,
 *             weight=None):
 */
  __pyx_k__39 = fst::kDelta;

  /* "pywrapfst.pyx":2180
 *   def prune(self,
 *             float delta=fst.kDelta,
 *             int64 nstate=fst.kNoStateId,             # <<<<<<<<<<<<<<
 *             weight=None):
 *     """
 */
  __pyx_k__40 = fst::kNoStateId;

  /* "pywrapfst.pyx":2207
 * 
 *   cdef void _push(self,
 *                   float delta=fst.kDelta,             # <<<<<<<<<<<<<<
 *                   bool remove_total_weight=False,
 *                   bool to_final=False) except *:
 */
  __pyx_k__41 = fst::kDelta;

  /* "pywrapfst.pyx":2215
 * 
 *   def push(self,
 *            float delta=fst.kDelta,             # <<<<<<<<<<<<<<
 *            bool remove_total_weight=False,
 *            bool to_final=False):
 */
  __pyx_k__42 = fst::kDelta;

  /* "pywrapfst.pyx":2452
