
KENLM_FILES += glob.glob(OPENFST_DIR + '/src/lib/*.cc')

KENLM_FILES = [
    fn for fn in KENLM_FILES
    if not (fn.endswith('main.cc') or fn.endswith('test.cc') or fn.endswith(
        'unittest.cc'))
]

CTC_DECODER_FILES = [
    'ctc_beam_search_decoder.cpp',
    'scorer.cpp',
    'path_trie.cpp',
    'decoder_utils.cpp',
    'workspace_status.cc',
    '../alphabet.cc',
]

def build_archive(srcs=[], out_name='', build_dir='temp_build/temp_build', debug=False, num_parallel=1):
    compiler = os.environ.get('CXX', 'g++')
    if sys.platform.startswith('win'):
        compiler = '"{}"'.format(compiler)
    ar = os.environ.get('AR', 'ar')
    libexe = os.environ.get('LIBEXE', 'lib.exe')
    libtool = os.environ.get('LIBTOOL', 'libtool')
    cflags = os.environ.get('CFLAGS', '') + os.environ.get('CXXFLAGS', '')
    args = ARGS + (DBG_ARGS if debug else OPT_ARGS)

    for file in srcs:
        outfile = os.path.join(build_dir, os.path.splitext(file)[0] + '.o')
        outdir = os.path.dirname(outfile)
        if not os.path.exists(outdir):
            print('mkdir', outdir)
            os.makedirs(outdir)

    def build_one(file):
        outfile = os.path.join(build_dir, os.path.splitext(file)[0] + '.o')
        if os.path.exists(outfile):
            return

        if sys.platform.startswith('win'):
            file = '"{}"'.format(file.replace('\\', '/'))
            output = '/Fo"{}"'.format(outfile.replace('\\', '/'))
        else:
            output = '-o ' + outfile

        cmd = '{cc} -c {cflags} {args} {includes} {infile} {output}'.format(
            cc=compiler,
            cflags=cflags,
            args=' '.join(args),
