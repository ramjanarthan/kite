^            assert beta is not none, 'beta parameter is required'$^            assert scorer_path, 'scorer_path parameter is required'$^$^            err = self.init(scorer_path.encode('utf-8'), alphabet)$^            if err != 0:$^                raise valueerror('scorer initialization failed with error code 0x{:x}'.format(err))$^$^            self.reset_params(alpha, beta)$^$^$^class alphabet(swigwrapper.alphabet):$^    """convenience wrapper for alphabet which calls init in the constructor"""$^    def __init__(self, config_path):$^        super(alphabet, self).__init__()$^        err = self.init(config_path.encode('utf-8'))$^        if err != 0:$^            raise valueerror('alphabet initialization failed with error code 0x{:x}'.format(err))$^$^    def canencodesingle(self, input):$^        '''$