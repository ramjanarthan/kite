                    catalog_entries = json.load(catalog_file)
                catalog_entries = [(resolve(catalog_dir, e['audio']), resolve(catalog_dir, e['tlog'])) for e in catalog_entries]
                if any(map(lambda e: not os.path.isfile(e[0]), catalog_entries)):
                    fail('Missing source file(s) in catalog')
                if not FLAGS.force and any(map(lambda e: os.path.isfile(e[1]), catalog_entries)):
                    fail('Destination file(s) from catalog already existing, use --force for overwriting')
                if any(map(lambda e: not os.path.isdir(os.path.dirname(e[1])), catalog_entries)):
                    fail('Missing destination directory for at least one catalog entry')
                src_paths,dst_paths = zip(*paths)
                transcribe_many(src_paths,dst_paths)
            else:
                # Transcribe one file
                dst_path = os.path.abspath(FLAGS.dst) if FLAGS.dst else os.path.splitext(src_path)[0] + '.tlog'
                if os.path.isfile(dst_path):
                    if FLAGS.force:
                        transcribe_one(src_path, dst_path)
                    else:
                        fail('Destination file "{}" already existing - use --force for overwriting'.format(dst_path), code=0)
                elif os.path.isdir(os.path.dirname(dst_path)):
                    transcribe_one(src_path, dst_path)
                else:
                    fail('Missing destination directory')
        elif os.path.isdir(src_path):
            # Transcribe all files in dir
            print("Transcribing all WAV files in --src")
            if FLAGS.dst:
                fail('Destination file not supported for batch decoding jobs.')
            else:
                if not FLAGS.recursive:
                    print("If you wish to recursively scan --src, then you must use --recursive")
                    wav_paths = glob.glob(src_path + "/*.wav")
                else:
                    wav_paths = glob.glob(src_path + "/**/*.wav")
                dst_paths = [path.replace('.wav','.tlog') for path in wav_paths]
                transcribe_many(wav_paths,dst_paths)


if __name__ == '__main__':
    create_flags()
    tf.app.flags.DEFINE_string('src', '', 'Source path to an audio file or directory or catalog file.'
                                          'Catalog files should be formatted from DSAlign. A directory will'
                                          'be recursively searched for audio. If --dst not set, transcription logs (.tlog) will be '
                                          'written in-place using the source filenames with '
                                          'suffix ".tlog" instead of ".wav".')
    tf.app.flags.DEFINE_string('dst', '', 'path for writing the transcription log or logs (.tlog). '
                                          'If --src is a directory, this one also has to be a directory '
                                          'and the required sub-dir tree of --src will get replicated.')
    tf.app.flags.DEFINE_boolean('recursive', False, 'scan dir of audio recursively')
    tf.app.flags.DEFINE_boolean('force', False, 'Forces re-transcribing and overwriting of already existing '
                                                'transcription logs (.tlog)')
