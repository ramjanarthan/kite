^        return super(utf8alphabet, self).canencode(input.encode('utf-8'))$^$^    def encodesingle(self, input):$^        '''$^        encode a single character/output class into a label. character must be in$^        the alphabet, this method will assert that. use `canencodesingle` to test.$^        '''$^        return super(utf8alphabet, self).encodesingle(input.encode('utf-8'))$^$^    def encode(self, input):$^        '''$^        encode a sequence of character/output classes into a sequence of labels.$^        characters are assumed to always take a single unicode codepoint.$^        characters must be in the alphabet, this method will assert that. use$^        `canencode` and `canencodesingle` to test.$^        '''$^        # convert swig's unsignedintvec to a python list$^        res = super(utf8alphabet, self).encode(input.encode('utf-8'))$^        return [el for el in res]$^$