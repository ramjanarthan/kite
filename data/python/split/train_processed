^#!/usr/bin/env python$^"""$^broadly speaking, this script takes the audio downloaded from common voice$^for a certain language, in addition to the *.tsv files output by corporacreator,$^and the script formats the data and transcripts to be in a state usable by$^deepspeech.py$^use "python3 import_cv2.py -h" for help$^"""$^import csv$^import os$^import subprocess$^import unicodedata$^from multiprocessing import pool$^$^import progressbar$^import sox$^$^from deepspeech_training.util.downloader import simple_bar$^from deepspeech_training.util.importers import ($^    get_counter,$^    get_imported_samples,$^    get_importers_parser,$^    get_validate_label,$^    print_import_report,$^)$^from ds_ctcdecoder import alphabet$^$^fieldnames = ["wav_filename", "wav_filesize", "transcript"]$^sample_rate = 16000$^channels = 1$^max_secs = 10$^params = none$^filter_obj = none$^$^$^class labelfilter:$^    def __init__(self, normalize, alphabet, validate_fun):$^        self.normalize = normalize$^        self.alphabet = alphabet$^        self.validate_fun = validate_fun$^$^    def filter(self, label):$^        if self.normalize:$^            label = unicodedata.normalize("nfkd", label.strip()).encode("ascii", "ignore").decode("ascii", "ignore")$^        label = self.validate_fun(label)$^        if self.alphabet and label and not self.alphabet.canencode(label):$^            label = none$^        return label$^$^$^def init_worker(params):$^    global filter_obj  # pylint: disable=global-statement$^    validate_label = get_validate_label(params)$^    alphabet = alphabet(params.filter_alphabet) if params.filter_alphabet else none$^    filter_obj = labelfilter(params.normalize, alphabet, validate_label)$^$^$^def one_sample(sample):$^    """ take an audio file, and optionally convert it to 16khz wav """$^    mp3_filename = sample[0]$^    if not os.path.splitext(mp3_filename.lower())[1] == ".mp3":$^        mp3_filename += ".mp3"$^    # storing wav files next to the mp3 ones - just with a different suffix$^    wav_filename = os.path.splitext(mp3_filename)[0] + ".wav"$^    _maybe_convert_wav(mp3_filename, wav_filename)$^    file_size = -1$^    frames = 0$^    if os.path.exists(wav_filename):$^        file_size = os.path.getsize(wav_filename)$^        frames = int($^            subprocess.check_output($^                ["soxi", "-s", wav_filename], stderr=subprocess.stdout$^            )$^        )$^    label = filter_obj.filter(sample[1])$^    rows = []$^    counter = get_counter()$^    if file_size == -1:$^        # excluding samples that failed upon conversion$^        counter["failed"] += 1$^    elif label is none:$^        # excluding samples that failed on label validation$^        counter["invalid_label"] += 1$^    elif int(frames / sample_rate * 1000 / 10 / 2) < len(str(label)):$^        # excluding samples that are too short to fit the transcript$^        counter["too_short"] += 1$^    elif frames / sample_rate > max_secs:$^        # excluding very long samples to keep a reasonable batch-size$^        counter["too_long"] += 1$^    else:$^        # this one is good - keep it for the target csv$^        rows.append((os.path.split(wav_filename)[-1], file_size, label, sample[2]))$^        counter["imported_time"] += frames$^    counter["all"] += 1$^    counter["total_time"] += frames$^$^    return (counter, rows)$^$^$^def _maybe_convert_set(dataset, tsv_dir, audio_dir, filter_obj, space_after_every_character=none, rows=none, exclude=none):$^    exclude_transcripts = set()$^    exclude_speakers = set()$^    if exclude is not none:$^        for sample in exclude:$^            exclude_transcripts.add(sample[2])$^            exclude_speakers.add(sample[3])$^$^    if rows is none:$^        rows = []$^        input_tsv = os.path.join(os.path.abspath(tsv_dir), dataset + ".tsv")$^        if not os.path.isfile(input_tsv):$^            return rows$^        print("loading tsv file: ", input_tsv)$^        # get audiofile path and transcript for each sentence in tsv$^        samples = []$^        with open(input_tsv, encoding="utf-8") as input_tsv_file:$^            reader = csv.dictreader(input_tsv_file, delimiter="\t")$^            for row in reader:$^                samples.append((os.path.join(audio_dir, row["path"]), row["sentence"], row["client_id"]))$^$^        counter = get_counter()$^        num_samples = len(samples)$^$^        print("importing mp3 files...")$^        pool = pool(initializer=init_worker, initargs=(params,))$^        bar = progressbar.progressbar(max_value=num_samples, widgets=simple_bar)$^        for i, processed in enumerate(pool.imap_unordered(one_sample, samples), start=1):$^            counter += processed[0]$^            rows += processed[1]$^            bar.update(i)$^        bar.update(num_samples)$^        pool.close()$^        pool.join()$^$^        imported_samples = get_imported_samples(counter)$^        assert counter["all"] == num_samples$^        assert len(rows) == imported_samples$^        print_import_report(counter, sample_rate, max_secs)$^$^    output_csv = os.path.join(os.path.abspath(audio_dir), dataset + ".csv")$^    print("saving new deepspeech-formatted csv file to: ", output_csv)$^    with open(output_csv, "w", encoding="utf-8", newline="") as output_csv_file:$^        print("writing csv file for deepspeech.py as: ", output_csv)$^        writer = csv.dictwriter(output_csv_file, fieldnames=fieldnames)$^        writer.writeheader()$^        bar = progressbar.progressbar(max_value=len(rows), widgets=simple_bar)$^        for filename, file_size, transcript, speaker in bar(rows):$^            if transcript in exclude_transcripts or speaker in exclude_speakers:$^                continue$^            if space_after_every_character:$^                writer.writerow($^                    {$^                        "wav_filename": filename,$^                        "wav_filesize": file_size,$^                        "transcript": " ".join(transcript),$^                    }$^                )$^            else:$^                writer.writerow($^                    {$^                        "wav_filename": filename,$^                        "wav_filesize": file_size,$^                        "transcript": transcript,$^                    }$^                )$^    return rows$^$^$^def _preprocess_data(tsv_dir, audio_dir, space_after_every_character=false):$^    exclude = []$^    for dataset in ["test", "dev", "train", "validated", "other"]:$^        set_samples = _maybe_convert_set(dataset, tsv_dir, audio_dir, space_after_every_character)$^        if dataset in ["test", "dev"]:$^            exclude += set_samples$^        if dataset == "validated":$^            _maybe_convert_set("train-all", tsv_dir, audio_dir, space_after_every_character,$^                               rows=set_samples, exclude=exclude)$^$^$^def _maybe_convert_wav(mp3_filename, wav_filename):$^    if not os.path.exists(wav_filename):$^        transformer = sox.transformer()$^        transformer.convert(samplerate=sample_rate, n_channels=channels)$^        try:$^            transformer.build(mp3_filename, wav_filename)$^        except sox.core.soxerror:$^            pass$^$^$^def parse_args():$^    parser = get_importers_parser(description="import commonvoice v2.0 corpora")$^    parser.add_argument("tsv_dir", help="directory containing tsv files")$^    parser.add_argument($^        "--audio_dir",$^        help='directory containing the audio clips - defaults to "<tsv_dir>/clips"',$^    )$^    parser.add_argument($^        "--filter_alphabet",$^        help="exclude samples with characters not in provided alphabet",$^    )$^    parser.add_argument($^        "--normalize",$^        action="store_true",$^        help="converts diacritic characters to their base ones",$^    )$^    parser.add_argument($^        "--space_after_every_character",$^        action="store_true",$^        help="to help transcript join by white space",$^    )$^    return parser.parse_args()$^$^$^def main():$^    audio_dir = params.audio_dir if params.audio_dir else os.path.join(params.tsv_dir, "clips")$^    _preprocess_data(params.tsv_dir, audio_dir, params.space_after_every_character)$^$^$^if __name__ == "__main__":$^    params = parse_args()$^    main()$^#!/usr/bin/env python$^import codecs$^import fnmatch$^import os$^import random$^import subprocess$^import sys$^import unicodedata$^$^import librosa$^import pandas$^import soundfile  # <= has an external dependency on libsndfile$^$^from deepspeech_training.util.importers import validate_label_eng as validate_label$^$^# prerequisite: having the sph2pipe tool in your path:$^# https://www.ldc.upenn.edu/language-resources/tools/sphere-conversion-tools$^$^$^def _download_and_preprocess_data(data_dir):$^    # assume data_dir contains extracted ldc2004s13, ldc2004t19, ldc2005s13, ldc2005t19$^$^    # conditionally convert fisher sph data to wav$^    _maybe_convert_wav(data_dir, "ldc2004s13", "fisher-2004-wav")$^    _maybe_convert_wav(data_dir, "ldc2005s13", "fisher-2005-wav")$^$^    # conditionally split fisher wav data$^    all_2004 = _split_wav_and_sentences($^        data_dir,$^        original_data="fisher-2004-wav",$^        converted_data="fisher-2004-split-wav",$^        trans_data=os.path.join("ldc2004t19", "fe_03_p1_tran", "data", "trans"),$^    )$^    all_2005 = _split_wav_and_sentences($^        data_dir,$^        original_data="fisher-2005-wav",$^        converted_data="fisher-2005-split-wav",$^        trans_data=os.path.join("ldc2005t19", "fe_03_p2_tran", "data", "trans"),$^    )$^$^    # the following files have incorrect transcripts that are much longer than$^    # their audio source. the result is that we end up with more labels than time$^    # slices, which breaks ctc.$^    all_2004.loc[$^        all_2004["wav_filename"].str.endswith("fe_03_00265-33.53-33.81.wav"),$^        "transcript",$^    ] = "correct"$^    all_2004.loc[$^        all_2004["wav_filename"].str.endswith("fe_03_00991-527.39-528.3.wav"),$^        "transcript",$^    ] = "that's one of those"$^    all_2005.loc[$^        all_2005["wav_filename"].str.endswith("fe_03_10282-344.42-344.84.wav"),$^        "transcript",$^    ] = "they don't want"$^    all_2005.loc[$^        all_2005["wav_filename"].str.endswith("fe_03_10677-101.04-106.41.wav"),$^        "transcript",$^    ] = "uh my mine yeah the german shepherd pitbull mix he snores almost as loud as i do"$^$^    # the following file is just a short sound and not at all transcribed like provided.$^    # so we just exclude it.$^    all_2004 = all_2004[$^        ~all_2004["wav_filename"].str.endswith("fe_03_00027-393.8-394.05.wav")$^    ]$^$^    # the following file is far too long and would ruin our training batch size.$^    # so we just exclude it.$^    all_2005 = all_2005[$^        ~all_2005["wav_filename"].str.endswith("fe_03_11487-31.09-234.06.wav")$^    ]$^$^    # the following file is too large for its transcript, so we just exclude it.$^    all_2004 = all_2004[$^        ~all_2004["wav_filename"].str.endswith("fe_03_01326-307.42-307.93.wav")$^    ]$^$^    # conditionally split fisher data into train/validation/test sets$^    train_2004, dev_2004, test_2004 = _split_sets(all_2004)$^    train_2005, dev_2005, test_2005 = _split_sets(all_2005)$^$^    # join 2004 and 2005 data$^    train_files = train_2004.append(train_2005)$^    dev_files = dev_2004.append(dev_2005)$^    test_files = test_2004.append(test_2005)$^$^    # write sets to disk as csv files$^    train_files.to_csv(os.path.join(data_dir, "fisher-train.csv"), index=false)$^    dev_files.to_csv(os.path.join(data_dir, "fisher-dev.csv"), index=false)$^    test_files.to_csv(os.path.join(data_dir, "fisher-test.csv"), index=false)$^$^$^def _maybe_convert_wav(data_dir, original_data, converted_data):$^    source_dir = os.path.join(data_dir, original_data)$^    target_dir = os.path.join(data_dir, converted_data)$^$^    # conditionally convert sph files to wav files$^    if os.path.exists(target_dir):$^        print("skipping maybe_convert_wav")$^        return$^$^    # create target_dir$^    os.makedirs(target_dir)$^$^    # loop over sph files in source_dir and convert each to 16-bit pcm wav$^    for root, dirnames, filenames in os.walk(source_dir):$^        for filename in fnmatch.filter(filenames, "*.sph"):$^            sph_file = os.path.join(root, filename)$^            for channel in ["1", "2"]:$^                wav_filename = ($^                    os.path.splitext(os.path.basename(sph_file))[0]$^                    + "_c"$^                    + channel$^                    + ".wav"$^                )$^                wav_file = os.path.join(target_dir, wav_filename)$^                print("converting {} to {}".format(sph_file, wav_file))$^                subprocess.check_call($^                    ["sph2pipe", "-c", channel, "-p", "-f", "rif", sph_file, wav_file]$^                )$^$^$^def _parse_transcriptions(trans_file):$^    segments = []$^    with codecs.open(trans_file, "r", "utf-8") as fin:$^        for line in fin:$^            if line.startswith("#") or len(line) <= 1:$^                continue$^$^            tokens = line.split()$^            start_time = float(tokens[0])$^            stop_time = float(tokens[1])$^            speaker = tokens[2]$^            transcript = " ".join(tokens[3:])$^$^            # we need to do the encode-decode dance here because encode$^            # returns a bytes() object on python 3, and text_to_char_array$^            # expects a string.$^            transcript = ($^                unicodedata.normalize("nfkd", transcript)$^                .encode("ascii", "ignore")$^                .decode("ascii", "ignore")$^            )$^$^            segments.append($^                {$^                    "start_time": start_time,$^                    "stop_time": stop_time,$^                    "speaker": speaker,$^                    "transcript": transcript,$^                }$^            )$^    return segments$^$^$^def _split_wav_and_sentences(data_dir, trans_data, original_data, converted_data):$^    trans_dir = os.path.join(data_dir, trans_data)$^    source_dir = os.path.join(data_dir, original_data)$^    target_dir = os.path.join(data_dir, converted_data)$^    if not os.path.exists(target_dir):$^        os.makedirs(target_dir)$^$^    files = []$^$^    # loop over transcription files and split corresponding wav$^    for root, dirnames, filenames in os.walk(trans_dir):$^        for filename in fnmatch.filter(filenames, "*.txt"):$^            trans_file = os.path.join(root, filename)$^            segments = _parse_transcriptions(trans_file)$^$^            # open wav corresponding to transcription file$^            wav_filenames = [$^                os.path.splitext(os.path.basename(trans_file))[0]$^                + "_c"$^                + channel$^                + ".wav"$^                for channel in ["1", "2"]$^            ]$^            wav_files = [$^                os.path.join(source_dir, wav_filename) for wav_filename in wav_filenames$^            ]$^$^            print("splitting {} according to {}".format(wav_files, trans_file))$^$^            origaudios = [$^                librosa.load(wav_file, sr=16000, mono=false) for wav_file in wav_files$^            ]$^$^            # loop over segments and split wav_file for each segment$^            for segment in segments:$^                # create wav segment filename$^                start_time = segment["start_time"]$^                stop_time = segment["stop_time"]$^                new_wav_filename = ($^                    os.path.splitext(os.path.basename(trans_file))[0]$^                    + "-"$^                    + str(start_time)$^                    + "-"$^                    + str(stop_time)$^                    + ".wav"$^                )$^                new_wav_file = os.path.join(target_dir, new_wav_filename)$^$^                channel = 0 if segment["speaker"] == "a:" else 1$^                _split_and_resample_wav($^                    origaudios[channel], start_time, stop_time, new_wav_file$^                )$^$^                new_wav_filesize = os.path.getsize(new_wav_file)$^                transcript = validate_label(segment["transcript"])$^                if transcript != none:$^                    files.append($^                        (os.path.abspath(new_wav_file), new_wav_filesize, transcript)$^                    )$^$^    return pandas.dataframe($^        data=files, columns=["wav_filename", "wav_filesize", "transcript"]$^    )$^$^$^def _split_audio(origaudio, start_time, stop_time):$^    audiodata, framerate = origaudio$^    nchannels = len(audiodata.shape)$^    startindex = int(start_time * framerate)$^    stopindex = int(stop_time * framerate)$^    return ($^        audiodata[startindex:stopindex]$^        if 1 == nchannels$^        else audiodata[:, startindex:stopindex]$^    )$^$^$^def _split_and_resample_wav(origaudio, start_time, stop_time, new_wav_file):$^    framerate = origaudio[1]$^    chunkdata = _split_audio(origaudio, start_time, stop_time)$^    soundfile.write(new_wav_file, chunkdata, framerate, "pcm_16")$^$^$^def _split_sets(filelist):$^    """$^    randomply split the datasets into train, validation, and test sets where the size of the$^    validation and test sets are determined by the `get_sample_size` function. $^    """$^    random.shuffle(filelist)$^    sample_size = get_sample_size(len(filelist))$^$^    train_beg = 0$^    train_end = len(filelist) - 2 * sample_size$^$^    dev_beg = train_end$^    dev_end = train_end + sample_size$^$^    test_beg = dev_end$^    test_end = len(filelist)$^$^    return ($^        filelist[train_beg:train_end],$^        filelist[dev_beg:dev_end],$^        filelist[test_beg:test_end],$^    )$^$^$^def get_sample_size(population_size):$^    """calculates the sample size for a 99% confidence and 1% margin of error$^    """$^    margin_of_error = 0.01$^    fraction_picking = 0.50$^    z_score = 2.58  # corresponds to confidence level 99%$^    numerator = (z_score ** 2 * fraction_picking * (1 - fraction_picking)) / ($^        margin_of_error ** 2$^    )$^    sample_size = 0$^    for train_size in range(population_size, 0, -1):$^        denominator = 1 + (z_score ** 2 * fraction_picking * (1 - fraction_picking)) / ($^            margin_of_error ** 2 * train_size$^        )$^        sample_size = int(numerator / denominator)$^        if 2 * sample_size + train_size <= population_size:$^            break$^    return sample_size$^$^$^if __name__ == "__main__":$^    _download_and_preprocess_data(sys.argv[1])$^#!/usr/bin/env python$^# -*- coding: utf-8 -*-$^$^import sys$^$^import tensorflow.compat.v1 as tfv1$^from google.protobuf import text_format$^$^$^def main():$^    # load and export as string$^    with tfv1.gfile.fastgfile(sys.argv[1], "rb") as fin:$^        graph_def = tfv1.graphdef()$^        graph_def.parsefromstring(fin.read())$^$^        with tfv1.gfile.fastgfile(sys.argv[1] + "txt", "w") as fout:$^            fout.write(text_format.messagetostring(graph_def))$^$^$^if __name__ == "__main__":$^    main()$^#!/usr/bin/env python$^# vctk used in wavenet paper https://arxiv.org/pdf/1609.03499.pdf$^# licenced under open data commons attribution license (odc-by) v1.0.$^# as per https://homepages.inf.ed.ac.uk/jyamagis/page3/page58/page58.html$^import os$^import random$^import re$^from multiprocessing import pool$^from zipfile import zipfile$^$^import librosa$^import progressbar$^$^from deepspeech_training.util.downloader import simple_bar, maybe_download$^from deepspeech_training.util.importers import ($^    get_counter,$^    get_imported_samples,$^    print_import_report,$^)$^$^sample_rate = 16000$^max_secs = 10$^min_secs = 1$^archive_dir_name = "vctk-corpus"$^archive_name = "vctk-corpus.zip?sequence=2&isallowed=y"$^archive_url = ($^    "https://datashare.is.ed.ac.uk/bitstream/handle/10283/2651/" + archive_name$^)$^$^$^def _download_and_preprocess_data(target_dir):$^    # making path absolute$^    target_dir = os.path.abspath(target_dir)$^    # conditionally download data$^    archive_path = maybe_download(archive_name, target_dir, archive_url)$^    # conditionally extract common voice data$^    _maybe_extract(target_dir, archive_dir_name, archive_path)$^    # conditionally convert common voice csv files and mp3 data to deepspeech csvs and wav$^    _maybe_convert_sets(target_dir, archive_dir_name)$^$^$^def _maybe_extract(target_dir, extracted_data, archive_path):$^    # if target_dir/extracted_data does not exist, extract archive in target_dir$^    extracted_path = os.path.join(target_dir, extracted_data)$^    if not os.path.exists(extracted_path):$^        print(f"no directory {extracted_path} - extracting archive...")$^        with zipfile(archive_path, "r") as zipobj:$^            # extract all the contents of zip file in current directory$^            zipobj.extractall(target_dir)$^    else:$^        print(f"found directory {extracted_path} - not extracting it from archive.")$^$^$^def _maybe_convert_sets(target_dir, extracted_data):$^    extracted_dir = os.path.join(target_dir, extracted_data, "wav48")$^    txt_dir = os.path.join(target_dir, extracted_data, "txt")$^$^    directory = os.path.expanduser(extracted_dir)$^    srtd = len(sorted(os.listdir(directory)))$^    all_samples = []$^$^    for target in sorted(os.listdir(directory)):$^        all_samples += _maybe_prepare_set($^            path.join(extracted_dir, os.path.split(target)[-1])$^        )$^$^    num_samples = len(all_samples)$^    print(f"converting wav files to {sample_rate}hz...")$^    pool = pool()$^    bar = progressbar.progressbar(max_value=num_samples, widgets=simple_bar)$^    for i, _ in enumerate(pool.imap_unordered(one_sample, all_samples), start=1):$^        bar.update(i)$^    bar.update(num_samples)$^    pool.close()$^    pool.join()$^$^    _write_csv(extracted_dir, txt_dir, target_dir)$^$^$^def one_sample(sample):$^    if is_audio_file(sample):$^        y, sr = librosa.load(sample, sr=16000)$^$^        # trim the beginning and ending silence$^        yt, index = librosa.effects.trim(y)  # pylint: disable=unused-variable$^$^        duration = librosa.get_duration(yt, sr)$^        if duration > max_secs or duration < min_secs:$^            os.remove(sample)$^        else:$^            librosa.output.write_wav(sample, yt, sr)$^$^$^def _maybe_prepare_set(target_csv):$^    samples = sorted(os.listdir(target_csv))$^    new_samples = []$^    for s in samples:$^        new_samples.append(os.path.join(target_csv, s))$^    samples = new_samples$^    return samples$^$^$^def _write_csv(extracted_dir, txt_dir, target_dir):$^    print(f"writing csv file")$^    dset_abs_path = extracted_dir$^    dset_txt_abs_path = txt_dir$^$^    audios = make_manifest(dset_abs_path)$^    utterences = load_txts(dset_txt_abs_path)$^$^    csv = []$^$^    for file in audios:$^$^        st = os.stat(file)$^        file_size = st.st_size$^$^        # seems to be one wav directory missing from txts - skip it$^        file_parts = file.split(os.sep)$^        file_subdir = file_parts[-2]$^        if file_subdir == "p315":$^            continue$^$^        file_name = file_parts[-1]$^        file_name_no_ext = file_name.split(".")[0]$^$^        utterence = utterences[file_name_no_ext]$^        utterence_clean = re.sub(r"[^a-za-z' ]+", "", utterence).lower().strip()$^$^        csv_line = f"{file},{file_size},{utterence_clean}\n"$^        csv.append(csv_line)$^$^    random.seed(1454)$^    random.shuffle(csv)$^$^    train_data = csv[:37000]$^    dev_data = csv[37000:40200]$^    test_data = csv[40200:]$^$^    with open(os.path.join(target_dir, "vctk_full.csv"), "w") as fd:$^        fd.write("wav_filename,wav_filesize,transcript\n")$^        for i in csv:$^            fd.write(i)$^    with open(os.path.join(target_dir, "vctk_train.csv"), "w") as fd:$^        fd.write("wav_filename,wav_filesize,transcript\n")$^        for i in train_data:$^            fd.write(i)$^    with open(os.path.join(target_dir, "vctk_dev.csv"), "w") as fd:$^        fd.write("wav_filename,wav_filesize,transcript\n")$^        for i in dev_data:$^            fd.write(i)$^    with open(os.path.join(target_dir, "vctk_test.csv"), "w") as fd:$^        fd.write("wav_filename,wav_filesize,transcript\n")$^        for i in test_data:$^            fd.write(i)$^$^    print(f"wrote {len(csv)} entries")$^$^$^def make_manifest(directory):$^    audios = []$^    directory = os.path.expanduser(directory)$^    for target in sorted(os.listdir(directory)):$^        d = os.path.join(directory, target)$^        if not os.path.isdir(d):$^            continue$^$^        for root, _, fnames in sorted(os.walk(d)):$^            for fname in fnames:$^                new_path = os.path.join(root, fname)$^                item = new_path$^                audios.append(item)$^    return audios$^$^$^def load_txts(directory):$^    utterences = dict()$^    directory = os.path.expanduser(directory)$^    for target in sorted(os.listdir(directory)):$^        d = os.path.join(directory, target)$^        if not os.path.isdir(d):$^            continue$^$^        for root, _, fnames in sorted(os.walk(d)):$^            for fname in fnames:$^                if fname.endswith(".txt"):$^                    with open(os.path.join(root, fname), "r") as f:$^                        fname_no_ext = os.path.basename(fname).rsplit(".", 1)[0]$^                        utterences[fname_no_ext] = f.readline()$^    return utterences$^$^$^audio_extensions = [".wav", "wav"]$^$^$^def is_audio_file(filepath):$^    return any($^        os.path.basename(filepath).endswith(extension) for extension in audio_extensions$^    )$^$^$^if __name__ == "__main__":$^    _download_and_preprocess_data(sys.argv[1])$^#!/usr/bin/env python$^$^"""$^    name    : ldc timit dataset$^    url     : https://catalog.ldc.upenn.edu/ldc93s1$^    hours   : 5$^    type    : read - english$^    authors : garofolo, john, et al.$^    type    : ldc membership$^    licence : ldc user agreement$^"""$^$^import errno$^import fnmatch$^import os$^import subprocess$^import sys$^import tarfile$^from os import path$^$^import pandas as pd$^$^$^def clean(word):$^    # lc all & strip punctuation which are not required$^    new = word.lower().replace(".", "")$^    new = new.replace(",", "")$^    new = new.replace(";", "")$^    new = new.replace('"', "")$^    new = new.replace("!", "")$^    new = new.replace("?", "")$^    new = new.replace(":", "")$^    new = new.replace("-", "")$^    return new$^$^$^def _preprocess_data(args):$^$^    # assume data is downloaded from ldc - https://catalog.ldc.upenn.edu/ldc93s1$^$^    # sa sentences are repeated throughout by each speaker therefore can be removed for asr as they will affect wer$^    ignoresasentences = true$^$^    if ignoresasentences:$^        print("using recommended ignore sa sentences")$^        print($^            "ignoring sa sentences (2 x sentences which are repeated by all speakers)"$^        )$^    else:$^        print("using unrecommended setting to include sa sentences")$^$^    datapath = args$^    target = path.join(datapath, "timit")$^    print($^        "checking to see if data has already been extracted in given argument: %s",$^        target,$^    )$^$^    if not path.isdir(target):$^        print($^            "could not find extracted data, trying to find: timit-ldc93s1.tgz in: ",$^            datapath,$^        )$^        filepath = path.join(datapath, "timit-ldc93s1.tgz")$^        if path.isfile(filepath):$^            print("file found, extracting")$^            tar = tarfile.open(filepath)$^            tar.extractall(target)$^            tar.close()$^        else:$^            print("file should be downloaded from ldc and placed at:", filepath)$^            strerror = "file not found"$^            raise ioerror(errno, strerror, filepath)$^$^    else:$^        # is path therefore continue$^        print("found extracted data in: ", target)$^$^    print("preprocessing data")$^    # we convert the .wav (nist sphere format) into msoft .wav$^    # creates _rif.wav as the new .wav file$^    for root, dirnames, filenames in os.walk(target):$^        for filename in fnmatch.filter(filenames, "*.wav"):$^            sph_file = os.path.join(root, filename)$^            wav_file = os.path.join(root, filename)[:-4] + "_rif.wav"$^            print("converting {} to {}".format(sph_file, wav_file))$^            subprocess.check_call(["sox", sph_file, wav_file])$^$^    print("preprocessing complete")$^    print("building csvs")$^$^    # lists to build csv files$^    train_list_wavs, train_list_trans, train_list_size = [], [], []$^    test_list_wavs, test_list_trans, test_list_size = [], [], []$^$^    for root, dirnames, filenames in os.walk(target):$^        for filename in fnmatch.filter(filenames, "*_rif.wav"):$^            full_wav = os.path.join(root, filename)$^            wav_filesize = path.getsize(full_wav)$^$^            # need to remove _rif.wav (8chars) then add .txt$^            trans_file = full_wav[:-8] + ".txt"$^            with open(trans_file, "r") as f:$^                for line in f:$^                    split = line.split()$^                    start = split[0]$^                    end = split[1]$^                    t_list = split[2:]$^                    trans = ""$^$^                    for t in t_list:$^                        trans = trans + " " + clean(t)$^$^            # if ignoresasentences we only want those without sa in the name$^            # or$^            # if not ignoresasentences we want all to be added$^            if (ignoresasentences and not ("sa" in os.path.basename(full_wav))) or ($^                not ignoresasentences$^            ):$^                if "train" in full_wav.lower():$^                    train_list_wavs.append(full_wav)$^                    train_list_trans.append(trans)$^                    train_list_size.append(wav_filesize)$^                elif "test" in full_wav.lower():$^                    test_list_wavs.append(full_wav)$^                    test_list_trans.append(trans)$^                    test_list_size.append(wav_filesize)$^                else:$^                    raise ioerror$^$^    a = {$^        "wav_filename": train_list_wavs,$^        "wav_filesize": train_list_size,$^        "transcript": train_list_trans,$^    }$^$^    c = {$^        "wav_filename": test_list_wavs,$^        "wav_filesize": test_list_size,$^        "transcript": test_list_trans,$^    }$^$^    all = {$^        "wav_filename": train_list_wavs + test_list_wavs,$^        "wav_filesize": train_list_size + test_list_size,$^        "transcript": train_list_trans + test_list_trans,$^    }$^$^    df_all = pd.dataframe($^        all, columns=["wav_filename", "wav_filesize", "transcript"], dtype=int$^    )$^    df_train = pd.dataframe($^        a, columns=["wav_filename", "wav_filesize", "transcript"], dtype=int$^    )$^    df_test = pd.dataframe($^        c, columns=["wav_filename", "wav_filesize", "transcript"], dtype=int$^    )$^$^    df_all.to_csv($^        target + "/timit_all.csv", sep=",", header=true, index=false, encoding="ascii"$^    )$^    df_train.to_csv($^        target + "/timit_train.csv", sep=",", header=true, index=false, encoding="ascii"$^    )$^    df_test.to_csv($^        target + "/timit_test.csv", sep=",", header=true, index=false, encoding="ascii"$^    )$^$^$^if __name__ == "__main__":$^    _preprocess_data(sys.argv[1])$^    print("completed")$^#!/usr/bin/env python$^# ensure that you have downloaded the ldc dataset ldc97s62 and tar exists in a folder e.g.$^# ./data/swb/swb1_ldc97s62.tgz$^# from the deepspeech directory run with: ./bin/import_swb.py ./data/swb/$^import codecs$^import fnmatch$^import os$^import random$^import subprocess$^import sys$^import tarfile$^import unicodedata$^import wave$^$^import librosa$^import pandas$^import requests$^import soundfile  # <= has an external dependency on libsndfile$^$^from deepspeech_training.util.importers import validate_label_eng as validate_label$^$^# archive_name refers to isip alignments from 01/29/03$^archive_name = "switchboard_word_alignments.tar.gz"$^archive_url = "http://www.openslr.org/resources/5/"$^archive_dir_name = "ldc97s62"$^ldc_dataset = "swb1_ldc97s62.tgz"$^$^$^def download_file(folder, url):$^    # https://stackoverflow.com/a/16696317/738515$^    local_filename = url.split("/")[-1]$^    full_filename = os.path.join(folder, local_filename)$^    r = requests.get(url, stream=true)$^    with open(full_filename, "wb") as f:$^        for chunk in r.iter_content(chunk_size=1024):$^            if chunk:  # filter out keep-alive new chunks$^                f.write(chunk)$^    return full_filename$^$^$^def maybe_download(archive_url, target_dir, ldc_dataset):$^    # if archive file does not exist, download it...$^    archive_path = os.path.join(target_dir, ldc_dataset)$^    ldc_path = archive_url + ldc_dataset$^    if not os.path.exists(target_dir):$^        print('no path "%s" - creating ...' % target_dir)$^        os.makedirs(target_dir)$^$^    if not os.path.exists(archive_path):$^        print('no archive "%s" - downloading...' % archive_path)$^        download_file(target_dir, ldc_path)$^    else:$^        print('found archive "%s" - not downloading.' % archive_path)$^    return archive_path$^$^$^def _download_and_preprocess_data(data_dir):$^    new_data_dir = os.path.join(data_dir, archive_dir_name)$^    target_dir = os.path.abspath(new_data_dir)$^    archive_path = os.path.abspath(os.path.join(data_dir, ldc_dataset))$^$^    # check swb1_ldc97s62.tgz then extract$^    assert os.path.isfile(archive_path)$^    _extract(target_dir, archive_path)$^$^    # transcripts$^    transcripts_path = maybe_download(archive_url, target_dir, archive_name)$^    _extract(target_dir, transcripts_path)$^$^    # check swb1_d1/2/3/4/swb_ms98_transcriptions$^    expected_folders = [$^        "swb1_d1",$^        "swb1_d2",$^        "swb1_d3",$^        "swb1_d4",$^        "swb_ms98_transcriptions",$^    ]$^    assert all([os.path.isdir(os.path.join(target_dir, e)) for e in expected_folders])$^$^    # conditionally convert swb sph data to wav$^    _maybe_convert_wav(target_dir, "swb1_d1", "swb1_d1-wav")$^    _maybe_convert_wav(target_dir, "swb1_d2", "swb1_d2-wav")$^    _maybe_convert_wav(target_dir, "swb1_d3", "swb1_d3-wav")$^    _maybe_convert_wav(target_dir, "swb1_d4", "swb1_d4-wav")$^$^    # conditionally split wav data$^    d1 = _maybe_split_wav_and_sentences($^        target_dir, "swb_ms98_transcriptions", "swb1_d1-wav", "swb1_d1-split-wav"$^    )$^    d2 = _maybe_split_wav_and_sentences($^        target_dir, "swb_ms98_transcriptions", "swb1_d2-wav", "swb1_d2-split-wav"$^    )$^    d3 = _maybe_split_wav_and_sentences($^        target_dir, "swb_ms98_transcriptions", "swb1_d3-wav", "swb1_d3-split-wav"$^    )$^    d4 = _maybe_split_wav_and_sentences($^        target_dir, "swb_ms98_transcriptions", "swb1_d4-wav", "swb1_d4-split-wav"$^    )$^$^    swb_files = d1.append(d2).append(d3).append(d4)$^$^    train_files, dev_files, test_files = _split_sets(swb_files)$^$^    # write sets to disk as csv files$^    train_files.to_csv(os.path.join(target_dir, "swb-train.csv"), index=false)$^    dev_files.to_csv(os.path.join(target_dir, "swb-dev.csv"), index=false)$^    test_files.to_csv(os.path.join(target_dir, "swb-test.csv"), index=false)$^$^$^def _extract(target_dir, archive_path):$^    with tarfile.open(archive_path) as tar:$^        tar.extractall(target_dir)$^$^$^def _maybe_convert_wav(data_dir, original_data, converted_data):$^    source_dir = os.path.join(data_dir, original_data)$^    target_dir = os.path.join(data_dir, converted_data)$^$^    # conditionally convert sph files to wav files$^    if os.path.exists(target_dir):$^        print("skipping maybe_convert_wav")$^        return$^$^    # create target_dir$^    os.makedirs(target_dir)$^$^    # loop over sph files in source_dir and convert each to 16-bit pcm wav$^    for root, dirnames, filenames in os.walk(source_dir):$^        for filename in fnmatch.filter(filenames, "*.sph"):$^            for channel in ["1", "2"]:$^                sph_file = os.path.join(root, filename)$^                wav_filename = ($^                    os.path.splitext(os.path.basename(sph_file))[0]$^                    + "-"$^                    + channel$^                    + ".wav"$^                )$^                wav_file = os.path.join(target_dir, wav_filename)$^                temp_wav_filename = ($^                    os.path.splitext(os.path.basename(sph_file))[0]$^                    + "-"$^                    + channel$^                    + "-temp.wav"$^                )$^                temp_wav_file = os.path.join(target_dir, temp_wav_filename)$^                print("converting {} to {}".format(sph_file, temp_wav_file))$^                subprocess.check_call($^                    [$^                        "sph2pipe",$^                        "-c",$^                        channel,$^                        "-p",$^                        "-f",$^                        "rif",$^                        sph_file,$^                        temp_wav_file,$^                    ]$^                )$^                print("upsampling {} to {}".format(temp_wav_file, wav_file))$^                audiodata, framerate = librosa.load(temp_wav_file, sr=16000, mono=true)$^                soundfile.write(wav_file, audiodata, framerate, "pcm_16")$^                os.remove(temp_wav_file)$^$^$^def _parse_transcriptions(trans_file):$^    segments = []$^    with codecs.open(trans_file, "r", "utf-8") as fin:$^        for line in fin:$^            if line.startswith("#") or len(line) <= 1:$^                continue$^$^            tokens = line.split()$^            start_time = float(tokens[1])$^            stop_time = float(tokens[2])$^            transcript = validate_label(" ".join(tokens[3:]))$^$^            if transcript == none:$^                continue$^$^            # we need to do the encode-decode dance here because encode$^            # returns a bytes() object on python 3, and text_to_char_array$^            # expects a string.$^            transcript = ($^                unicodedata.normalize("nfkd", transcript)$^                .encode("ascii", "ignore")$^                .decode("ascii", "ignore")$^            )$^$^            segments.append($^                {$^                    "start_time": start_time,$^                    "stop_time": stop_time,$^                    "transcript": transcript,$^                }$^            )$^    return segments$^$^$^def _maybe_split_wav_and_sentences(data_dir, trans_data, original_data, converted_data):$^    trans_dir = os.path.join(data_dir, trans_data)$^    source_dir = os.path.join(data_dir, original_data)$^    target_dir = os.path.join(data_dir, converted_data)$^    if os.path.exists(target_dir):$^        print("skipping maybe_split_wav")$^        return$^$^    os.makedirs(target_dir)$^$^    files = []$^$^    # loop over transcription files and split corresponding wav$^    for root, dirnames, filenames in os.walk(trans_dir):$^        for filename in fnmatch.filter(filenames, "*.text"):$^            if "trans" not in filename:$^                continue$^            trans_file = os.path.join(root, filename)$^            segments = _parse_transcriptions(trans_file)$^$^            # open wav corresponding to transcription file$^            channel = ("2", "1")[$^                (os.path.splitext(os.path.basename(trans_file))[0])[6] == "a"$^            ]$^            wav_filename = ($^                "sw0"$^                + (os.path.splitext(os.path.basename(trans_file))[0])[2:6]$^                + "-"$^                + channel$^                + ".wav"$^            )$^            wav_file = os.path.join(source_dir, wav_filename)$^$^            print("splitting {} according to {}".format(wav_file, trans_file))$^$^            if not os.path.exists(wav_file):$^                print("skipping. does not exist:" + wav_file)$^                continue$^$^            origaudio = wave.open(wav_file, "r")$^$^            # loop over segments and split wav_file for each segment$^            for segment in segments:$^                # create wav segment filename$^                start_time = segment["start_time"]$^                stop_time = segment["stop_time"]$^                new_wav_filename = ($^                    os.path.splitext(os.path.basename(trans_file))[0]$^                    + "-"$^                    + str(start_time)$^                    + "-"$^                    + str(stop_time)$^                    + ".wav"$^                )$^                if _is_wav_too_short(new_wav_filename):$^                    continue$^                new_wav_file = os.path.join(target_dir, new_wav_filename)$^$^                _split_wav(origaudio, start_time, stop_time, new_wav_file)$^$^                new_wav_filesize = os.path.getsize(new_wav_file)$^                transcript = segment["transcript"]$^                files.append($^                    (os.path.abspath(new_wav_file), new_wav_filesize, transcript)$^                )$^$^            # close origaudio$^            origaudio.close()$^$^    return pandas.dataframe($^        data=files, columns=["wav_filename", "wav_filesize", "transcript"]$^    )$^$^$^def _is_wav_too_short(wav_filename):$^    short_wav_filenames = [$^        "sw2986a-ms98-a-trans-80.6385-83.358875.wav",$^        "sw2663a-ms98-a-trans-161.12025-164.213375.wav",$^    ]$^    return wav_filename in short_wav_filenames$^$^$^def _split_wav(origaudio, start_time, stop_time, new_wav_file):$^    framerate = origaudio.getframerate()$^    origaudio.setpos(int(start_time * framerate))$^    chunkdata = origaudio.readframes(int((stop_time - start_time) * framerate))$^    chunkaudio = wave.open(new_wav_file, "w")$^    chunkaudio.setnchannels(origaudio.getnchannels())$^    chunkaudio.setsampwidth(origaudio.getsampwidth())$^    chunkaudio.setframerate(framerate)$^    chunkaudio.writeframes(chunkdata)$^    chunkaudio.close()$^$^$^def _split_sets(filelist):$^    """$^    randomply split the datasets into train, validation, and test sets where the size of the$^    validation and test sets are determined by the `get_sample_size` function. $^    """$^    random.shuffle(filelist)$^    sample_size = get_sample_size(len(filelist))$^$^    train_beg = 0$^    train_end = len(filelist) - 2 * sample_size$^$^    dev_beg = train_end$^    dev_end = train_end + sample_size$^$^    test_beg = dev_end$^    test_end = len(filelist)$^$^    return ($^        filelist[train_beg:train_end],$^        filelist[dev_beg:dev_end],$^        filelist[test_beg:test_end],$^    )$^$^$^def get_sample_size(population_size):$^    """calculates the sample size for a 99% confidence and 1% margin of error$^    """$^    margin_of_error = 0.01$^    fraction_picking = 0.50$^    z_score = 2.58  # corresponds to confidence level 99%$^    numerator = (z_score ** 2 * fraction_picking * (1 - fraction_picking)) / ($^        margin_of_error ** 2$^    )$^    sample_size = 0$^    for train_size in range(population_size, 0, -1):$^        denominator = 1 + (z_score ** 2 * fraction_picking * (1 - fraction_picking)) / ($^            margin_of_error ** 2 * train_size$^        )$^        sample_size = int(numerator / denominator)$^        if 2 * sample_size + train_size <= population_size:$^            break$^    return sample_size$^$^$^def _read_data_set($^    filelist,$^    thread_count,$^    batch_size,$^    numcep,$^    numcontext,$^    stride=1,$^    offset=0,$^    next_index=lambda i: i + 1,$^    limit=0,$^):$^    # optionally apply dataset size limit$^    if limit > 0:$^        filelist = filelist.iloc[:limit]$^$^    filelist = filelist[offset::stride]$^$^    # return dataset$^    return dataset($^        txt_files, thread_count, batch_size, numcep, numcontext, next_index=next_index$^    )$^$^$^if __name__ == "__main__":$^    _download_and_preprocess_data(sys.argv[1])$^#!/usr/bin/env python3$^import csv$^import os$^import re$^import subprocess$^import zipfile$^from multiprocessing import pool$^$^import progressbar$^import sox$^$^import unidecode$^from deepspeech_training.util.downloader import simple_bar, maybe_download$^from deepspeech_training.util.importers import ($^    get_counter,$^    get_imported_samples,$^    get_importers_parser,$^    get_validate_label,$^    print_import_report,$^)$^$^fieldnames = ["wav_filename", "wav_filesize", "transcript"]$^sample_rate = 16000$^max_secs = 15$^archive_name = "2019-04-11_fr_fr"$^archive_dir_name = "ts_" + archive_name$^archive_url = ($^    "https://deepspeech-storage-mirror.s3.fr-par.scw.cloud/" + archive_name + ".zip"$^)$^$^$^def _download_and_preprocess_data(target_dir, english_compatible=false):$^    # making path absolute$^    target_dir = os.path.abspath(target_dir)$^    # conditionally download data$^    archive_path = maybe_download($^        "ts_" + archive_name + ".zip", target_dir, archive_url$^    )$^    # conditionally extract archive data$^    _maybe_extract(target_dir, archive_dir_name, archive_path)$^    # conditionally convert trainingspeech data to deepspeech csvs and wav$^    _maybe_convert_sets($^        target_dir, archive_dir_name, english_compatible=english_compatible$^    )$^$^$^def _maybe_extract(target_dir, extracted_data, archive_path):$^    # if target_dir/extracted_data does not exist, extract archive in target_dir$^    extracted_path = os.path.join(target_dir, extracted_data)$^    if not os.path.exists(extracted_path):$^        print('no directory "%s" - extracting archive...' % extracted_path)$^        if not os.path.isdir(extracted_path):$^            os.mkdir(extracted_path)$^        with zipfile.zipfile(archive_path) as zip_f:$^            zip_f.extractall(extracted_path)$^    else:$^        print('found directory "%s" - not extracting it from archive.' % archive_path)$^$^$^def one_sample(sample):$^    """ take a audio file, and optionally convert it to 16khz wav """$^    orig_filename = sample["path"]$^    # storing wav files next to the wav ones - just with a different suffix$^    wav_filename = os.path.splitext(orig_filename)[0] + ".converted.wav"$^    _maybe_convert_wav(orig_filename, wav_filename)$^    file_size = -1$^    frames = 0$^    if os.path.exists(wav_filename):$^        file_size = os.path.getsize(wav_filename)$^        frames = int($^            subprocess.check_output($^                ["soxi", "-s", wav_filename], stderr=subprocess.stdout$^            )$^        )$^    label = sample["text"]$^$^    rows = []$^$^    # keep track of how many samples are good vs. problematic$^    counter = get_counter()$^    if file_size == -1:$^        # excluding samples that failed upon conversion$^        counter["failed"] += 1$^    elif label is none:$^        # excluding samples that failed on label validation$^        counter["invalid_label"] += 1$^    elif int(frames / sample_rate * 1000 / 10 / 2) < len(str(label)):$^        # excluding samples that are too short to fit the transcript$^        counter["too_short"] += 1$^    elif frames / sample_rate > max_secs:$^        # excluding very long samples to keep a reasonable batch-size$^        counter["too_long"] += 1$^    else:$^        # this one is good - keep it for the target csv$^        rows.append((wav_filename, file_size, label))$^        counter["imported_time"] += frames$^    counter["all"] += 1$^    counter["total_time"] += frames$^$^    return (counter, rows)$^$^$^def _maybe_convert_sets(target_dir, extracted_data, english_compatible=false):$^    extracted_dir = os.path.join(target_dir, extracted_data)$^    # override existing csv with normalized one$^    target_csv_template = os.path.join(target_dir, "ts_" + archive_name + "_{}.csv")$^    if os.path.isfile(target_csv_template):$^        return$^    path_to_original_csv = os.path.join(extracted_dir, "data.csv")$^    with open(path_to_original_csv) as csv_f:$^        data = [$^            d$^            for d in csv.dictreader(csv_f, delimiter=",")$^            if float(d["duration"]) <= max_secs$^        ]$^$^    for line in data:$^        line["path"] = os.path.join(extracted_dir, line["path"])$^$^    num_samples = len(data)$^    rows = []$^    counter = get_counter()$^$^    print("importing {} wav files...".format(num_samples))$^    pool = pool()$^    bar = progressbar.progressbar(max_value=num_samples, widgets=simple_bar)$^    for i, processed in enumerate(pool.imap_unordered(one_sample, data), start=1):$^        counter += processed[0]$^        rows += processed[1]$^        bar.update(i)$^    bar.update(num_samples)$^    pool.close()$^    pool.join()$^$^    with open(target_csv_template.format("train"), "w", encoding="utf-8", newline="") as train_csv_file:  # 80%$^        with open(target_csv_template.format("dev"), "w", encoding="utf-8", newline="") as dev_csv_file:  # 10%$^            with open(target_csv_template.format("test"), "w", encoding="utf-8", newline="") as test_csv_file:  # 10%$^                train_writer = csv.dictwriter(train_csv_file, fieldnames=fieldnames)$^                train_writer.writeheader()$^                dev_writer = csv.dictwriter(dev_csv_file, fieldnames=fieldnames)$^                dev_writer.writeheader()$^                test_writer = csv.dictwriter(test_csv_file, fieldnames=fieldnames)$^                test_writer.writeheader()$^$^                for i, item in enumerate(rows):$^                    transcript = validate_label($^                        cleanup_transcript($^                            item[2], english_compatible=english_compatible$^                        )$^                    )$^                    if not transcript:$^                        continue$^                    wav_filename = os.path.join(target_dir, extracted_data, item[0])$^                    i_mod = i % 10$^                    if i_mod == 0:$^                        writer = test_writer$^                    elif i_mod == 1:$^                        writer = dev_writer$^                    else:$^                        writer = train_writer$^                    writer.writerow($^                        dict($^                            wav_filename=wav_filename,$^                            wav_filesize=os.path.getsize(wav_filename),$^                            transcript=transcript,$^                        )$^                    )$^$^    imported_samples = get_imported_samples(counter)$^    assert counter["all"] == num_samples$^    assert len(rows) == imported_samples$^$^    print_import_report(counter, sample_rate, max_secs)$^$^$^def _maybe_convert_wav(orig_filename, wav_filename):$^    if not os.path.exists(wav_filename):$^        transformer = sox.transformer()$^        transformer.convert(samplerate=sample_rate)$^        try:$^            transformer.build(orig_filename, wav_filename)$^        except sox.core.soxerror as ex:$^            print("sox processing error", ex, orig_filename, wav_filename)$^$^$^punctuations_reg = re.compile(r"[°\-,;!?.()\[\]*…—]")$^multiple_spaces_reg = re.compile(r"\s{2,}")$^$^$^def cleanup_transcript(text, english_compatible=false):$^    text = text.replace("’", "'").replace("\u00a0", " ")$^    text = punctuations_reg.sub(" ", text)$^    text = multiple_spaces_reg.sub(" ", text)$^    if english_compatible:$^        text = unidecode.unidecode(text)$^    return text.strip().lower()$^$^$^def handle_args():$^    parser = get_importers_parser(description="importer for trainingspeech dataset.")$^    parser.add_argument(dest="target_dir")$^    parser.add_argument($^        "--english-compatible",$^        action="store_true",$^        dest="english_compatible",$^        help="remove diactrics and other non-ascii chars.",$^    )$^    return parser.parse_args()$^$^$^if __name__ == "__main__":$^    cli_args = handle_args()$^    validate_label = get_validate_label(cli_args)$^    _download_and_preprocess_data(cli_args.target_dir, cli_args.english_compatible)$^#!/usr/bin/env python$^import os$^import sys$^$^import pandas$^$^from deepspeech_training.util.downloader import maybe_download$^$^$^def _download_and_preprocess_data(data_dir):$^    # conditionally download data$^    ldc93s1_base = "ldc93s1"$^    ldc93s1_base_url = "https://catalog.ldc.upenn.edu/desc/addenda/"$^    local_file = maybe_download($^        ldc93s1_base + ".wav", data_dir, ldc93s1_base_url + ldc93s1_base + ".wav"$^    )$^    trans_file = maybe_download($^        ldc93s1_base + ".txt", data_dir, ldc93s1_base_url + ldc93s1_base + ".txt"$^    )$^    with open(trans_file, "r") as fin:$^        transcript = " ".join(fin.read().strip().lower().split(" ")[2:]).replace($^            ".", ""$^        )$^$^    df = pandas.dataframe($^        data=[(os.path.abspath(local_file), os.path.getsize(local_file), transcript)],$^        columns=["wav_filename", "wav_filesize", "transcript"],$^    )$^    df.to_csv(os.path.join(data_dir, "ldc93s1.csv"), index=false)$^$^$^if __name__ == "__main__":$^    _download_and_preprocess_data(sys.argv[1])$^#!/usr/bin/env python$^import csv$^import os$^import sys$^import subprocess$^import tarfile$^from glob import glob$^from multiprocessing import pool$^$^import progressbar$^import sox$^$^from deepspeech_training.util.downloader import simple_bar, maybe_download$^from deepspeech_training.util.importers import ($^    get_counter,$^    get_imported_samples,$^    print_import_report,$^)$^from deepspeech_training.util.importers import validate_label_eng as validate_label$^$^fieldnames = ["wav_filename", "wav_filesize", "transcript"]$^sample_rate = 16000$^max_secs = 10$^archive_dir_name = "cv_corpus_v1"$^archive_name = archive_dir_name + ".tar.gz"$^archive_url = ($^    "https://s3.us-east-2.amazonaws.com/common-voice-data-download/" + archive_name$^)$^$^$^def _download_and_preprocess_data(target_dir):$^    # making path absolute$^    target_dir = os.path.abspath(target_dir)$^    # conditionally download data$^    archive_path = maybe_download(archive_name, target_dir, archive_url)$^    # conditionally extract common voice data$^    _maybe_extract(target_dir, archive_dir_name, archive_path)$^    # conditionally convert common voice csv files and mp3 data to deepspeech csvs and wav$^    _maybe_convert_sets(target_dir, archive_dir_name)$^$^$^def _maybe_extract(target_dir, extracted_data, archive_path):$^    # if target_dir/extracted_data does not exist, extract archive in target_dir$^    extracted_path = os.join(target_dir, extracted_data)$^    if not os.path.exists(extracted_path):$^        print('no directory "%s" - extracting archive...' % extracted_path)$^        with tarfile.open(archive_path) as tar:$^            tar.extractall(target_dir)$^    else:$^        print('found directory "%s" - not extracting it from archive.' % extracted_path)$^$^$^def _maybe_convert_sets(target_dir, extracted_data):$^    extracted_dir = os.path.join(target_dir, extracted_data)$^    for source_csv in glob(os.path.join(extracted_dir, "*.csv")):$^        _maybe_convert_set($^            extracted_dir,$^            source_csv,$^            os.path.join(target_dir, os.path.split(source_csv)[-1]),$^        )$^$^$^def one_sample(sample):$^    mp3_filename = sample[0]$^    # storing wav files next to the mp3 ones - just with a different suffix$^    wav_filename = path.splitext(mp3_filename)[0] + ".wav"$^    _maybe_convert_wav(mp3_filename, wav_filename)$^    frames = int($^        subprocess.check_output(["soxi", "-s", wav_filename], stderr=subprocess.stdout)$^    )$^    file_size = -1$^    if os.path.exists(wav_filename):$^        file_size = path.getsize(wav_filename)$^        frames = int($^            subprocess.check_output($^                ["soxi", "-s", wav_filename], stderr=subprocess.stdout$^            )$^        )$^    label = validate_label(sample[1])$^    rows = []$^    counter = get_counter()$^    if file_size == -1:$^        # excluding samples that failed upon conversion$^        counter["failed"] += 1$^    elif label is none:$^        # excluding samples that failed on label validation$^        counter["invalid_label"] += 1$^    elif int(frames / sample_rate * 1000 / 10 / 2) < len(str(label)):$^        # excluding samples that are too short to fit the transcript$^        counter["too_short"] += 1$^    elif frames / sample_rate > max_secs:$^        # excluding very long samples to keep a reasonable batch-size$^        counter["too_long"] += 1$^    else:$^        # this one is good - keep it for the target csv$^        rows.append((wav_filename, file_size, label))$^        counter["imported_time"] += frames$^    counter["all"] += 1$^    counter["total_time"] += frames$^    return (counter, rows)$^$^$^def _maybe_convert_set(extracted_dir, source_csv, target_csv):$^    print()$^    if os.path.exists(target_csv):$^        print('found csv file "%s" - not importing "%s".' % (target_csv, source_csv))$^        return$^    print('no csv file "%s" - importing "%s"...' % (target_csv, source_csv))$^    samples = []$^    with open(source_csv) as source_csv_file:$^        reader = csv.dictreader(source_csv_file)$^        for row in reader:$^            samples.append((os.path.join(extracted_dir, row["filename"]), row["text"]))$^$^    # mutable counters for the concurrent embedded routine$^    counter = get_counter()$^    num_samples = len(samples)$^    rows = []$^$^    print("importing mp3 files...")$^    pool = pool()$^    bar = progressbar.progressbar(max_value=num_samples, widgets=simple_bar)$^    for i, processed in enumerate(pool.imap_unordered(one_sample, samples), start=1):$^        counter += processed[0]$^        rows += processed[1]$^        bar.update(i)$^    bar.update(num_samples)$^    pool.close()$^    pool.join()$^$^    print('writing "%s"...' % target_csv)$^    with open(target_csv, "w", encoding="utf-8", newline="") as target_csv_file:$^        writer = csv.dictwriter(target_csv_file, fieldnames=fieldnames)$^        writer.writeheader()$^        bar = progressbar.progressbar(max_value=len(rows), widgets=simple_bar)$^        for filename, file_size, transcript in bar(rows):$^            writer.writerow($^                {$^                    "wav_filename": filename,$^                    "wav_filesize": file_size,$^                    "transcript": transcript,$^                }$^            )$^$^    imported_samples = get_imported_samples(counter)$^    assert counter["all"] == num_samples$^    assert len(rows) == imported_samples$^$^    print_import_report(counter, sample_rate, max_secs)$^$^$^def _maybe_convert_wav(mp3_filename, wav_filename):$^    if not os.path.exists(wav_filename):$^        transformer = sox.transformer()$^        transformer.convert(samplerate=sample_rate)$^        try:$^            transformer.build(mp3_filename, wav_filename)$^        except sox.core.soxerror:$^            pass$^$^$^if __name__ == "__main__":$^    _download_and_preprocess_data(sys.argv[1])$^#!/usr/bin/env python$^"""$^downloads and prepares (parts of) the "spoken wikipedia corpora" for deepspeech.py$^use "python3 import_swc.py -h" for help$^"""$^$^import argparse$^import csv$^import os$^import random$^import re$^import shutil$^import sys$^import tarfile$^import unicodedata$^import wave$^import xml.etree.elementtree as et$^from collections import counter$^from glob import glob$^from multiprocessing.pool import threadpool$^$^import progressbar$^import sox$^$^from deepspeech_training.util.downloader import simple_bar, maybe_download$^from deepspeech_training.util.importers import validate_label_eng as validate_label$^from ds_ctcdecoder import alphabet$^$^swc_url = "https://www2.informatik.uni-hamburg.de/nats/pub/swc/swc_{language}.tar"$^swc_archive = "swc_{language}.tar"$^languages = ["dutch", "english", "german"]$^fieldnames = ["wav_filename", "wav_filesize", "transcript"]$^fieldnames_ext = fieldnames + ["article", "speaker"]$^channels = 1$^sample_rate = 16000$^unknown = "<unknown>"$^audio_pattern = "audio*.ogg"$^wav_name = "audio.wav"$^aligned_name = "aligned.swc"$^$^substitutions = {$^    "german": [$^        (re.compile(r"\$"), "dollar"),$^        (re.compile(r"€"), "euro"),$^        (re.compile(r"£"), "pfund"),$^        ($^            re.compile(r"ein tausend ([^\s]+) hundert ([^\s]+) er( |$)"),$^            r"\1zehnhundert \2er ",$^        ),$^        (re.compile(r"ein tausend (acht|neun) hundert"), r"\1zehnhundert"),$^        ($^            re.compile($^                r"eins punkt null null null punkt null null null punkt null null null"$^            ),$^            "eine milliarde",$^        ),$^        ($^            re.compile($^                r"punkt null null null punkt null null null punkt null null null"$^            ),$^            "milliarden",$^        ),$^        (re.compile(r"eins punkt null null null punkt null null null"), "eine million"),$^        (re.compile(r"punkt null null null punkt null null null"), "millionen"),$^        (re.compile(r"eins punkt null null null"), "ein tausend"),$^        (re.compile(r"punkt null null null"), "tausend"),$^        (re.compile(r"punkt null"), none),$^    ]$^}$^$^dont_normalize = {"german": "äöüäöüß"}$^$^pre_filter = str.maketrans(dict.fromkeys("/()[]{}<>:"))$^$^$^class sample:$^    def __init__(self, wav_path, start, end, text, article, speaker, sub_set=none):$^        self.wav_path = wav_path$^        self.start = start$^        self.end = end$^        self.text = text$^        self.article = article$^        self.speaker = speaker$^        self.sub_set = sub_set$^$^$^def fail(message):$^    print(message)$^    sys.exit(1)$^$^$^def group(lst, get_key):$^    groups = {}$^    for obj in lst:$^        key = get_key(obj)$^        if key in groups:$^            groups[key].append(obj)$^        else:$^            groups[key] = [obj]$^    return groups$^$^$^def get_sample_size(population_size):$^    margin_of_error = 0.01$^    fraction_picking = 0.50$^    z_score = 2.58  # corresponds to confidence level 99%$^    numerator = (z_score ** 2 * fraction_picking * (1 - fraction_picking)) / ($^        margin_of_error ** 2$^    )$^    sample_size = 0$^    for train_size in range(population_size, 0, -1):$^        denominator = 1 + (z_score ** 2 * fraction_picking * (1 - fraction_picking)) / ($^            margin_of_error ** 2 * train_size$^        )$^        sample_size = int(numerator / denominator)$^        if 2 * sample_size + train_size <= population_size:$^            break$^    return sample_size$^$^$^def maybe_download_language(language):$^    lang_upper = language[0].upper() + language[1:]$^    return maybe_download($^        swc_archive.format(language=lang_upper),$^        cli_args.base_dir,$^        swc_url.format(language=lang_upper),$^    )$^$^$^def maybe_extract(data_dir, extracted_data, archive):$^    extracted = os.path.join(data_dir, extracted_data)$^    if os.path.isdir(extracted):$^        print('found directory "{}" - not extracting.'.format(extracted))$^    else:$^        print('extracting "{}"...'.format(archive))$^        with tarfile.open(archive) as tar:$^            members = tar.getmembers()$^            bar = progressbar.progressbar(max_value=len(members), widgets=simple_bar)$^            for member in bar(members):$^                tar.extract(member=member, path=extracted)$^    return extracted$^$^$^def ignored(node):$^    if node is none:$^        return false$^    if node.tag == "ignored":$^        return true$^    return ignored(node.find(".."))$^$^$^def read_token(token):$^    texts, start, end = [], none, none$^    notes = token.findall("n")$^    if len(notes) > 0:$^        for note in notes:$^            attributes = note.attrib$^            if start is none and "start" in attributes:$^                start = int(attributes["start"])$^            if "end" in attributes:$^                token_end = int(attributes["end"])$^                if end is none or token_end > end:$^                    end = token_end$^            if "pronunciation" in attributes:$^                t = attributes["pronunciation"]$^                texts.append(t)$^    elif "text" in token.attrib:$^        texts.append(token.attrib["text"])$^    return start, end, " ".join(texts)$^$^$^def in_alphabet(alphabet, c):$^    return alphabet.canencode(c) if alphabet else true$^$^$^$^alphabets = {}$^$^$^def get_alphabet(language):$^    if language in alphabets:$^        return alphabets[language]$^    alphabet_path = getattr(cli_args, language + "_alphabet")$^    alphabet = alphabet(alphabet_path) if alphabet_path else none$^    alphabets[language] = alphabet$^    return alphabet$^$^$^def label_filter(label, language):$^    label = label.translate(pre_filter)$^    label = validate_label(label)$^    if label is none:$^        return none, "validation"$^    substitutions = substitutions[language] if language in substitutions else []$^    for pattern, replacement in substitutions:$^        if replacement is none:$^            if pattern.match(label):$^                return none, "substitution rule"$^        else:$^            label = pattern.sub(replacement, label)$^    chars = []$^    dont_normalize = dont_normalize[language] if language in dont_normalize else ""$^    alphabet = get_alphabet(language)$^    for c in label:$^        if cli_args.normalize and c not in dont_normalize and not in_alphabet(alphabet, c):$^            c = unicodedata.normalize("nfkd", c).encode("ascii", "ignore").decode("ascii", "ignore")$^        for sc in c:$^            if not in_alphabet(alphabet, sc):$^                return none, "illegal character"$^            chars.append(sc)$^    label = "".join(chars)$^    label = validate_label(label)$^    return label, "validation" if label is none else none$^$^$^def collect_samples(base_dir, language):$^    roots = []$^    for root, _, files in os.walk(base_dir):$^        if aligned_name in files and wav_name in files:$^            roots.append(root)$^    samples = []$^    reasons = counter()$^$^    def add_sample($^        p_wav_path, p_article, p_speaker, p_start, p_end, p_text, p_reason="complete"$^    ):$^        if p_start is not none and p_end is not none and p_text is not none:$^            duration = p_end - p_start$^            text, filter_reason = label_filter(p_text, language)$^            skip = false$^            if filter_reason is not none:$^                skip = true$^                p_reason = filter_reason$^            elif cli_args.exclude_unknown_speakers and p_speaker == unknown:$^                skip = true$^                p_reason = "unknown speaker"$^            elif cli_args.exclude_unknown_articles and p_article == unknown:$^                skip = true$^                p_reason = "unknown article"$^            elif duration > cli_args.max_duration > 0 and cli_args.ignore_too_long:$^                skip = true$^                p_reason = "exceeded duration"$^            elif int(duration / 30) < len(text):$^                skip = true$^                p_reason = "too short to decode"$^            elif duration / len(text) < 10:$^                skip = true$^                p_reason = "length duration ratio"$^            if skip:$^                reasons[p_reason] += 1$^            else:$^                samples.append($^                    sample(p_wav_path, p_start, p_end, text, p_article, p_speaker)$^                )$^        elif p_start is none or p_end is none:$^            reasons["missing timestamps"] += 1$^        else:$^            reasons["missing text"] += 1$^$^    print("collecting samples...")$^    bar = progressbar.progressbar(max_value=len(roots), widgets=simple_bar)$^    for root in bar(roots):$^        wav_path = os.path.join(root, wav_name)$^        aligned = et.parse(os.path.join(root, aligned_name))$^        article = unknown$^        speaker = unknown$^        for prop in aligned.iter("prop"):$^            attributes = prop.attrib$^            if "key" in attributes and "value" in attributes:$^                if attributes["key"] == "dc.identifier":$^                    article = attributes["value"]$^                elif attributes["key"] == "reader.name":$^                    speaker = attributes["value"]$^        for sentence in aligned.iter("s"):$^            if ignored(sentence):$^                continue$^            split = false$^            tokens = list(map(read_token, sentence.findall("t")))$^            sample_start, sample_end, token_texts, sample_texts = none, none, [], []$^            for token_start, token_end, token_text in tokens:$^                if cli_args.exclude_numbers and any(c.isdigit() for c in token_text):$^                    add_sample($^                        wav_path,$^                        article,$^                        speaker,$^                        sample_start,$^                        sample_end,$^                        " ".join(sample_texts),$^                        p_reason="has numbers",$^                    )$^                    sample_start, sample_end, token_texts, sample_texts = ($^                        none,$^                        none,$^                        [],$^                        [],$^                    )$^                    continue$^                if sample_start is none:$^                    sample_start = token_start$^                if sample_start is none:$^                    continue$^                token_texts.append(token_text)$^                if token_end is not none:$^                    if ($^                        token_start != sample_start$^                        and token_end - sample_start > cli_args.max_duration > 0$^                    ):$^                        add_sample($^                            wav_path,$^                            article,$^                            speaker,$^                            sample_start,$^                            sample_end,$^                            " ".join(sample_texts),$^                            p_reason="split",$^                        )$^                        sample_start = sample_end$^                        sample_texts = []$^                        split = true$^                    sample_end = token_end$^                    sample_texts.extend(token_texts)$^                    token_texts = []$^            add_sample($^                wav_path,$^                article,$^                speaker,$^                sample_start,$^                sample_end,$^                " ".join(sample_texts),$^                p_reason="split" if split else "complete",$^            )$^    print("skipped samples:")$^    for reason, n in reasons.most_common():$^        print(" - {}: {}".format(reason, n))$^    return samples$^$^$^def maybe_convert_one_to_wav(entry):$^    root, _, files = entry$^    transformer = sox.transformer()$^    transformer.convert(samplerate=sample_rate, n_channels=channels)$^    combiner = sox.combiner()$^    combiner.convert(samplerate=sample_rate, n_channels=channels)$^    output_wav = os.path.join(root, wav_name)$^    if os.path.isfile(output_wav):$^        return$^    files = sorted(glob(os.path.join(root, audio_pattern)))$^    try:$^        if len(files) == 1:$^            transformer.build(files[0], output_wav)$^        elif len(files) > 1:$^            wav_files = []$^            for i, file in enumerate(files):$^                wav_path = os.path.join(root, "audio{}.wav".format(i))$^                transformer.build(file, wav_path)$^                wav_files.append(wav_path)$^            combiner.set_input_format(file_type=["wav"] * len(wav_files))$^            combiner.build(wav_files, output_wav, "concatenate")$^    except sox.core.soxerror:$^        return$^$^$^def maybe_convert_to_wav(base_dir):$^    roots = list(os.walk(base_dir))$^    print("converting and joining source audio files...")$^    bar = progressbar.progressbar(max_value=len(roots), widgets=simple_bar)$^    tp = threadpool()$^    for _ in bar(tp.imap_unordered(maybe_convert_one_to_wav, roots)):$^        pass$^    tp.close()$^    tp.join()$^$^$^def assign_sub_sets(samples):$^    sample_size = get_sample_size(len(samples))$^    speakers = group(samples, lambda sample: sample.speaker).values()$^    speakers = list(sorted(speakers, key=len))$^    sample_sets = [[], []]$^    while any(map(lambda s: len(s) < sample_size, sample_sets)) and len(speakers) > 0:$^        for sample_set in sample_sets:$^            if len(sample_set) < sample_size and len(speakers) > 0:$^                sample_set.extend(speakers.pop(0))$^    train_set = sum(speakers, [])$^    if len(train_set) == 0:$^        print($^            "warning: unable to build dev and test sets without speaker bias as there is no speaker meta data"$^        )$^        random.seed(42)  # same source data == same output$^        random.shuffle(samples)$^        for index, sample in enumerate(samples):$^            if index < sample_size:$^                sample.sub_set = "dev"$^            elif index < 2 * sample_size:$^                sample.sub_set = "test"$^            else:$^                sample.sub_set = "train"$^    else:$^        for sub_set, sub_set_samples in [$^            ("train", train_set),$^            ("dev", sample_sets[0]),$^            ("test", sample_sets[1]),$^        ]:$^            for sample in sub_set_samples:$^                sample.sub_set = sub_set$^    for sub_set, sub_set_samples in group(samples, lambda s: s.sub_set).items():$^        t = sum(map(lambda s: s.end - s.start, sub_set_samples)) / (1000 * 60 * 60)$^        print($^            'sub-set "{}" with {} samples (duration: {:.2f} h)'.format($^                sub_set, len(sub_set_samples), t$^            )$^        )$^$^$^def create_sample_dirs(language):$^    print("creating sample directories...")$^    for set_name in ["train", "dev", "test"]:$^        dir_path = os.path.join(cli_args.base_dir, language + "-" + set_name)$^        if not os.path.isdir(dir_path):$^            os.mkdir(dir_path)$^$^$^def split_audio_files(samples, language):$^    print("splitting audio files...")$^    sub_sets = counter()$^    src_wav_files = group(samples, lambda s: s.wav_path).items()$^    bar = progressbar.progressbar(max_value=len(src_wav_files), widgets=simple_bar)$^    for wav_path, file_samples in bar(src_wav_files):$^        file_samples = sorted(file_samples, key=lambda s: s.start)$^        with wave.open(wav_path, "r") as src_wav_file:$^            rate = src_wav_file.getframerate()$^            for sample in file_samples:$^                index = sub_sets[sample.sub_set]$^                sample_wav_path = os.path.join($^                    cli_args.base_dir,$^                    language + "-" + sample.sub_set,$^                    "sample-{0:06d}.wav".format(index),$^                )$^                sample.wav_path = sample_wav_path$^                sub_sets[sample.sub_set] += 1$^                src_wav_file.setpos(int(sample.start * rate / 1000.0))$^                data = src_wav_file.readframes($^                    int((sample.end - sample.start) * rate / 1000.0)$^                )$^                with wave.open(sample_wav_path, "w") as sample_wav_file:$^                    sample_wav_file.setnchannels(src_wav_file.getnchannels())$^                    sample_wav_file.setsampwidth(src_wav_file.getsampwidth())$^                    sample_wav_file.setframerate(rate)$^                    sample_wav_file.writeframes(data)$^$^$^def write_csvs(samples, language):$^    for sub_set, set_samples in group(samples, lambda s: s.sub_set).items():$^        set_samples = sorted(set_samples, key=lambda s: s.wav_path)$^        base_dir = os.path.abspath(cli_args.base_dir)$^        csv_path = os.path.join(base_dir, language + "-" + sub_set + ".csv")$^        print('writing "{}"...'.format(csv_path))$^        with open(csv_path, "w", encoding="utf-8", newline="") as csv_file:$^            writer = csv.dictwriter($^                csv_file, fieldnames=fieldnames_ext if cli_args.add_meta else fieldnames$^            )$^            writer.writeheader()$^            bar = progressbar.progressbar($^                max_value=len(set_samples), widgets=simple_bar$^            )$^            for sample in bar(set_samples):$^                row = {$^                    "wav_filename": os.path.relpath(sample.wav_path, base_dir),$^                    "wav_filesize": os.path.getsize(sample.wav_path),$^                    "transcript": sample.text,$^                }$^                if cli_args.add_meta:$^                    row["article"] = sample.article$^                    row["speaker"] = sample.speaker$^                writer.writerow(row)$^$^$^def cleanup(archive, language):$^    if not cli_args.keep_archive:$^        print('removing archive "{}"...'.format(archive))$^        os.remove(archive)$^    language_dir = os.path.join(cli_args.base_dir, language)$^    if not cli_args.keep_intermediate and os.path.isdir(language_dir):$^        print('removing intermediate files in "{}"...'.format(language_dir))$^        shutil.rmtree(language_dir)$^$^$^def prepare_language(language):$^    archive = maybe_download_language(language)$^    extracted = maybe_extract(cli_args.base_dir, language, archive)$^    maybe_convert_to_wav(extracted)$^    samples = collect_samples(extracted, language)$^    assign_sub_sets(samples)$^    create_sample_dirs(language)$^    split_audio_files(samples, language)$^    write_csvs(samples, language)$^    cleanup(archive, language)$^$^$^def handle_args():$^    parser = argparse.argumentparser(description="import spoken wikipedia corpora")$^    parser.add_argument("base_dir", help="directory containing all data")$^    parser.add_argument($^        "--language", default="all", help="one of (all|{})".format("|".join(languages))$^    )$^    parser.add_argument($^        "--exclude_numbers",$^        type=bool,$^        default=true,$^        help="if sequences with non-transliterated numbers should be excluded",$^    )$^    parser.add_argument($^        "--max_duration",$^        type=int,$^        default=10000,$^        help="maximum sample duration in milliseconds",$^    )$^    parser.add_argument($^        "--ignore_too_long",$^        type=bool,$^        default=false,$^        help="if samples exceeding max_duration should be removed",$^    )$^    parser.add_argument($^        "--normalize",$^        action="store_true",$^        help="converts diacritic characters to their base ones",$^    )$^    for language in languages:$^        parser.add_argument($^            "--{}_alphabet".format(language),$^            help="exclude {} samples with characters not in provided alphabet file".format($^                language$^            ),$^        )$^    parser.add_argument($^        "--add_meta", action="store_true", help="adds article and speaker csv columns"$^    )$^    parser.add_argument($^        "--exclude_unknown_speakers",$^        action="store_true",$^        help="exclude unknown speakers",$^    )$^    parser.add_argument($^        "--exclude_unknown_articles",$^        action="store_true",$^        help="exclude unknown articles",$^    )$^    parser.add_argument($^        "--keep_archive",$^        type=bool,$^        default=true,$^        help="if downloaded archives should be kept",$^    )$^    parser.add_argument($^        "--keep_intermediate",$^        type=bool,$^        default=false,$^        help="if intermediate files should be kept",$^    )$^    return parser.parse_args()$^$^$^if __name__ == "__main__":$^    cli_args = handle_args()$^    if cli_args.language == "all":$^        for lang in languages:$^            prepare_language(lang)$^    elif cli_args.language in languages:$^        prepare_language(cli_args.language)$^    else:$^        fail("wrong language id")$^#!/usr/bin/env python$^"""$^tool for playing (and augmenting) single samples or samples from sample databases (sdb files) and deepspeech csv files$^use "python3 play.py -h" for help$^"""$^$^import os$^import sys$^import random$^import argparse$^$^from deepspeech_training.util.audio import get_loadable_audio_type_from_extension, audio_type_pcm, audio_type_wav$^from deepspeech_training.util.sample_collections import samplelist, labeledsample, samples_from_source$^from deepspeech_training.util.augmentations import parse_augmentations, apply_sample_augmentations, sampleaugmentation$^$^$^def get_samples_in_play_order():$^    ext = os.path.splitext(cli_args.source)[1].lower()$^    if get_loadable_audio_type_from_extension(ext):$^        samples = samplelist([(cli_args.source, 0)], labeled=false)$^    else:$^        samples = samples_from_source(cli_args.source, buffering=0)$^    played = 0$^    index = cli_args.start$^    while true:$^        if 0 <= cli_args.number <= played:$^            return$^        if cli_args.random:$^            yield samples[random.randint(0, len(samples) - 1)]$^        elif index < 0:$^            yield samples[len(samples) + index]$^        elif index >= len(samples):$^            print("no sample with index {}".format(cli_args.start))$^            sys.exit(1)$^        else:$^            yield samples[index]$^        played += 1$^        index = (index + 1) % len(samples)$^$^$^def play_collection():$^    augmentations = parse_augmentations(cli_args.augment)$^    if any(not isinstance(a, sampleaugmentation) for a in augmentations):$^        print("warning: some of the augmentations cannot be simulated by this command.")$^    samples = get_samples_in_play_order()$^    samples = apply_sample_augmentations(samples,$^                                         audio_type=audio_type_pcm,$^                                         augmentations=augmentations,$^                                         process_ahead=0,$^                                         clock=cli_args.clock)$^    for sample in samples:$^        if not cli_args.quiet:$^            print('sample "{}"'.format(sample.sample_id), file=sys.stderr)$^            if isinstance(sample, labeledsample):$^                print('  "{}"'.format(sample.transcript), file=sys.stderr)$^        if cli_args.pipe:$^            sample.change_audio_type(audio_type_wav)$^            sys.stdout.buffer.write(sample.audio.getvalue())$^            return$^        wave_obj = simpleaudio.waveobject(sample.audio,$^                                          sample.audio_format.channels,$^                                          sample.audio_format.width,$^                                          sample.audio_format.rate)$^        play_obj = wave_obj.play()$^        play_obj.wait_done()$^$^$^def handle_args():$^    parser = argparse.argumentparser($^        description="tool for playing (and augmenting) single samples or samples from sample databases (sdb files) "$^        "and deepspeech csv files"$^    )$^    parser.add_argument("source", help="sample db, csv or wav file to play samples from")$^    parser.add_argument($^        "--start",$^        type=int,$^        default=0,$^        help="sample index to start at (negative numbers are relative to the end of the collection)",$^    )$^    parser.add_argument($^        "--number",$^        type=int,$^        default=-1,$^        help="number of samples to play (-1 for endless)",$^    )$^    parser.add_argument($^        "--random",$^        action="store_true",$^        help="if samples should be played in random order",$^    )$^    parser.add_argument($^        "--augment",$^        action='append',$^        help="add an augmentation operation",$^    )$^    parser.add_argument($^        "--clock",$^        type=float,$^        default=0.5,$^        help="simulates clock value used for augmentations during training."$^             "ranges from 0.0 (representing parameter start values) to"$^             "1.0 (representing parameter end values)",$^    )$^    parser.add_argument($^        "--pipe",$^        action="store_true",$^        help="pipe first sample as wav file to stdout. forces --number to 1.",$^    )$^    parser.add_argument($^        "--quiet",$^        action="store_true",$^        help="no info logging to console",$^    )$^    return parser.parse_args()$^$^$^if __name__ == "__main__":$^    cli_args = handle_args()$^    if not cli_args.pipe:$^        try:$^            import simpleaudio$^        except modulenotfounderror:$^            print('unless using the --pipe flag, play.py requires python package "simpleaudio" for playing samples')$^            sys.exit(1)$^    try:$^        play_collection()$^    except keyboardinterrupt:$^        print(" stopped")$^        sys.exit(0)$^#!/usr/bin/env python3$^import csv$^import os$^import subprocess$^import tarfile$^import unicodedata$^from glob import glob$^from multiprocessing import pool$^$^import progressbar$^$^from deepspeech_training.util.downloader import simple_bar, maybe_download$^from deepspeech_training.util.importers import ($^    get_counter,$^    get_imported_samples,$^    get_importers_parser,$^    get_validate_label,$^    print_import_report,$^)$^from ds_ctcdecoder import alphabet$^$^fieldnames = ["wav_filename", "wav_filesize", "transcript"]$^sample_rate = 16000$^max_secs = 15$^$^archive_dir_name = "african_accented_french"$^archive_name = "african_accented_french.tar.gz"$^archive_url = "http://www.openslr.org/resources/57/" + archive_name$^$^$^def _download_and_preprocess_data(target_dir):$^    # making path absolute$^    target_dir = os.path.abspath(target_dir)$^    # conditionally download data$^    archive_path = maybe_download(archive_name, target_dir, archive_url)$^    # conditionally extract data$^    _maybe_extract(target_dir, archive_dir_name, archive_path)$^    # produce csv files$^    _maybe_convert_sets(target_dir, archive_dir_name)$^$^$^def _maybe_extract(target_dir, extracted_data, archive_path):$^    # if target_dir/extracted_data does not exist, extract archive in target_dir$^    extracted_path = os.path.join(target_dir, extracted_data)$^    if not os.path.exists(extracted_path):$^        print('no directory "%s" - extracting archive...' % extracted_path)$^        if not os.path.isdir(extracted_path):$^            os.mkdir(extracted_path)$^        tar = tarfile.open(archive_path)$^        tar.extractall(target_dir)$^        tar.close()$^    else:$^        print('found directory "%s" - not extracting it from archive.' % archive_path)$^$^$^def one_sample(sample):$^    """ take a audio file, and optionally convert it to 16khz wav """$^    wav_filename = sample[0]$^    file_size = -1$^    frames = 0$^    if os.path.exists(wav_filename):$^        file_size = os.path.getsize(wav_filename)$^        frames = int($^            subprocess.check_output($^                ["soxi", "-s", wav_filename], stderr=subprocess.stdout$^            )$^        )$^    label = label_filter(sample[1])$^    counter = get_counter()$^    rows = []$^    if file_size == -1:$^        # excluding samples that failed upon conversion$^        counter["failed"] += 1$^    elif label is none:$^        # excluding samples that failed on label validation$^        counter["invalid_label"] += 1$^    elif int(frames / sample_rate * 1000 / 15 / 2) < len(str(label)):$^        # excluding samples that are too short to fit the transcript$^        counter["too_short"] += 1$^    elif frames / sample_rate > max_secs:$^        # excluding very long samples to keep a reasonable batch-size$^        counter["too_long"] += 1$^    else:$^        # this one is good - keep it for the target csv$^        rows.append((wav_filename, file_size, label))$^        counter["imported_time"] += frames$^    counter["all"] += 1$^    counter["total_time"] += frames$^$^    return (counter, rows)$^$^$^def _maybe_convert_sets(target_dir, extracted_data):$^    extracted_dir = os.path.join(target_dir, extracted_data)$^    # override existing csv with normalized one$^    target_csv_template = os.path.join($^        target_dir, archive_dir_name, archive_name.replace(".tar.gz", "_{}.csv")$^    )$^    if os.path.isfile(target_csv_template):$^        return$^$^    wav_root_dir = os.path.join(extracted_dir)$^$^    all_files = [$^        "transcripts/train/yaounde/fn_text.txt",$^        "transcripts/train/ca16_conv/transcripts.txt",$^        "transcripts/train/ca16_read/conditioned.txt",$^        "transcripts/dev/niger_west_african_fr/transcripts.txt",$^        "speech/dev/niger_west_african_fr/niger_wav_file_name_transcript.tsv",$^        "transcripts/devtest/ca16_read/conditioned.txt",$^        "transcripts/test/ca16/prompts.txt",$^    ]$^$^    transcripts = {}$^    for tr in all_files:$^        with open(os.path.join(target_dir, archive_dir_name, tr), "r") as tr_source:$^            for line in tr_source.readlines():$^                line = line.strip()$^$^                if ".tsv" in tr:$^                    sep = "	"$^                else:$^                    sep = " "$^$^                audio = os.path.basename(line.split(sep)[0])$^$^                if not (".wav" in audio):$^                    if ".tdf" in audio:$^                        audio = audio.replace(".tdf", ".wav")$^                    else:$^                        audio += ".wav"$^$^                transcript = " ".join(line.split(sep)[1:])$^                transcripts[audio] = transcript$^$^    # get audiofile path and transcript for each sentence in tsv$^    samples = []$^    glob_dir = os.path.join(wav_root_dir, "**/*.wav")$^    for record in glob(glob_dir, recursive=true):$^        record_file = os.path.basename(record)$^        if record_file in transcripts:$^            samples.append((record, transcripts[record_file]))$^$^    # keep track of how many samples are good vs. problematic$^    counter = get_counter()$^    num_samples = len(samples)$^    rows = []$^$^    print("importing wav files...")$^    pool = pool()$^    bar = progressbar.progressbar(max_value=num_samples, widgets=simple_bar)$^    for i, processed in enumerate(pool.imap_unordered(one_sample, samples), start=1):$^        counter += processed[0]$^        rows += processed[1]$^        bar.update(i)$^    bar.update(num_samples)$^    pool.close()$^    pool.join()$^$^    with open(target_csv_template.format("train"), "w", encoding="utf-8", newline="") as train_csv_file:  # 80%$^        with open(target_csv_template.format("dev"), "w", encoding="utf-8", newline="") as dev_csv_file:  # 10%$^            with open(target_csv_template.format("test"), "w", encoding="utf-8", newline="") as test_csv_file:  # 10%$^                train_writer = csv.dictwriter(train_csv_file, fieldnames=fieldnames)$^                train_writer.writeheader()$^                dev_writer = csv.dictwriter(dev_csv_file, fieldnames=fieldnames)$^                dev_writer.writeheader()$^                test_writer = csv.dictwriter(test_csv_file, fieldnames=fieldnames)$^                test_writer.writeheader()$^$^                for i, item in enumerate(rows):$^                    transcript = validate_label(item[2])$^                    if not transcript:$^                        continue$^                    wav_filename = item[0]$^                    i_mod = i % 10$^                    if i_mod == 0:$^                        writer = test_writer$^                    elif i_mod == 1:$^                        writer = dev_writer$^                    else:$^                        writer = train_writer$^                    writer.writerow($^                        dict($^                            wav_filename=wav_filename,$^                            wav_filesize=os.path.getsize(wav_filename),$^                            transcript=transcript,$^                        )$^                    )$^$^    imported_samples = get_imported_samples(counter)$^    assert counter["all"] == num_samples$^    assert len(rows) == imported_samples$^$^    print_import_report(counter, sample_rate, max_secs)$^$^$^def handle_args():$^    parser = get_importers_parser($^        description="importer for african accented french dataset. more information on http://www.openslr.org/57/."$^    )$^    parser.add_argument(dest="target_dir")$^    parser.add_argument($^        "--filter_alphabet",$^        help="exclude samples with characters not in provided alphabet",$^    )$^    parser.add_argument($^        "--normalize",$^        action="store_true",$^        help="converts diacritic characters to their base ones",$^    )$^    return parser.parse_args()$^$^$^if __name__ == "__main__":$^    cli_args = handle_args()$^    alphabet = alphabet(cli_args.filter_alphabet) if cli_args.filter_alphabet else none$^    validate_label = get_validate_label(cli_args)$^$^    def label_filter(label):$^        if cli_args.normalize:$^            label = ($^                unicodedata.normalize("nfkd", label.strip())$^                .encode("ascii", "ignore")$^                .decode("ascii", "ignore")$^            )$^        label = validate_label(label)$^        if alphabet and label and not alphabet.canencode(label):$^            label = none$^        return label$^$^    _download_and_preprocess_data(target_dir=cli_args.target_dir)$^#!/usr/bin/env python$^"""$^tool for comparing two wav samples$^"""$^import sys$^import argparse$^import numpy as np$^$^from deepspeech_training.util.audio import audio_type_np, mean_dbfs$^from deepspeech_training.util.sample_collections import load_sample$^$^$^def fail(message):$^    print(message, file=sys.stderr, flush=true)$^    sys.exit(1)$^$^$^def compare_samples():$^    sample1 = load_sample(cli_args.sample1).unpack()$^    sample2 = load_sample(cli_args.sample2).unpack()$^    if sample1.audio_format != sample2.audio_format:$^        fail('samples differ on: audio-format ({} and {})'.format(sample1.audio_format, sample2.audio_format))$^    if abs(sample1.duration - sample2.duration) > 0.001:$^        fail('samples differ on: duration ({} and {})'.format(sample1.duration, sample2.duration))$^    sample1.change_audio_type(audio_type_np)$^    sample2.change_audio_type(audio_type_np)$^    samples = [sample1, sample2]$^    largest = np.argmax([sample1.audio.shape[0], sample2.audio.shape[0]])$^    smallest = (largest + 1) % 2$^    samples[largest].audio = samples[largest].audio[:len(samples[smallest].audio)]$^    audio_diff = samples[largest].audio - samples[smallest].audio$^    diff_dbfs = mean_dbfs(audio_diff)$^    differ_msg = 'samples differ on: sample data ({:0.2f} db difference) '.format(diff_dbfs)$^    equal_msg = 'samples are considered equal ({:0.2f} db difference)'.format(diff_dbfs)$^    if cli_args.if_differ:$^        if diff_dbfs <= cli_args.threshold:$^            fail(equal_msg)$^        if not cli_args.no_success_output:$^            print(differ_msg, file=sys.stderr, flush=true)$^    else:$^        if diff_dbfs > cli_args.threshold:$^            fail(differ_msg)$^        if not cli_args.no_success_output:$^            print(equal_msg, file=sys.stderr, flush=true)$^$^$^def handle_args():$^    parser = argparse.argumentparser($^        description="tool for checking similarity of two samples"$^    )$^    parser.add_argument("sample1", help="filename of sample 1 to compare")$^    parser.add_argument("sample2", help="filename of sample 2 to compare")$^    parser.add_argument("--threshold", type=float, default=-60.0,$^                        help="db of sample deltas above which they are considered different")$^    parser.add_argument($^        "--if-differ",$^        action="store_true",$^        help="if to succeed and return status code 0 on different signals and fail on equal ones (inverse check)."$^             "this will still fail on different formats or durations.",$^    )$^    parser.add_argument($^        "--no-success-output",$^        action="store_true",$^        help="stay silent on success (if samples are equal of - with --if-differ - samples are not equal)",$^    )$^    return parser.parse_args()$^$^$^if __name__ == "__main__":$^    cli_args = handle_args()$^    compare_samples()$^#!/usr/bin/env python$^$^import csv$^import logging$^import math$^import os$^import subprocess$^import urllib$^from pathlib import path$^$^import pandas as pd$^from sox import transformer$^$^import swifter$^from deepspeech_training.util.importers import get_importers_parser, get_validate_label$^$^__version__ = "0.1.0"$^_logger = logging.getlogger(__name__)$^$^$^max_secs = 10$^bitdepth = 16$^n_channels = 1$^sample_rate = 16000$^$^dev_percentage = 0.10$^train_percentage = 0.80$^$^$^def parse_args(args):$^    """parse command line parameters$^    args:$^      args ([str]): command line parameters as list of strings$^    returns:$^      :obj:`argparse.namespace`: command line parameters namespace$^    """$^    parser = get_importers_parser(description="imports gramvaani data for deep speech")$^    parser.add_argument($^        "--version",$^        action="version",$^        version="gramvaaniimporter {ver}".format(ver=__version__),$^    )$^    parser.add_argument($^        "-v",$^        "--verbose",$^        action="store_const",$^        required=false,$^        help="set loglevel to info",$^        dest="loglevel",$^        const=logging.info,$^    )$^    parser.add_argument($^        "-vv",$^        "--very-verbose",$^        action="store_const",$^        required=false,$^        help="set loglevel to debug",$^        dest="loglevel",$^        const=logging.debug,$^    )$^    parser.add_argument($^        "-c",$^        "--csv_filename",$^        required=true,$^        help="path to the gramvaani csv",$^        dest="csv_filename",$^    )$^    parser.add_argument($^        "-t",$^        "--target_dir",$^        required=true,$^        help="directory in which to save the importer gramvaani data",$^        dest="target_dir",$^    )$^    return parser.parse_args(args)$^$^$^def setup_logging(level):$^    """setup basic logging$^    args:$^      level (int): minimum log level for emitting messages$^    """$^    format = "[%(asctime)s] %(levelname)s:%(name)s:%(message)s"$^    logging.basicconfig($^        level=level, stream=sys.stdout, format=format, datefmt="%y-%m-%d %h:%m:%s"$^    )$^$^$^class gramvaanicsv:$^    """gramvaanicsv representing a gramvaani dataset.$^    args:$^      csv_filename (str): path to the gramvaani csv$^    attributes:$^        data (:class:`pandas.dataframe`): `pandas.dataframe` containing the gramvaani csv data$^    """$^$^    def __init__(self, csv_filename):$^        self.data = self._parse_csv(csv_filename)$^$^    def _parse_csv(self, csv_filename):$^        _logger.info("parsing csv file...%s", os.path.abspath(csv_filename))$^        data = pd.read_csv($^            os.path.abspath(csv_filename),$^            names=[$^                "piece_id",$^                "audio_url",$^                "transcript_labelled",$^                "transcript",$^                "labels",$^                "content_filename",$^                "audio_length",$^                "user_id",$^            ],$^            usecols=["audio_url", "transcript", "audio_length"],$^            skiprows=[0],$^            engine="python",$^            encoding="utf-8",$^            quotechar='"',$^            quoting=csv.quote_all,$^        )$^        data.dropna(inplace=true)$^        _logger.info("parsed %d lines csv file." % len(data))$^        return data$^$^$^class gramvaanidownloader:$^    """gramvaanidownloader downloads a gramvaani dataset.$^    args:$^      gram_vaani_csv (gramvaanicsv): a gramvaanicsv representing the data to download$^      target_dir (str): the path to download the data to$^    attributes:$^        data (:class:`pandas.dataframe`): `pandas.dataframe` containing the gramvaani csv data$^    """$^$^    def __init__(self, gram_vaani_csv, target_dir):$^        self.target_dir = target_dir$^        self.data = gram_vaani_csv.data$^$^    def download(self):$^        """downloads the data associated with this instance$^        return:$^          mp3_directory (os.path): the directory into which the associated mp3's were downloaded$^        """$^        mp3_directory = self._pre_download()$^        self.data.swifter.apply($^            func=lambda arg: self._download(*arg, mp3_directory), axis=1, raw=true$^        )$^        return mp3_directory$^$^    def _pre_download(self):$^        mp3_directory = os.path.join(self.target_dir, "mp3")$^        if not os.path.exists(self.target_dir):$^            _logger.info("creating directory...%s", self.target_dir)$^            os.mkdir(self.target_dir)$^        if not os.path.exists(mp3_directory):$^            _logger.info("creating directory...%s", mp3_directory)$^            os.mkdir(mp3_directory)$^        return mp3_directory$^$^    def _download(self, audio_url, transcript, audio_length, mp3_directory):$^        if audio_url == "audio_url":$^            return$^        mp3_filename = os.path.join(mp3_directory, os.path.basename(audio_url))$^        if not os.path.exists(mp3_filename):$^            _logger.debug("downloading mp3 file...%s", audio_url)$^            urllib.request.urlretrieve(audio_url, mp3_filename)$^        else:$^            _logger.debug("already downloaded mp3 file...%s", audio_url)$^$^$^class gramvaaniconverter:$^    """gramvaaniconverter converts the mp3's to wav's for a gramvaani dataset.$^    args:$^      target_dir (str): the path to download the data from$^      mp3_directory (os.path): the path containing the gramvaani mp3's$^    attributes:$^        target_dir (str): the target directory passed as a command line argument$^        mp3_directory (os.path): the path containing the gramvaani mp3's$^    """$^$^    def __init__(self, target_dir, mp3_directory):$^        self.target_dir = target_dir$^        self.mp3_directory = path(mp3_directory)$^$^    def convert(self):$^        """converts the mp3's associated with this instance to wav's$^        return:$^          wav_directory (os.path): the directory into which the associated wav's were downloaded$^        """$^        wav_directory = self._pre_convert()$^        for mp3_filename in self.mp3_directory.glob("**/*.mp3"):$^            wav_filename = os.path.join($^                wav_directory,$^                os.path.splitext(os.path.basename(mp3_filename))[0] + ".wav",$^            )$^            if not os.path.exists(wav_filename):$^                _logger.debug($^                    "converting mp3 file %s to wav file %s"$^                    % (mp3_filename, wav_filename)$^                )$^                transformer = transformer()$^                transformer.convert($^                    samplerate=sample_rate, n_channels=n_channels, bitdepth=bitdepth$^                )$^                transformer.build(str(mp3_filename), str(wav_filename))$^            else:$^                _logger.debug($^                    "already converted mp3 file %s to wav file %s"$^                    % (mp3_filename, wav_filename)$^                )$^        return wav_directory$^$^    def _pre_convert(self):$^        wav_directory = os.path.join(self.target_dir, "wav")$^        if not os.path.exists(self.target_dir):$^            _logger.info("creating directory...%s", self.target_dir)$^            os.mkdir(self.target_dir)$^        if not os.path.exists(wav_directory):$^            _logger.info("creating directory...%s", wav_directory)$^            os.mkdir(wav_directory)$^        return wav_directory$^$^$^class gramvaanidatasets:$^    def __init__(self, target_dir, wav_directory, gram_vaani_csv):$^        self.target_dir = target_dir$^        self.wav_directory = wav_directory$^        self.csv_data = gram_vaani_csv.data$^        self.raw = pd.dataframe(columns=["wav_filename", "wav_filesize", "transcript"])$^        self.valid = pd.dataframe($^            columns=["wav_filename", "wav_filesize", "transcript"]$^        )$^        self.train = pd.dataframe($^            columns=["wav_filename", "wav_filesize", "transcript"]$^        )$^        self.dev = pd.dataframe(columns=["wav_filename", "wav_filesize", "transcript"])$^        self.test = pd.dataframe(columns=["wav_filename", "wav_filesize", "transcript"])$^$^    def create(self):$^        self._convert_csv_data_to_raw_data()$^        self.raw.index = range(len(self.raw.index))$^        self.valid = self.raw[self._is_valid_raw_rows()]$^        self.valid = self.valid.sample(frac=1).reset_index(drop=true)$^        train_size, dev_size, test_size = self._calculate_data_set_sizes()$^        self.train = self.valid.loc[0:train_size]$^        self.dev = self.valid.loc[train_size : train_size + dev_size]$^        self.test = self.valid.loc[$^            train_size + dev_size : train_size + dev_size + test_size$^        ]$^$^    def _convert_csv_data_to_raw_data(self):$^        self.raw[["wav_filename", "wav_filesize", "transcript"]] = self.csv_data[$^            ["audio_url", "transcript", "audio_length"]$^        ].swifter.apply($^            func=lambda arg: self._convert_csv_data_to_raw_data_impl(*arg),$^            axis=1,$^            raw=true,$^        )$^        self.raw.reset_index()$^$^    def _convert_csv_data_to_raw_data_impl(self, audio_url, transcript, audio_length):$^        if audio_url == "audio_url":$^            return pd.series(["wav_filename", "wav_filesize", "transcript"])$^        mp3_filename = os.path.basename(audio_url)$^        wav_relative_filename = os.path.join($^            "wav", os.path.splitext(os.path.basename(mp3_filename))[0] + ".wav"$^        )$^        wav_filesize = os.path.getsize($^            os.path.join(self.target_dir, wav_relative_filename)$^        )$^        transcript = validate_label(transcript)$^        if none == transcript:$^            transcript = ""$^        return pd.series([wav_relative_filename, wav_filesize, transcript])$^$^    def _is_valid_raw_rows(self):$^        is_valid_raw_transcripts = self._is_valid_raw_transcripts()$^        is_valid_raw_wav_frames = self._is_valid_raw_wav_frames()$^        is_valid_raw_row = [$^            (is_valid_raw_transcript & is_valid_raw_wav_frame)$^            for is_valid_raw_transcript, is_valid_raw_wav_frame in zip($^                is_valid_raw_transcripts, is_valid_raw_wav_frames$^            )$^        ]$^        series = pd.series(is_valid_raw_row)$^        return series$^$^    def _is_valid_raw_transcripts(self):$^        return pd.series([bool(transcript) for transcript in self.raw.transcript])$^$^    def _is_valid_raw_wav_frames(self):$^        transcripts = [str(transcript) for transcript in self.raw.transcript]$^        wav_filepaths = [$^            os.path.join(self.target_dir, str(wav_filename))$^            for wav_filename in self.raw.wav_filename$^        ]$^        wav_frames = [$^            int($^                subprocess.check_output($^                    ["soxi", "-s", wav_filepath], stderr=subprocess.stdout$^                )$^            )$^            for wav_filepath in wav_filepaths$^        ]$^        is_valid_raw_wav_frames = [$^            self._is_wav_frame_valid(wav_frame, transcript)$^            for wav_frame, transcript in zip(wav_frames, transcripts)$^        ]$^        return pd.series(is_valid_raw_wav_frames)$^$^    def _is_wav_frame_valid(self, wav_frame, transcript):$^        is_wav_frame_valid = true$^        if int(wav_frame / sample_rate * 1000 / 10 / 2) < len(str(transcript)):$^            is_wav_frame_valid = false$^        elif wav_frame / sample_rate > max_secs:$^            is_wav_frame_valid = false$^        return is_wav_frame_valid$^$^    def _calculate_data_set_sizes(self):$^        total_size = len(self.valid)$^        dev_size = math.floor(total_size * dev_percentage)$^        train_size = math.floor(total_size * train_percentage)$^        test_size = total_size - (train_size + dev_size)$^        return (train_size, dev_size, test_size)$^$^    def save(self):$^        datasets = ["train", "dev", "test"]$^        for dataset in datasets:$^            self._save(dataset)$^$^    def _save(self, dataset):$^        dataset_path = os.path.join(self.target_dir, dataset + ".csv")$^        dataframe = getattr(self, dataset)$^        dataframe.to_csv($^            dataset_path,$^            index=false,$^            encoding="utf-8",$^            escapechar="\\",$^            quoting=csv.quote_minimal,$^        )$^$^$^def main(args):$^    """main entry point allowing external calls$^    args:$^      args ([str]): command line parameter list$^    """$^    args = parse_args(args)$^    validate_label = get_validate_label(args)$^    setup_logging(args.loglevel)$^    _logger.info("starting gramvaani importer...")$^    _logger.info("starting loading gramvaani csv...")$^    csv = gramvaanicsv(args.csv_filename)$^    _logger.info("starting downloading gramvaani mp3's...")$^    downloader = gramvaanidownloader(csv, args.target_dir)$^    mp3_directory = downloader.download()$^    _logger.info("starting converting gramvaani mp3's to wav's...")$^    converter = gramvaaniconverter(args.target_dir, mp3_directory)$^    wav_directory = converter.convert()$^    datasets = gramvaanidatasets(args.target_dir, wav_directory, csv)$^    datasets.create()$^    datasets.save()$^    _logger.info("finished gramvaani importer...")$^$^$^main(sys.argv[1:])$^#!/usr/bin/env python$^import glob$^import os$^import tarfile$^$^import numpy as np$^import pandas$^$^from deepspeech_training.util.importers import get_importers_parser$^$^column_names = ["wav_filename", "wav_filesize", "transcript"]$^$^$^def extract(archive_path, target_dir):$^    print("extracting {} into {}...".format(archive_path, target_dir))$^    with tarfile.open(archive_path) as tar:$^        tar.extractall(target_dir)$^$^$^def preprocess_data(tgz_file, target_dir):$^    # first extract main archive and sub-archives$^    extract(tgz_file, target_dir)$^    main_folder = os.path.join(target_dir, "st-cmds-20170001_1-os")$^$^    # folder structure is now:$^    # - st-cmds-20170001_1-os/$^    #   - *.wav$^    #   - *.txt$^    #   - *.metadata$^$^    def load_set(glob_path):$^        set_files = []$^        for wav in glob.glob(glob_path):$^            wav_filename = wav$^            wav_filesize = os.path.getsize(wav)$^            txt_filename = os.path.splitext(wav_filename)[0] + ".txt"$^            with open(txt_filename, "r") as fin:$^                transcript = fin.read()$^            set_files.append((wav_filename, wav_filesize, transcript))$^        return set_files$^$^    # load all files, then deterministically split into train/dev/test sets$^    all_files = load_set(os.path.join(main_folder, "*.wav"))$^    df = pandas.dataframe(data=all_files, columns=column_names)$^    df.sort_values(by="wav_filename", inplace=true)$^$^    indices = np.arange(0, len(df))$^    np.random.seed(12345)$^    np.random.shuffle(indices)$^$^    # total corpus size: 102600 samples. 5000 samples gives us 99% confidence$^    # level with a margin of error of under 2%.$^    test_indices = indices[-5000:]$^    dev_indices = indices[-10000:-5000]$^    train_indices = indices[:-10000]$^$^    train_files = df.iloc[train_indices]$^    durations = (train_files["wav_filesize"] - 44) / 16000 / 2$^    train_files = train_files[durations <= 10.0]$^    print("trimming {} samples > 10 seconds".format((durations > 10.0).sum()))$^    dest_csv = os.path.join(target_dir, "freestmandarin_train.csv")$^    print("saving train set into {}...".format(dest_csv))$^    train_files.to_csv(dest_csv, index=false)$^$^    dev_files = df.iloc[dev_indices]$^    dest_csv = os.path.join(target_dir, "freestmandarin_dev.csv")$^    print("saving dev set into {}...".format(dest_csv))$^    dev_files.to_csv(dest_csv, index=false)$^$^    test_files = df.iloc[test_indices]$^    dest_csv = os.path.join(target_dir, "freestmandarin_test.csv")$^    print("saving test set into {}...".format(dest_csv))$^    test_files.to_csv(dest_csv, index=false)$^$^$^def main():$^    # https://www.openslr.org/38/$^    parser = get_importers_parser(description="import free st chinese mandarin corpus")$^    parser.add_argument("tgz_file", help="path to st-cmds-20170001_1-os.tar.gz")$^    parser.add_argument($^        "--target_dir",$^        default="",$^        help="target folder to extract files into and put the resulting csvs. defaults to same folder as the main archive.",$^    )$^    params = parser.parse_args()$^$^    if not params.target_dir:$^        params.target_dir = os.path.dirname(params.tgz_file)$^$^    preprocess_data(params.tgz_file, params.target_dir)$^$^$^if __name__ == "__main__":$^    main()$^#!/usr/bin/env python$^'''$^tool for building a combined sdb or csv sample-set from other sets$^use 'python3 data_set_tool.py -h' for help$^'''$^import sys$^import argparse$^import progressbar$^from pathlib import path$^$^from deepspeech_training.util.audio import ($^    audio_type_pcm,$^    audio_type_opus,$^    audio_type_wav,$^    change_audio_types,$^)$^from deepspeech_training.util.downloader import simple_bar$^from deepspeech_training.util.sample_collections import ($^    csvwriter,$^    directsdbwriter,$^    tarwriter,$^    samples_from_sources,$^)$^from deepspeech_training.util.augmentations import ($^    parse_augmentations,$^    apply_sample_augmentations,$^    sampleaugmentation$^)$^$^audio_type_lookup = {'wav': audio_type_wav, 'opus': audio_type_opus}$^$^$^def build_data_set():$^    audio_type = audio_type_lookup[cli_args.audio_type]$^    augmentations = parse_augmentations(cli_args.augment)$^    if any(not isinstance(a, sampleaugmentation) for a in augmentations):$^        print('warning: some of the specified augmentations will not get applied, as this tool only supports '$^              'overlay, codec, reverb, resample and volume.')$^    extension = path(cli_args.target).suffix.lower()$^    labeled = not cli_args.unlabeled$^    if extension == '.csv':$^        writer = csvwriter(cli_args.target, absolute_paths=cli_args.absolute_paths, labeled=labeled)$^    elif extension == '.sdb':$^        writer = directsdbwriter(cli_args.target, audio_type=audio_type, labeled=labeled)$^    elif extension == '.tar':$^        writer = tarwriter(cli_args.target, labeled=labeled, gz=false, include=cli_args.include)$^    elif extension == '.tgz' or cli_args.target.lower().endswith('.tar.gz'):$^        writer = tarwriter(cli_args.target, labeled=labeled, gz=true, include=cli_args.include)$^    else:$^        print('unknown extension of target file - has to be either .csv, .sdb, .tar, .tar.gz or .tgz')$^        sys.exit(1)$^    with writer:$^        samples = samples_from_sources(cli_args.sources, labeled=not cli_args.unlabeled)$^        num_samples = len(samples)$^        if augmentations:$^            samples = apply_sample_augmentations(samples, audio_type=audio_type_pcm, augmentations=augmentations)$^        bar = progressbar.progressbar(max_value=num_samples, widgets=simple_bar)$^        for sample in bar(change_audio_types($^                samples,$^                audio_type=audio_type,$^                bitrate=cli_args.bitrate,$^                processes=cli_args.workers)):$^            writer.add(sample)$^$^$^def handle_args():$^    parser = argparse.argumentparser($^        description='tool for building a combined sdb or csv sample-set from other sets'$^    )$^    parser.add_argument($^        'sources',$^        nargs='+',$^        help='source csv and/or sdb files - '$^        'note: for getting a correctly ordered target set, source sdbs have to have their samples '$^        'already ordered from shortest to longest.',$^    )$^    parser.add_argument($^        'target',$^        help='sdb, csv or tar(.gz) file to create'$^    )$^    parser.add_argument($^        '--audio-type',$^        default='opus',$^        choices=audio_type_lookup.keys(),$^        help='audio representation inside target sdb',$^    )$^    parser.add_argument($^        '--bitrate',$^        type=int,$^        help='bitrate for lossy compressed sdb samples like in case of --audio-type opus',$^    )$^    parser.add_argument($^        '--workers', type=int, default=none, help='number of encoding sdb workers'$^    )$^    parser.add_argument($^        '--unlabeled',$^        action='store_true',$^        help='if to build an data-set with unlabeled (audio only) samples - '$^        'typically used for building noise augmentation corpora',$^    )$^    parser.add_argument($^        '--absolute-paths',$^        action='store_true',$^        help='if to reference samples by their absolute paths when writing csv files',$^    )$^    parser.add_argument($^        '--augment',$^        action='append',$^        help='add an augmentation operation',$^    )$^    parser.add_argument($^        '--include',$^        action='append',$^        help='adds a file to the root directory of .tar(.gz) targets',$^    )$^    return parser.parse_args()$^$^$^if __name__ == '__main__':$^    cli_args = handle_args()$^    build_data_set()$^#!/usr/bin/env python$^import codecs$^import os$^import re$^import sys$^import tarfile$^import threading$^import unicodedata$^import urllib$^from glob import glob$^from multiprocessing.pool import threadpool$^from os import makedirs, path$^$^import pandas$^from bs4 import beautifulsoup$^from tensorflow.python.platform import gfile$^from deepspeech_training.util.downloader import maybe_download$^$^"""the number of jobs to run in parallel"""$^num_parallel = 8$^$^"""lambda function returns the filename of a path"""$^filename_of = lambda x: path.split(x)[1]$^$^$^class atomiccounter(object):$^    """a class that atomically increments a counter"""$^$^    def __init__(self, start_count=0):$^        """initialize the counter$^        :param start_count: the number to start counting at$^        """$^        self.__lock = threading.lock()$^        self.__count = start_count$^$^    def increment(self, amount=1):$^        """increments the counter by the given amount$^        :param amount: the amount to increment by (default 1)$^        :return:       the incremented value of the counter$^        """$^        self.__lock.acquire()$^        self.__count += amount$^        v = self.value()$^        self.__lock.release()$^        return v$^$^    def value(self):$^        """returns the current value of the counter (not atomic)"""$^        return self.__count$^$^$^def _parallel_downloader(voxforge_url, archive_dir, total, counter):$^    """generate a function to download a file based on given parameters$^    this works by currying the above given arguments into a closure$^    in the form of the following function.$^$^    :param voxforge_url: the base voxforge url$^    :param archive_dir:  the location to store the downloaded file$^    :param total:        the total number of files to download$^    :param counter:      an atomic counter to keep track of # of downloaded files$^    :return:             a function that actually downloads a file given these params$^    """$^$^    def download(d):$^        """binds voxforge_url, archive_dir, total, and counter into this scope$^        downloads the given file$^        :param d: a tuple consisting of (index, file) where index is the index$^                  of the file to download and file is the name of the file to download$^        """$^        (i, file) = d$^        download_url = voxforge_url + "/" + file$^        c = counter.increment()$^        print("downloading file {} ({}/{})...".format(i + 1, c, total))$^        maybe_download(filename_of(download_url), archive_dir, download_url)$^$^    return download$^$^$^def _parallel_extracter(data_dir, number_of_test, number_of_dev, total, counter):$^    """generate a function to extract a tar file based on given parameters$^    this works by currying the above given arguments into a closure$^    in the form of the following function.$^$^    :param data_dir:       the target directory to extract into$^    :param number_of_test: the number of files to keep as the test set$^    :param number_of_dev:  the number of files to keep as the dev set$^    :param total:          the total number of files to extract$^    :param counter:        an atomic counter to keep track of # of extracted files$^    :return:               a function that actually extracts a tar file given these params$^    """$^$^    def extract(d):$^        """binds data_dir, number_of_test, number_of_dev, total, and counter into this scope$^        extracts the given file$^        :param d: a tuple consisting of (index, file) where index is the index$^                  of the file to extract and file is the name of the file to extract$^        """$^        (i, archive) = d$^        if i < number_of_test:$^            dataset_dir = path.join(data_dir, "test")$^        elif i < number_of_test + number_of_dev:$^            dataset_dir = path.join(data_dir, "dev")$^        else:$^            dataset_dir = path.join(data_dir, "train")$^        if not gfile.exists($^            os.path.join(dataset_dir, ".".join(filename_of(archive).split(".")[:-1]))$^        ):$^            c = counter.increment()$^            print("extracting file {} ({}/{})...".format(i + 1, c, total))$^            tar = tarfile.open(archive)$^            tar.extractall(dataset_dir)$^            tar.close()$^$^    return extract$^$^$^def _download_and_preprocess_data(data_dir):$^    # conditionally download data to data_dir$^    if not path.isdir(data_dir):$^        makedirs(data_dir)$^$^    archive_dir = data_dir + "/archive"$^    if not path.isdir(archive_dir):$^        makedirs(archive_dir)$^$^    print($^        "downloading voxforge data set into {} if not already present...".format($^            archive_dir$^        )$^    )$^$^    voxforge_url = "http://www.repository.voxforge1.org/downloads/speechcorpus/trunk/audio/main/16khz_16bit"$^    html_page = urllib.request.urlopen(voxforge_url)$^    soup = beautifulsoup(html_page, "html.parser")$^$^    # list all links$^    refs = [l["href"] for l in soup.find_all("a") if ".tgz" in l["href"]]$^$^    # download files in parallel$^    print("{} files to download".format(len(refs)))$^    downloader = _parallel_downloader($^        voxforge_url, archive_dir, len(refs), atomiccounter()$^    )$^    p = threadpool(num_parallel)$^    p.map(downloader, enumerate(refs))$^$^    # conditionally extract data to dataset_dir$^    if not path.isdir(os.path.join(data_dir, "test")):$^        makedirs(os.path.join(data_dir, "test"))$^    if not path.isdir(os.path.join(data_dir, "dev")):$^        makedirs(os.path.join(data_dir, "dev"))$^    if not path.isdir(os.path.join(data_dir, "train")):$^        makedirs(os.path.join(data_dir, "train"))$^$^    tarfiles = glob(os.path.join(archive_dir, "*.tgz"))$^    number_of_files = len(tarfiles)$^    number_of_test = number_of_files // 100$^    number_of_dev = number_of_files // 100$^$^    # extract tars in parallel$^    print($^        "extracting voxforge data set into {} if not already present...".format($^            data_dir$^        )$^    )$^    extracter = _parallel_extracter($^        data_dir, number_of_test, number_of_dev, len(tarfiles), atomiccounter()$^    )$^    p.map(extracter, enumerate(tarfiles))$^$^    # generate data set$^    print("generating voxforge data set into {}".format(data_dir))$^    test_files = _generate_dataset(data_dir, "test")$^    dev_files = _generate_dataset(data_dir, "dev")$^    train_files = _generate_dataset(data_dir, "train")$^$^    # write sets to disk as csv files$^    train_files.to_csv(os.path.join(data_dir, "voxforge-train.csv"), index=false)$^    dev_files.to_csv(os.path.join(data_dir, "voxforge-dev.csv"), index=false)$^    test_files.to_csv(os.path.join(data_dir, "voxforge-test.csv"), index=false)$^$^$^def _generate_dataset(data_dir, data_set):$^    extracted_dir = path.join(data_dir, data_set)$^    files = []$^    for promts_file in glob(os.path.join(extracted_dir + "/*/etc/", "prompts")):$^        if path.isdir(os.path.join(promts_file[:-11], "wav")):$^            with codecs.open(promts_file, "r", "utf-8") as f:$^                for line in f:$^                    id = line.split(" ")[0].split("/")[-1]$^                    sentence = " ".join(line.split(" ")[1:])$^                    sentence = re.sub("[^a-z']", " ", sentence.strip().lower())$^                    transcript = ""$^                    for token in sentence.split(" "):$^                        word = token.strip()$^                        if word != "" and word != " ":$^                            transcript += word + " "$^                    transcript = ($^                        unicodedata.normalize("nfkd", transcript.strip())$^                        .encode("ascii", "ignore")$^                        .decode("ascii", "ignore")$^                    )$^                    wav_file = path.join(promts_file[:-11], "wav/" + id + ".wav")$^                    if gfile.exists(wav_file):$^                        wav_filesize = path.getsize(wav_file)$^                        # remove audios that are shorter than 0.5s and longer than 20s.$^                        # remove audios that are too short for transcript.$^                        if ($^                            (wav_filesize / 32000) > 0.5$^                            and (wav_filesize / 32000) < 20$^                            and transcript != ""$^                            and wav_filesize / len(transcript) > 1400$^                        ):$^                            files.append($^                                (os.path.abspath(wav_file), wav_filesize, transcript)$^                            )$^$^    return pandas.dataframe($^        data=files, columns=["wav_filename", "wav_filesize", "transcript"]$^    )$^$^$^if __name__ == "__main__":$^    _download_and_preprocess_data(sys.argv[1])$^#!/usr/bin/env python$^import glob$^import json$^import os$^import tarfile$^$^import numpy as np$^import pandas$^$^from deepspeech_training.util.importers import get_importers_parser$^$^column_names = ["wav_filename", "wav_filesize", "transcript"]$^$^$^def extract(archive_path, target_dir):$^    print("extracting {} into {}...".format(archive_path, target_dir))$^    with tarfile.open(archive_path) as tar:$^        tar.extractall(target_dir)$^$^$^def preprocess_data(tgz_file, target_dir):$^    # first extract main archive and sub-archives$^    extract(tgz_file, target_dir)$^    main_folder = os.path.join(target_dir, "primewords_md_2018_set1")$^$^    # folder structure is now:$^    # - primewords_md_2018_set1/$^    #   - audio_files/$^    #     - [0-f]/[00-0f]/*.wav$^    #   - set1_transcript.json$^$^    transcripts_path = os.path.join(main_folder, "set1_transcript.json")$^    with open(transcripts_path) as fin:$^        transcripts = json.load(fin)$^$^    transcripts = {entry["file"]: entry["text"] for entry in transcripts}$^$^    def load_set(glob_path):$^        set_files = []$^        for wav in glob.glob(glob_path):$^            try:$^                wav_filename = wav$^                wav_filesize = os.path.getsize(wav)$^                transcript_key = os.path.basename(wav)$^                transcript = transcripts[transcript_key]$^                set_files.append((wav_filename, wav_filesize, transcript))$^            except keyerror:$^                print("warning: missing transcript for wav file {}.".format(wav))$^        return set_files$^$^    # load all files, then deterministically split into train/dev/test sets$^    all_files = load_set(os.path.join(main_folder, "audio_files", "*", "*", "*.wav"))$^    df = pandas.dataframe(data=all_files, columns=column_names)$^    df.sort_values(by="wav_filename", inplace=true)$^$^    indices = np.arange(0, len(df))$^    np.random.seed(12345)$^    np.random.shuffle(indices)$^$^    # total corpus size: 50287 samples. 5000 samples gives us 99% confidence$^    # level with a margin of error of under 2%.$^    test_indices = indices[-5000:]$^    dev_indices = indices[-10000:-5000]$^    train_indices = indices[:-10000]$^$^    train_files = df.iloc[train_indices]$^    durations = (train_files["wav_filesize"] - 44) / 16000 / 2$^    train_files = train_files[durations <= 15.0]$^    print("trimming {} samples > 15 seconds".format((durations > 15.0).sum()))$^    dest_csv = os.path.join(target_dir, "primewords_train.csv")$^    print("saving train set into {}...".format(dest_csv))$^    train_files.to_csv(dest_csv, index=false)$^$^    dev_files = df.iloc[dev_indices]$^    dest_csv = os.path.join(target_dir, "primewords_dev.csv")$^    print("saving dev set into {}...".format(dest_csv))$^    dev_files.to_csv(dest_csv, index=false)$^$^    test_files = df.iloc[test_indices]$^    dest_csv = os.path.join(target_dir, "primewords_test.csv")$^    print("saving test set into {}...".format(dest_csv))$^    test_files.to_csv(dest_csv, index=false)$^$^$^def main():$^    # https://www.openslr.org/47/$^    parser = get_importers_parser(description="import primewords chinese corpus set 1")$^    parser.add_argument("tgz_file", help="path to primewords_md_2018_set1.tar.gz")$^    parser.add_argument($^        "--target_dir",$^        default="",$^        help="target folder to extract files into and put the resulting csvs. defaults to same folder as the main archive.",$^    )$^    params = parser.parse_args()$^$^    if not params.target_dir:$^        params.target_dir = os.path.dirname(params.tgz_file)$^$^    preprocess_data(params.tgz_file, params.target_dir)$^$^$^if __name__ == "__main__":$^    main()$^#!/usr/bin/env python$^import codecs$^import fnmatch$^import os$^import subprocess$^import sys$^import tarfile$^import unicodedata$^$^import pandas$^import progressbar$^from sox import transformer$^from tensorflow.python.platform import gfile$^$^from deepspeech_training.util.downloader import maybe_download$^$^sample_rate = 16000$^$^$^def _download_and_preprocess_data(data_dir):$^    # conditionally download data to data_dir$^    print($^        "downloading librivox data set (55gb) into {} if not already present...".format($^            data_dir$^        )$^    )$^    with progressbar.progressbar(max_value=7, widget=progressbar.adaptiveeta) as bar:$^        train_clean_100_url = ($^            "http://www.openslr.org/resources/12/train-clean-100.tar.gz"$^        )$^        train_clean_360_url = ($^            "http://www.openslr.org/resources/12/train-clean-360.tar.gz"$^        )$^        train_other_500_url = ($^            "http://www.openslr.org/resources/12/train-other-500.tar.gz"$^        )$^$^        dev_clean_url = "http://www.openslr.org/resources/12/dev-clean.tar.gz"$^        dev_other_url = "http://www.openslr.org/resources/12/dev-other.tar.gz"$^$^        test_clean_url = "http://www.openslr.org/resources/12/test-clean.tar.gz"$^        test_other_url = "http://www.openslr.org/resources/12/test-other.tar.gz"$^$^        def filename_of(x):$^            return os.path.split(x)[1]$^$^        train_clean_100 = maybe_download($^            filename_of(train_clean_100_url), data_dir, train_clean_100_url$^        )$^        bar.update(0)$^        train_clean_360 = maybe_download($^            filename_of(train_clean_360_url), data_dir, train_clean_360_url$^        )$^        bar.update(1)$^        train_other_500 = maybe_download($^            filename_of(train_other_500_url), data_dir, train_other_500_url$^        )$^        bar.update(2)$^$^        dev_clean = maybe_download(filename_of(dev_clean_url), data_dir, dev_clean_url)$^        bar.update(3)$^        dev_other = maybe_download(filename_of(dev_other_url), data_dir, dev_other_url)$^        bar.update(4)$^$^        test_clean = maybe_download($^            filename_of(test_clean_url), data_dir, test_clean_url$^        )$^        bar.update(5)$^        test_other = maybe_download($^            filename_of(test_other_url), data_dir, test_other_url$^        )$^        bar.update(6)$^$^    # conditionally extract librispeech data$^    # we extract each archive into data_dir, but test for existence in$^    # data_dir/librispeech because the archives share that root.$^    print("extracting librivox data if not already extracted...")$^    with progressbar.progressbar(max_value=7, widget=progressbar.adaptiveeta) as bar:$^        librivox_dir = "librispeech"$^        work_dir = os.path.join(data_dir, librivox_dir)$^$^        _maybe_extract($^            data_dir, os.path.join(librivox_dir, "train-clean-100"), train_clean_100$^        )$^        bar.update(0)$^        _maybe_extract($^            data_dir, os.path.join(librivox_dir, "train-clean-360"), train_clean_360$^        )$^        bar.update(1)$^        _maybe_extract($^            data_dir, os.path.join(librivox_dir, "train-other-500"), train_other_500$^        )$^        bar.update(2)$^$^        _maybe_extract(data_dir, os.path.join(librivox_dir, "dev-clean"), dev_clean)$^        bar.update(3)$^        _maybe_extract(data_dir, os.path.join(librivox_dir, "dev-other"), dev_other)$^        bar.update(4)$^$^        _maybe_extract(data_dir, os.path.join(librivox_dir, "test-clean"), test_clean)$^        bar.update(5)$^        _maybe_extract(data_dir, os.path.join(librivox_dir, "test-other"), test_other)$^        bar.update(6)$^$^    # convert flac data to wav, from:$^    #  data_dir/librispeech/split/1/2/1-2-3.flac$^    # to:$^    #  data_dir/librispeech/split-wav/1-2-3.wav$^    #$^    # and split librispeech transcriptions, from:$^    #  data_dir/librispeech/split/1/2/1-2.trans.txt$^    # to:$^    #  data_dir/librispeech/split-wav/1-2-0.txt$^    #  data_dir/librispeech/split-wav/1-2-1.txt$^    #  data_dir/librispeech/split-wav/1-2-2.txt$^    #  ...$^    print("converting flac to wav and splitting transcriptions...")$^    with progressbar.progressbar(max_value=7, widget=progressbar.adaptiveeta) as bar:$^        train_100 = _convert_audio_and_split_sentences($^            work_dir, "train-clean-100", "train-clean-100-wav"$^        )$^        bar.update(0)$^        train_360 = _convert_audio_and_split_sentences($^            work_dir, "train-clean-360", "train-clean-360-wav"$^        )$^        bar.update(1)$^        train_500 = _convert_audio_and_split_sentences($^            work_dir, "train-other-500", "train-other-500-wav"$^        )$^        bar.update(2)$^$^        dev_clean = _convert_audio_and_split_sentences($^            work_dir, "dev-clean", "dev-clean-wav"$^        )$^        bar.update(3)$^        dev_other = _convert_audio_and_split_sentences($^            work_dir, "dev-other", "dev-other-wav"$^        )$^        bar.update(4)$^$^        test_clean = _convert_audio_and_split_sentences($^            work_dir, "test-clean", "test-clean-wav"$^        )$^        bar.update(5)$^        test_other = _convert_audio_and_split_sentences($^            work_dir, "test-other", "test-other-wav"$^        )$^        bar.update(6)$^$^    # write sets to disk as csv files$^    train_100.to_csv($^        os.path.join(data_dir, "librivox-train-clean-100.csv"), index=false$^    )$^    train_360.to_csv($^        os.path.join(data_dir, "librivox-train-clean-360.csv"), index=false$^    )$^    train_500.to_csv($^        os.path.join(data_dir, "librivox-train-other-500.csv"), index=false$^    )$^$^    dev_clean.to_csv(os.path.join(data_dir, "librivox-dev-clean.csv"), index=false)$^    dev_other.to_csv(os.path.join(data_dir, "librivox-dev-other.csv"), index=false)$^$^    test_clean.to_csv(os.path.join(data_dir, "librivox-test-clean.csv"), index=false)$^    test_other.to_csv(os.path.join(data_dir, "librivox-test-other.csv"), index=false)$^$^$^def _maybe_extract(data_dir, extracted_data, archive):$^    # if data_dir/extracted_data does not exist, extract archive in data_dir$^    if not gfile.exists(os.path.join(data_dir, extracted_data)):$^        tar = tarfile.open(archive)$^        tar.extractall(data_dir)$^        tar.close()$^$^$^def _convert_audio_and_split_sentences(extracted_dir, data_set, dest_dir):$^    source_dir = os.path.join(extracted_dir, data_set)$^    target_dir = os.path.join(extracted_dir, dest_dir)$^$^    if not os.path.exists(target_dir):$^        os.makedirs(target_dir)$^$^    # loop over transcription files and split each one$^    #$^    # the format for each file 1-2.trans.txt is:$^    #  1-2-0 transcription of 1-2-0.flac$^    #  1-2-1 transcription of 1-2-1.flac$^    #  ...$^    #$^    # each file is then split into several files:$^    #  1-2-0.txt (contains transcription of 1-2-0.flac)$^    #  1-2-1.txt (contains transcription of 1-2-1.flac)$^    #  ...$^    #$^    # we also convert the corresponding flacs to wav in the same pass$^    files = []$^    for root, dirnames, filenames in os.walk(source_dir):$^        for filename in fnmatch.filter(filenames, "*.trans.txt"):$^            trans_filename = os.path.join(root, filename)$^            with codecs.open(trans_filename, "r", "utf-8") as fin:$^                for line in fin:$^                    # parse each segment line$^                    first_space = line.find(" ")$^                    seqid, transcript = line[:first_space], line[first_space + 1 :]$^$^                    # we need to do the encode-decode dance here because encode$^                    # returns a bytes() object on python 3, and text_to_char_array$^                    # expects a string.$^                    transcript = ($^                        unicodedata.normalize("nfkd", transcript)$^                        .encode("ascii", "ignore")$^                        .decode("ascii", "ignore")$^                    )$^$^                    transcript = transcript.lower().strip()$^$^                    # convert corresponding flac to a wav$^                    flac_file = os.path.join(root, seqid + ".flac")$^                    wav_file = os.path.join(target_dir, seqid + ".wav")$^                    if not os.path.exists(wav_file):$^                        tfm = transformer()$^                        tfm.set_output_format(rate=sample_rate)$^                        tfm.build(flac_file, wav_file)$^                    wav_filesize = os.path.getsize(wav_file)$^$^                    files.append((os.path.abspath(wav_file), wav_filesize, transcript))$^$^    return pandas.dataframe($^        data=files, columns=["wav_filename", "wav_filesize", "transcript"]$^    )$^$^$^if __name__ == "__main__":$^    _download_and_preprocess_data(sys.argv[1])$^#!/usr/bin/env python$^"""$^importer for dataset published from centre de conférence pierre mendès-france$^ministère de l'économie, des finances et de la relance$^"""$^$^import csv$^import sys$^import os$^import progressbar$^import subprocess$^import zipfile$^from glob import glob$^from multiprocessing import pool$^$^import hashlib$^import decimal$^import math$^import unicodedata$^import re$^import sox$^import xml.etree.elementtree as et$^$^try:$^    from num2words import num2words$^except importerror as ex:$^    print("pip install num2words")$^    sys.exit(1)$^$^import requests$^import json$^$^from deepspeech_training.util.downloader import simple_bar, maybe_download$^from deepspeech_training.util.helpers import secs_to_hours$^from deepspeech_training.util.importers import ($^    get_counter,$^    get_importers_parser,$^    get_imported_samples,$^    get_validate_label,$^    print_import_report,$^)$^from ds_ctcdecoder import alphabet$^$^fieldnames = ["wav_filename", "wav_filesize", "transcript"]$^sample_rate = 16000$^channels = 1$^bit_depth = 16$^max_secs = 10$^min_secs = 0.85$^$^dataset_release_csv = "https://data.economie.gouv.fr/explore/dataset/transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020/download/?format=csv&timezone=europe/berlin&lang=fr&use_labels_for_header=true&csv_separator=%3b"$^dataset_release_sha = [$^    ("863d39a06a388c6491c6ff2f6450b151f38f1b57", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.001"),$^    ("2f3a0305aa04c61220bb00b5a4e553e45dbf12e1", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.002"),$^    ("5e55e9f1f844097349188ac875947e5a3d7fe9f1", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.003"),$^    ("8bf54842cf07948ca5915e27a8bd5fa5139c06ae", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.004"),$^    ("c8963504aadc015ac48f9af80058a0bb3440b94f", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.005"),$^    ("d95e225e908621d83ce4e9795fd108d9d310e244", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.006"),$^    ("de6ed9c2b0ee80ca879aae8ba7923cc93217d811", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.007"),$^    ("234283c47dacfcd4450d836c52c25f3e807fc5f2", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.008"),$^    ("4e6b67a688639bb72f8cd81782eaba604a8d32a6", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.009"),$^    ("4165a51389777c8af8e6253d87bdacb877e8b3b0", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.010"),$^    ("34322e7009780d97ef5bd02bf2f2c7a31f00baff", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.011"),$^    ("48c5be3b2ca9d6108d525da6a03e91d93a95dbac", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.012"),$^    ("87573172f506a189c2ebc633856fe11a2e9cd213", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.013"),$^    ("6ab2c9e508e9278d5129f023e018725c4a7c69e8", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.014"),$^    ("4f84df831ef46dce5d3ab3e21817687a2d8c12d0", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.015"),$^    ("e69bfb079885c299cb81080ef88b1b8b57158aa6", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.016"),$^    ("5f764ba788ee273981cf211b242c29b49ca22c5e", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.017"),$^    ("b6aa81a959525363223494830c1e7307d4c4bae6", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.018"),$^    ("91ddcf43c7bf113a6f2528b857c7ec22a50a148a", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.019"),$^    ("fa1b29273dd77b9a7494983a2f9ae52654b931d7", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.020"),$^    ("1113aef4f5e2be2f7fbf2d54b6c710c1c0e7135f", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.021"),$^    ("ce6420d5d0b6b5135ba559f83e1a82d4d615c470", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.022"),$^    ("d0976ed292ac24fcf1590d1ea195077c74b05471", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.023"),$^    ("ec746cd6af066f62d9bf8d3b2f89174783ff4e3c", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.024"),$^    ("570d9e1e84178e32fd867171d4b3aaecda1fd4fb", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.025"),$^    ("c29ccc7467a75b2cae3d7f2e9fbbb2ab276cb8ac", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.026"),$^    ("08406a51146d88e208704ce058c060a1e44efa50", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.027"),$^    ("199aedad733a78ea1e7d47def9c71c6fd5795e02", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.028"),$^    ("db856a068f92fb4f01f410bba42c7271de0f231a", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.029"),$^    ("e3c0135f16c6c9d25a09dcb4f99a685438a84740", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.030"),$^    ("e51b8bb9c0ae4339f98b4f21e6d29b825109f0ac", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.031"),$^    ("be5e80cbc49b59b31ae33c30576ef0e1a162d84e", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.032"),$^    ("501df58e3ff55fcfd75b93dab57566dc536948b8", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.033"),$^    ("1a114875811a8cdcb8d85a9f6dbee78be3e05131", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.034"),$^    ("465d824e7ee46448369182c0c28646d155a2249b", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.035"),$^    ("37f341b1b266d143eb73138c31cfff3201b9d619", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.036"),$^    ("9e7d8255987a8a77a90e0d4b55c8fd38b9fb5694", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.037"),$^    ("54886755630cb080a53098cb1b6c951c6714a143", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.038"),$^    ("4b7cbb0154697be795034f7a49712e882a97197a", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.039"),$^    ("c8e1e565a0e7a1f6ff1dbfcefe677aa74a41d2f2", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip.040"),$^]$^$^def _download_and_preprocess_data(csv_url, target_dir):$^    dataset_sources = os.path.join(target_dir, "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020", "data.txt")$^    if os.path.exists(dataset_sources):$^        return dataset_sources$^$^    # making path absolute$^    target_dir = os.path.abspath(target_dir)$^    csv_ref = requests.get(csv_url).text.split('\r\n')[1:-1]$^    for part in csv_ref:$^        part_filename = requests.head(part).headers.get("content-disposition").split(" ")[1].split("=")[1].replace('"', "")$^        if not os.path.exists(os.path.join(target_dir, part_filename)):$^            part_path = maybe_download(part_filename, target_dir, part)$^$^    def _big_sha1(fname):$^        s = hashlib.sha1()$^        buffer_size = 65536$^        with open(fname, "rb") as f:$^            while true:$^                data = f.read(buffer_size)$^                if not data:$^                    break$^                s.update(data)$^        return s.hexdigest()$^$^    for (sha1, filename) in dataset_release_sha:$^        print("checking {} sha1:".format(filename))$^        csum = _big_sha1(os.path.join(target_dir, filename))$^        if csum == sha1:$^            print("\t{}: ok {}".format(filename, sha1))$^        else:$^            print("\t{}: error: expected {}, computed {}".format(filename, sha1, csum))$^        assert csum == sha1$^$^    # conditionally extract data$^    _maybe_extract(target_dir, "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020_2.zip", "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020.zip")$^$^    # produce source text for extraction / conversion$^    return _maybe_create_sources(os.path.join(target_dir, "transcriptionsxml_audiomp3_mefr_ccpmf_2012-2020"))$^$^def _maybe_extract(target_dir, extracted_data, archive, final):$^    # if target_dir/extracted_data does not exist, extract archive in target_dir$^    extracted_path = os.path.join(target_dir, extracted_data)$^    archive_path = os.path.join(target_dir, archive)$^    final_archive = os.path.join(extracted_path, final)$^$^    if not os.path.exists(extracted_path):$^        if not os.path.exists(archive_path):$^            print('no archive "%s" - building ...' % archive_path)$^            all_zip_parts = glob(archive_path + ".*")$^            all_zip_parts.sort()$^            cmdline = "cat {} > {}".format(" ".join(all_zip_parts), archive_path)$^            print('building with "%s"' % cmdline)$^            subprocess.check_call(cmdline, shell=true, cwd=target_dir)$^            assert os.path.exists(archive_path)$^$^        print('no directory "%s" - extracting archive %s ...' % (extracted_path, archive_path))$^        with zipfile.zipfile(archive_path) as zip_f:$^            zip_f.extractall(extracted_path)$^$^        with zipfile.zipfile(final_archive) as zip_f:$^            zip_f.extractall(target_dir)$^    else:$^        print('found directory "%s" - not extracting it from archive.' % extracted_path)$^$^def _maybe_create_sources(dir):$^    dataset_sources = os.path.join(dir, "data.txt")$^    mp3 = glob(os.path.join(dir, "**", "*.mp3"))$^    xml = glob(os.path.join(dir, "**", "*.xml"))$^$^    mp3_xml_scores = []$^    mp3_xml_fin = {}$^$^    for f_mp3 in mp3:$^        for f_xml in xml:$^            b_mp3 = os.path.splitext(os.path.basename(f_mp3))[0]$^            b_xml = os.path.splitext(os.path.basename(f_xml))[0]$^            a_mp3 = b_mp3.split('_')$^            a_xml = b_xml.split('_')$^            score = 0$^            date_mp3 = a_mp3[0]$^            date_xml = a_xml[0]$^$^            if date_mp3 != date_xml:$^                continue$^$^            for i in range(min(len(a_mp3), len(a_xml))):$^                if (a_mp3[i] == a_xml[i]):$^                    score += 1$^$^            if score >= 1:$^                mp3_xml_scores.append((f_mp3, f_xml, score))$^$^    # sort by score$^    mp3_xml_scores.sort(key=lambda x: x[2], reverse=true)$^    for s_mp3, s_xml, score in mp3_xml_scores:$^        #print(s_mp3, s_xml, score)$^        if score not in mp3_xml_fin:$^            mp3_xml_fin[score] = {}$^$^        if s_mp3 not in mp3_xml_fin[score]:$^            try:$^                mp3.index(s_mp3)$^                mp3.remove(s_mp3)$^                mp3_xml_fin[score][s_mp3] = s_xml$^            except valueerror as ex:$^                pass$^        else:$^            print("here:", mp3_xml_fin[score][s_mp3], s_xml, file=sys.stderr)$^$^    with open(dataset_sources, "w") as ds:$^        for score in mp3_xml_fin:$^            for mp3 in mp3_xml_fin[score]:$^                xml = mp3_xml_fin[score][mp3]$^                if os.path.getsize(mp3) > 0 and os.path.getsize(xml) > 0:$^                    mp3 = os.path.relpath(mp3, dir)$^                    xml = os.path.relpath(xml, dir)$^                    ds.write('{},{},{:0.2e}\n'.format(xml, mp3, 2.5e-4))$^                else:$^                    print("empty file {} or {}".format(mp3, xml), file=sys.stderr)$^$^    print("missing xml pairs:", mp3, file=sys.stderr)$^    return dataset_sources$^$^def maybe_normalize_for_digits(label):$^    # first, try to identify numbers like "50 000", "260 000"$^    if " " in label:$^        if any(s.isdigit() for s in label):$^            thousands = re.compile(r"(\d{1,3}(?:\s*\d{3})*(?:,\d+)?)")$^            maybe_thousands = thousands.findall(label)$^            if len(maybe_thousands) > 0:$^                while true:$^                    (label, r) = re.subn(r"(\d)\s(\d{3})", "\\1\\2", label)$^                    if r == 0:$^                        break$^$^    # this might be a time or duration in the form "hh:mm" or "hh:mm:ss"$^    if ":" in label:$^        for s in label.split(" "):$^            if any(i.isdigit() for i in s):$^                date_or_time = re.compile(r"(\d{1,2}):(\d{2}):?(\d{2})?")$^                maybe_date_or_time = date_or_time.findall(s)$^                if len(maybe_date_or_time) > 0:$^                    maybe_hours   = maybe_date_or_time[0][0]$^                    maybe_minutes = maybe_date_or_time[0][1]$^                    maybe_seconds = maybe_date_or_time[0][2]$^                    if len(maybe_seconds) > 0:$^                        label = label.replace("{}:{}:{}".format(maybe_hours, maybe_minutes, maybe_seconds), "{} heures {} minutes et {} secondes".format(maybe_hours, maybe_minutes, maybe_seconds))$^                    else:$^                        label = label.replace("{}:{}".format(maybe_hours, maybe_minutes), "{} heures et {} minutes".format(maybe_hours, maybe_minutes))$^$^    new_label = []$^    # pylint: disable=too-many-nested-blocks$^    for s in label.split(" "):$^        if any(i.isdigit() for i in s):$^            s = s.replace(",", ".") # num2words requires "." for floats$^            s = s.replace("\"", "")  # clean some data, num2words would choke on 1959"$^$^            last_c = s[-1]$^            if not last_c.isdigit(): # num2words will choke on "0.6.", "24 ?"$^                s = s[:-1]$^$^            if any(i.isalpha() for i in s): # so we have any(isdigit()) **and** any(sialpha), like "3d"$^                ns = []$^                for c in s:$^                    nc = c$^                    if c.isdigit(): # convert "3" to "trois-"$^                        try:$^                            nc = num2words(c, lang="fr") + "-"$^                        except decimal.invalidoperation as ex:$^                            print("decimal.invalidoperation: '{}'".format(s))$^                            raise ex$^                    ns.append(nc)$^                s = "".join(s)$^            else:$^                try:$^                    s = num2words(s, lang="fr")$^                except decimal.invalidoperation as ex:$^                    print("decimal.invalidoperation: '{}'".format(s))$^                    raise ex$^        new_label.append(s)$^    return " ".join(new_label)$^$^def maybe_normalize_for_specials_chars(label):$^    label = label.replace("%", "pourcents")$^    label = label.replace("/", ", ") # clean intervals like 2019/2022 to "2019 2022"$^    label = label.replace("-", ", ") # clean intervals like 70-80 to "70 80"$^    label = label.replace("+", " plus ") # clean + and make it speakable$^    label = label.replace("€", " euros ") # clean euro symbol and make it speakable$^    label = label.replace("., ", ", ") # clean some strange "4.0., " (20181017_innovation.xml)$^    label = label.replace("°", " degré ") # clean some strange "°5" (20181210_etatsgeneraux-1000_fre_750_und.xml)$^    label = label.replace("...", ".") # remove ellipsis$^    label = label.replace("..", ".") # remove broken ellipsis$^    label = label.replace("m²", "mètre-carrés") # 20150616_defi_climat_3_wmv_0_fre_minefi.xml$^    label = label.replace("[end]", "") # broken tag in 20150123_entretiens_tresor_pgm_wmv_0_fre_minefi.xml$^    label = label.replace(u'\xb8c', " ç") # strange cedilla in 20150417_printemps_economie_2_wmv_0_fre_minefi.xml$^    label = label.replace("c0²", "co 2") # 20121016_syteme_sante_copie_wmv_0_fre_minefi.xml$^    return label$^$^def maybe_normalize_for_anglicisms(label):$^    label = label.replace("b2b", "b to b")$^    label = label.replace("b2c", "b to c")$^    label = label.replace("#", "hashtag ")$^    label = label.replace("@", "at ")$^    return label$^$^def maybe_normalize(label):$^    label = maybe_normalize_for_specials_chars(label)$^    label = maybe_normalize_for_anglicisms(label)$^    label = maybe_normalize_for_digits(label)$^    return label$^$^def one_sample(sample):$^    file_size = -1$^    frames = 0$^$^    audio_source = sample[0]$^    target_dir = sample[1]$^    dataset_basename = sample[2]$^$^    start_time = sample[3]$^    duration = sample[4]$^    label = label_filter_fun(sample[5])$^    sample_id = sample[6]$^$^    _wav_filename = os.path.basename(audio_source.replace(".wav", "_{:06}.wav".format(sample_id)))$^    wav_fullname = os.path.join(target_dir, dataset_basename, _wav_filename)$^$^    if not os.path.exists(wav_fullname):$^        subprocess.check_output(["ffmpeg", "-i", audio_source, "-ss", str(start_time), "-t", str(duration), "-c", "copy", wav_fullname], stdin=subprocess.devnull, stderr=subprocess.stdout)$^$^    file_size = os.path.getsize(wav_fullname)$^    frames = int(subprocess.check_output(["soxi", "-s", wav_fullname], stderr=subprocess.stdout))$^$^    _counter = get_counter()$^    _rows = []$^$^    if file_size == -1:$^        # excluding samples that failed upon conversion$^        _counter["failed"] += 1$^    elif label is none:$^        # excluding samples that failed on label validation$^        _counter["invalid_label"] += 1$^    elif int(frames/sample_rate*1000/10/2) < len(str(label)):$^        # excluding samples that are too short to fit the transcript$^        _counter["too_short"] += 1$^    elif frames/sample_rate < min_secs:$^        # excluding samples that are too short$^        _counter["too_short"] += 1$^    elif frames/sample_rate > max_secs:$^        # excluding very long samples to keep a reasonable batch-size$^        _counter["too_long"] += 1$^    else:$^        # this one is good - keep it for the target csv$^        _rows.append((os.path.join(dataset_basename, _wav_filename), file_size, label))$^        _counter["imported_time"] += frames$^    _counter["all"] += 1$^    _counter["total_time"] += frames$^$^    return (_counter, _rows)$^$^def _maybe_import_data(xml_file, audio_source, target_dir, rel_tol=1e-1):$^    dataset_basename = os.path.splitext(os.path.split(xml_file)[1])[0]$^    wav_root = os.path.join(target_dir, dataset_basename)$^    if not os.path.exists(wav_root):$^        os.makedirs(wav_root)$^$^    source_frames = int(subprocess.check_output(["soxi", "-s", audio_source], stderr=subprocess.stdout))$^    print("source audio length: %s" % secs_to_hours(source_frames / sample_rate))$^$^    # get audiofile path and transcript for each sentence in tsv$^    samples = []$^    tree = et.parse(xml_file)$^    root = tree.getroot()$^    seq_id        = 0$^    this_time     = 0.0$^    this_duration = 0.0$^    prev_time     = 0.0$^    prev_duration = 0.0$^    this_text     = ""$^    for child in root:$^        if child.tag == "row":$^            cur_time     = float(child.attrib["timestamp"])$^            cur_duration = float(child.attrib["timedur"])$^            cur_text     = child.text$^$^            if this_time == 0.0:$^                this_time = cur_time$^$^            delta    = cur_time - (prev_time + prev_duration)$^            # rel_tol value is made from trial/error to try and compromise between:$^            # - cutting enough to skip missing words$^            # - not too short, not too long sentences$^            is_close = math.isclose(cur_time, this_time + this_duration, rel_tol=rel_tol)$^            is_short = ((this_duration + cur_duration + delta) < max_secs)$^$^            # when the previous element is close enough **and** this does not$^            # go over max_secs, we append content$^            if (is_close and is_short):$^                this_duration += cur_duration + delta$^                this_text     += cur_text$^            else:$^                samples.append((audio_source, target_dir, dataset_basename, this_time, this_duration, this_text, seq_id))$^$^                this_time     = cur_time$^                this_duration = cur_duration$^                this_text     = cur_text$^$^                seq_id += 1$^$^            prev_time     = cur_time$^            prev_duration = cur_duration$^$^    # keep track of how many samples are good vs. problematic$^    _counter = get_counter()$^    num_samples = len(samples)$^    _rows = []$^$^    print("processing xml data: {}".format(xml_file))$^    pool = pool()$^    bar = progressbar.progressbar(max_value=num_samples, widgets=simple_bar)$^    for i, processed in enumerate(pool.imap_unordered(one_sample, samples), start=1):$^        _counter += processed[0]$^        _rows += processed[1]$^        bar.update(i)$^    bar.update(num_samples)$^    pool.close()$^    pool.join()$^$^    imported_samples = get_imported_samples(_counter)$^    assert _counter["all"] == num_samples$^    assert len(_rows) == imported_samples$^$^    print_import_report(_counter, sample_rate, max_secs)$^    print("import efficiency: %.1f%%" % ((_counter["total_time"] / source_frames)*100))$^    print("")$^$^    return _counter, _rows$^$^def _maybe_convert_wav(mp3_filename, _wav_filename):$^    if not os.path.exists(_wav_filename):$^        print("converting {} to wav file: {}".format(mp3_filename, _wav_filename))$^        transformer = sox.transformer()$^        transformer.convert(samplerate=sample_rate, n_channels=channels, bitdepth=bit_depth)$^        try:$^            transformer.build(mp3_filename, _wav_filename)$^        except sox.core.soxerror:$^            pass$^$^def write_general_csv(target_dir, _rows, _counter):$^    target_csv_template = os.path.join(target_dir, "ccpmf_{}.csv")$^    with open(target_csv_template.format("train"), "w") as train_csv_file:  # 80%$^        with open(target_csv_template.format("dev"), "w") as dev_csv_file:  # 10%$^            with open(target_csv_template.format("test"), "w") as test_csv_file:  # 10%$^                train_writer = csv.dictwriter(train_csv_file, fieldnames=fieldnames)$^                train_writer.writeheader()$^                dev_writer = csv.dictwriter(dev_csv_file, fieldnames=fieldnames)$^                dev_writer.writeheader()$^                test_writer = csv.dictwriter(test_csv_file, fieldnames=fieldnames)$^                test_writer.writeheader()$^$^                bar = progressbar.progressbar(max_value=len(_rows), widgets=simple_bar)$^                for i, item in enumerate(bar(_rows)):$^                    i_mod = i % 10$^                    if i_mod == 0:$^                        writer = test_writer$^                    elif i_mod == 1:$^                        writer = dev_writer$^                    else:$^                        writer = train_writer$^                    writer.writerow({"wav_filename": item[0], "wav_filesize": item[1], "transcript": item[2]})$^$^    print("")$^    print("~~~~ final statistics ~~~~")$^    print_import_report(_counter, sample_rate, max_secs)$^    print("~~~~ (final statistics) ~~~~")$^    print("")$^$^if __name__ == "__main__":$^    parser = get_importers_parser(description="import xml from conference centre for economics, france")$^    parser.add_argument("target_dir", help="destination directory")$^    parser.add_argument("--filter_alphabet", help="exclude samples with characters not in provided alphabet")$^    parser.add_argument("--normalize", action="store_true", help="converts diacritic characters to their base ones")$^$^    params = parser.parse_args()$^    validate_label = get_validate_label(params)$^    alphabet = alphabet(params.filter_alphabet) if params.filter_alphabet else none$^$^    def label_filter_fun(label):$^        if params.normalize:$^            label = unicodedata.normalize("nfkd", label.strip()) \$^                .encode("ascii", "ignore") \$^                .decode("ascii", "ignore")$^        label = maybe_normalize(label)$^        label = validate_label(label)$^        if alphabet and label:$^            try:$^                alphabet.encode(label)$^            except keyerror:$^                label = none$^        return label$^$^    dataset_sources = _download_and_preprocess_data(csv_url=dataset_release_csv, target_dir=params.target_dir)$^    sources_root_dir = os.path.dirname(dataset_sources)$^    all_counter = get_counter()$^    all_rows = []$^    with open(dataset_sources, "r") as sources:$^        for line in sources.readlines():$^            d = line.split(",")$^            this_xml = os.path.join(sources_root_dir, d[0])$^            this_mp3 = os.path.join(sources_root_dir, d[1])$^            this_rel = float(d[2])$^$^            wav_filename = os.path.join(sources_root_dir, os.path.splitext(os.path.basename(this_mp3))[0] + ".wav")$^            _maybe_convert_wav(this_mp3, wav_filename)$^            counter, rows = _maybe_import_data(this_xml, wav_filename, sources_root_dir, this_rel)$^$^            all_counter += counter$^            all_rows += rows$^    write_general_csv(sources_root_dir, _counter=all_counter, _rows=all_rows)$^#!/usr/bin/env python$^"""$^downloads and prepares (parts of) the "german distant speech" corpus (tuda) for deepspeech.py$^use "python3 import_tuda.py -h" for help$^"""$^import argparse$^import csv$^import os$^import tarfile$^import unicodedata$^import wave$^import xml.etree.elementtree as et$^from collections import counter$^$^import progressbar$^$^from deepspeech_training.util.downloader import simple_bar, maybe_download$^from deepspeech_training.util.importers import validate_label_eng as validate_label$^from ds_ctcdecoder import alphabet$^$^tuda_version = "v2"$^tuda_package = "german-speechdata-package-{}".format(tuda_version)$^tuda_url = "http://ltdata1.informatik.uni-hamburg.de/kaldi_tuda_de/{}.tar.gz".format($^    tuda_package$^)$^tuda_archive = "{}.tar.gz".format(tuda_package)$^$^channels = 1$^sample_width = 2$^sample_rate = 16000$^$^fieldnames = ["wav_filename", "wav_filesize", "transcript"]$^$^$^def maybe_extract(archive):$^    extracted = os.path.join(cli_args.base_dir, tuda_package)$^    if os.path.isdir(extracted):$^        print('found directory "{}" - not extracting.'.format(extracted))$^    else:$^        print('extracting "{}"...'.format(archive))$^        with tarfile.open(archive) as tar:$^            members = tar.getmembers()$^            bar = progressbar.progressbar(max_value=len(members), widgets=simple_bar)$^            for member in bar(members):$^                tar.extract(member=member, path=cli_args.base_dir)$^    return extracted$^$^$^def in_alphabet(c):$^    return alphabet.canencode(c) if alphabet else true$^$^$^def check_and_prepare_sentence(sentence):$^    sentence = sentence.lower().replace("co2", "c o zwei")$^    chars = []$^    for c in sentence:$^        if cli_args.normalize and c not in "äöüß" and not in_alphabet(c):$^            c = unicodedata.normalize("nfkd", c).encode("ascii", "ignore").decode("ascii", "ignore")$^        for sc in c:$^            if not in_alphabet(c):$^                return none$^            chars.append(sc)$^    return validate_label("".join(chars))$^$^$^def check_wav_file(wav_path, sentence):  # pylint: disable=too-many-return-statements$^    try:$^        with wave.open(wav_path, "r") as src_wav_file:$^            rate = src_wav_file.getframerate()$^            channels = src_wav_file.getnchannels()$^            sample_width = src_wav_file.getsampwidth()$^            milliseconds = int(src_wav_file.getnframes() * 1000 / rate)$^        if rate != sample_rate:$^            return false, "wrong sample rate"$^        if channels != channels:$^            return false, "wrong number of channels"$^        if sample_width != sample_width:$^            return false, "wrong sample width"$^        if milliseconds / len(sentence) < 30:$^            return false, "too short"$^        if milliseconds > cli_args.max_duration > 0:$^            return false, "too long"$^    except wave.error:$^        return false, "invalid wav file"$^    except eoferror:$^        return false, "premature eof"$^    return true, "ok"$^$^$^def write_csvs(extracted):$^    sample_counter = 0$^    reasons = counter()$^    for sub_set in ["train", "dev", "test"]:$^        set_path = os.path.join(extracted, sub_set)$^        set_files = os.listdir(set_path)$^        recordings = {}$^        for file in set_files:$^            if file.endswith(".xml"):$^                recordings[file[:-4]] = []$^        for file in set_files:$^            if file.endswith(".wav") and "_" in file:$^                prefix = file.split("_")[0]$^                if prefix in recordings:$^                    recordings[prefix].append(file)$^        recordings = recordings.items()$^        csv_path = os.path.join($^            cli_args.base_dir, "tuda-{}-{}.csv".format(tuda_version, sub_set)$^        )$^        print('writing "{}"...'.format(csv_path))$^        with open(csv_path, "w", encoding="utf-8", newline="") as csv_file:$^            writer = csv.dictwriter(csv_file, fieldnames=fieldnames)$^            writer.writeheader()$^            set_dir = os.path.join(extracted, sub_set)$^            bar = progressbar.progressbar(max_value=len(recordings), widgets=simple_bar)$^            for prefix, wav_names in bar(recordings):$^                xml_path = os.path.join(set_dir, prefix + ".xml")$^                meta = et.parse(xml_path).getroot()$^                sentence = list(meta.iter("cleaned_sentence"))[0].text$^                sentence = check_and_prepare_sentence(sentence)$^                if sentence is none:$^                    reasons['alphabet filter'] += 1$^                    continue$^                for wav_name in wav_names:$^                    sample_counter += 1$^                    wav_path = os.path.join(set_path, wav_name)$^                    keep, reason = check_wav_file(wav_path, sentence)$^                    if keep:$^                        writer.writerow($^                            {$^                                "wav_filename": os.path.relpath($^                                    wav_path, cli_args.base_dir$^                                ),$^                                "wav_filesize": os.path.getsize(wav_path),$^                                "transcript": sentence.lower(),$^                            }$^                        )$^                    else:$^                        reasons[reason] += 1$^    if len(reasons.keys()) > 0:$^        print("excluded samples:")$^        for reason, n in reasons.most_common():$^            print(' - "{}": {} ({:.2f}%)'.format(reason, n, n * 100 / sample_counter))$^$^$^def cleanup(archive):$^    if not cli_args.keep_archive:$^        print('removing archive "{}"...'.format(archive))$^        os.remove(archive)$^$^$^def download_and_prepare():$^    archive = maybe_download(tuda_archive, cli_args.base_dir, tuda_url)$^    extracted = maybe_extract(archive)$^    write_csvs(extracted)$^    cleanup(archive)$^$^$^def handle_args():$^    parser = argparse.argumentparser(description="import german distant speech (tuda)")$^    parser.add_argument("base_dir", help="directory containing all data")$^    parser.add_argument($^        "--max_duration",$^        type=int,$^        default=10000,$^        help="maximum sample duration in milliseconds",$^    )$^    parser.add_argument($^        "--normalize",$^        action="store_true",$^        help="converts diacritic characters to their base ones",$^    )$^    parser.add_argument($^        "--alphabet",$^        help="exclude samples with characters not in provided alphabet file",$^    )$^    parser.add_argument($^        "--keep_archive",$^        type=bool,$^        default=true,$^        help="if downloaded archives should be kept",$^    )$^    return parser.parse_args()$^$^$^if __name__ == "__main__":$^    cli_args = handle_args()$^    alphabet = alphabet(cli_args.alphabet) if cli_args.alphabet else none$^    download_and_prepare()$^#!/usr/bin/env python$^import glob$^import os$^import tarfile$^import wave$^$^import pandas$^$^from deepspeech_training.util.importers import get_importers_parser$^$^column_names = ["wav_filename", "wav_filesize", "transcript"]$^$^$^def extract(archive_path, target_dir):$^    print("extracting {} into {}...".format(archive_path, target_dir))$^    with tarfile.open(archive_path) as tar:$^        tar.extractall(target_dir)$^$^$^def is_file_truncated(wav_filename, wav_filesize):$^    with wave.open(wav_filename, mode="rb") as fin:$^        assert fin.getframerate() == 16000$^        assert fin.getsampwidth() == 2$^        assert fin.getnchannels() == 1$^$^        header_duration = fin.getnframes() / fin.getframerate()$^        filesize_duration = (wav_filesize - 44) / 16000 / 2$^$^    return header_duration != filesize_duration$^$^$^def preprocess_data(folder_with_archives, target_dir):$^    # first extract subset archives$^    for subset in ("train", "dev", "test"):$^        extract($^            os.path.join($^                folder_with_archives, "magicdata_{}_set.tar.gz".format(subset)$^            ),$^            target_dir,$^        )$^$^    # folder structure is now:$^    # - magicdata_{train,dev,test}.tar.gz$^    # - magicdata/$^    #   - train/*.wav$^    #   - train/trans.txt$^    #   - dev/*.wav$^    #   - dev/trans.txt$^    #   - test/*.wav$^    #   - test/trans.txt$^$^    # the trans files are csvs with three columns, one containing the wav file$^    # name, one containing the speaker id, and one containing the transcription$^$^    def load_set(set_path):$^        transcripts = pandas.read_csv($^            os.path.join(set_path, "trans.txt"), sep="\t", index_col=0$^        )$^        glob_path = os.path.join(set_path, "*", "*.wav")$^        set_files = []$^        for wav in glob.glob(glob_path):$^            try:$^                wav_filename = wav$^                wav_filesize = os.path.getsize(wav)$^                transcript_key = os.path.basename(wav)$^                transcript = transcripts.loc[transcript_key, "transcription"]$^$^                # some files in this dataset are truncated, the header duration$^                # doesn't match the file size. this causes errors at training$^                # time, so check here if things are fine before including a file$^                if is_file_truncated(wav_filename, wav_filesize):$^                    print($^                        "warning: file {} is corrupted, header duration does "$^                        "not match file size. ignoring.".format(wav_filename)$^                    )$^                    continue$^$^                set_files.append((wav_filename, wav_filesize, transcript))$^            except keyerror:$^                print("warning: missing transcript for wav file {}.".format(wav))$^        return set_files$^$^    for subset in ("train", "dev", "test"):$^        print("loading {} set samples...".format(subset))$^        subset_files = load_set(os.path.join(target_dir, subset))$^        df = pandas.dataframe(data=subset_files, columns=column_names)$^$^        # trim train set to under 10s$^        if subset == "train":$^            durations = (df["wav_filesize"] - 44) / 16000 / 2$^            df = df[durations <= 10.0]$^            print("trimming {} samples > 10 seconds".format((durations > 10.0).sum()))$^$^            with_noise = df["transcript"].str.contains(r"\[(fil|spk)\]")$^            df = df[~with_noise]$^            print($^                "trimming {} samples with noise ([fil] or [spk])".format($^                    sum(with_noise)$^                )$^            )$^$^        dest_csv = os.path.join(target_dir, "magicdata_{}.csv".format(subset))$^        print("saving {} set into {}...".format(subset, dest_csv))$^        df.to_csv(dest_csv, index=false)$^$^$^def main():$^    # https://openslr.org/68/$^    parser = get_importers_parser(description="import magicdata corpus")$^    parser.add_argument($^        "folder_with_archives",$^        help="path to folder containing magicdata_{train,dev,test}.tar.gz",$^    )$^    parser.add_argument($^        "--target_dir",$^        default="",$^        help="target folder to extract files into and put the resulting csvs. defaults to a folder called magicdata next to the archives",$^    )$^    params = parser.parse_args()$^$^    if not params.target_dir:$^        params.target_dir = os.path.join(params.folder_with_archives, "magicdata")$^$^    preprocess_data(params.folder_with_archives, params.target_dir)$^$^$^if __name__ == "__main__":$^    main()$^#!/usr/bin/env python3$^# pylint: disable=invalid-name$^import csv$^import os$^import subprocess$^import tarfile$^import unicodedata$^from glob import glob$^from multiprocessing import pool$^$^import progressbar$^$^from deepspeech_training.util.downloader import simple_bar, maybe_download$^from deepspeech_training.util.importers import ($^    get_counter,$^    get_imported_samples,$^    get_importers_parser,$^    get_validate_label,$^    print_import_report,$^)$^from ds_ctcdecoder import alphabet$^$^fieldnames = ["wav_filename", "wav_filesize", "transcript"]$^sample_rate = 16000$^max_secs = 15$^$^archive_dir_name = "{language}"$^archive_name = "{language}.tgz"$^archive_url = "https://data.solak.de/data/training/stt_tts/" + archive_name$^$^$^def _download_and_preprocess_data(target_dir):$^    # making path absolute$^    target_dir = os.path.abspath(target_dir)$^    # conditionally download data$^    archive_path = maybe_download(archive_name, target_dir, archive_url)$^    # conditionally extract data$^    _maybe_extract(target_dir, archive_dir_name, archive_path)$^    # produce csv files$^    _maybe_convert_sets(target_dir, archive_dir_name)$^$^$^def _maybe_extract(target_dir, extracted_data, archive_path):$^    # if target_dir/extracted_data does not exist, extract archive in target_dir$^    extracted_path = os.path.join(target_dir, extracted_data)$^    if not os.path.exists(extracted_path):$^        print('no directory "%s" - extracting archive...' % extracted_path)$^        if not os.path.isdir(extracted_path):$^            os.mkdir(extracted_path)$^        tar = tarfile.open(archive_path)$^        tar.extractall(extracted_path)$^        tar.close()$^    else:$^        print('found directory "%s" - not extracting it from archive.' % archive_path)$^$^$^def one_sample(sample):$^    """ take a audio file, and optionally convert it to 16khz wav """$^    wav_filename = sample[0]$^    file_size = -1$^    frames = 0$^    if os.path.exists(wav_filename):$^        tmp_filename = os.path.splitext(wav_filename)[0]+'.tmp.wav'$^        subprocess.check_call($^            ['sox', wav_filename, '-r', str(sample_rate), '-c', '1', '-b', '16', tmp_filename], stderr=subprocess.stdout$^        )$^        os.rename(tmp_filename, wav_filename)$^        file_size = os.path.getsize(wav_filename)$^        frames = int($^            subprocess.check_output($^                ["soxi", "-s", wav_filename], stderr=subprocess.stdout$^            )$^        )$^    label = label_filter(sample[1])$^    counter = get_counter()$^    rows = []$^$^    if file_size == -1:$^        # excluding samples that failed upon conversion$^        print("conversion failure", wav_filename)$^        counter["failed"] += 1$^    elif label is none:$^        # excluding samples that failed on label validation$^        counter["invalid_label"] += 1$^    elif int(frames / sample_rate * 1000 / 15 / 2) < len(str(label)):$^        # excluding samples that are too short to fit the transcript$^        counter["too_short"] += 1$^    elif frames / sample_rate > max_secs:$^        # excluding very long samples to keep a reasonable batch-size$^        counter["too_long"] += 1$^    else:$^        # this one is good - keep it for the target csv$^        rows.append((wav_filename, file_size, label))$^        counter["imported_time"] += frames$^    counter["all"] += 1$^    counter["total_time"] += frames$^    return (counter, rows)$^$^$^def _maybe_convert_sets(target_dir, extracted_data):$^    extracted_dir = os.path.join(target_dir, extracted_data)$^    # override existing csv with normalized one$^    target_csv_template = os.path.join($^        target_dir, archive_dir_name, archive_name.replace(".tgz", "_{}.csv")$^    )$^    if os.path.isfile(target_csv_template):$^        return$^$^    wav_root_dir = os.path.join(extracted_dir)$^$^    # get audiofile path and transcript for each sentence in tsv$^    samples = []$^    glob_dir = os.path.join(wav_root_dir, "**/metadata.csv")$^    for record in glob(glob_dir, recursive=true):$^        if any($^            map(lambda sk: sk in record, skip_list)$^        ):  # pylint: disable=cell-var-from-loop$^            continue$^        with open(record, "r") as rec:$^            for re in rec.readlines():$^                re = re.strip().split("|")$^                audio = os.path.join(os.path.dirname(record), "wavs", re[0] + ".wav")$^                transcript = re[2]$^                samples.append((audio, transcript))$^$^    counter = get_counter()$^    num_samples = len(samples)$^    rows = []$^$^    print("importing wav files...")$^    pool = pool()$^    bar = progressbar.progressbar(max_value=num_samples, widgets=simple_bar)$^    for i, processed in enumerate(pool.imap_unordered(one_sample, samples), start=1):$^        counter += processed[0]$^        rows += processed[1]$^        bar.update(i)$^    bar.update(num_samples)$^    pool.close()$^    pool.join()$^$^    with open(target_csv_template.format("train"), "w", encoding="utf-8", newline="") as train_csv_file:  # 80%$^        with open(target_csv_template.format("dev"), "w", encoding="utf-8", newline="") as dev_csv_file:  # 10%$^            with open(target_csv_template.format("test"), "w", encoding="utf-8", newline="") as test_csv_file:  # 10%$^                train_writer = csv.dictwriter(train_csv_file, fieldnames=fieldnames)$^                train_writer.writeheader()$^                dev_writer = csv.dictwriter(dev_csv_file, fieldnames=fieldnames)$^                dev_writer.writeheader()$^                test_writer = csv.dictwriter(test_csv_file, fieldnames=fieldnames)$^                test_writer.writeheader()$^$^                for i, item in enumerate(rows):$^                    transcript = validate_label(item[2])$^                    if not transcript:$^                        continue$^                    wav_filename = item[0]$^                    i_mod = i % 10$^                    if i_mod == 0:$^                        writer = test_writer$^                    elif i_mod == 1:$^                        writer = dev_writer$^                    else:$^                        writer = train_writer$^                    writer.writerow($^                        dict($^                            wav_filename=os.path.relpath(wav_filename, extracted_dir),$^                            wav_filesize=os.path.getsize(wav_filename),$^                            transcript=transcript,$^                        )$^                    )$^$^    imported_samples = get_imported_samples(counter)$^    assert counter["all"] == num_samples$^    assert len(rows) == imported_samples$^$^    print_import_report(counter, sample_rate, max_secs)$^$^$^def handle_args():$^    parser = get_importers_parser($^        description="importer for m-ailabs dataset. https://www.caito.de/2019/01/the-m-ailabs-speech-dataset/."$^    )$^    parser.add_argument(dest="target_dir")$^    parser.add_argument($^        "--filter_alphabet",$^        help="exclude samples with characters not in provided alphabet",$^    )$^    parser.add_argument($^        "--normalize",$^        action="store_true",$^        help="converts diacritic characters to their base ones",$^    )$^    parser.add_argument($^        "--skiplist",$^        type=str,$^        default="",$^        help="directories / books to skip, comma separated",$^    )$^    parser.add_argument($^        "--language", required=true, type=str, help="dataset language to use"$^    )$^    return parser.parse_args()$^$^$^if __name__ == "__main__":$^    cli_args = handle_args()$^    alphabet = alphabet(cli_args.filter_alphabet) if cli_args.filter_alphabet else none$^    skip_list = filter(none, cli_args.skiplist.split(","))$^    validate_label = get_validate_label(cli_args)$^$^    def label_filter(label):$^        if cli_args.normalize:$^            label = ($^                unicodedata.normalize("nfkd", label.strip())$^                .encode("ascii", "ignore")$^                .decode("ascii", "ignore")$^            )$^        label = validate_label(label)$^        if alphabet and label and not alphabet.canencode(label):$^            label = none$^        return label$^$^    archive_dir_name = archive_dir_name.format(language=cli_args.language)$^    archive_name = archive_name.format(language=cli_args.language)$^    archive_url = archive_url.format(language=cli_args.language)$^$^    _download_and_preprocess_data(target_dir=cli_args.target_dir)$^#!/usr/bin/env python$^import sys$^import tarfile$^import unicodedata$^import wave$^from glob import glob$^from os import makedirs, path, remove, rmdir$^$^import pandas$^from sox import transformer$^from tensorflow.python.platform import gfile$^$^from deepspeech_training.util.downloader import maybe_download$^from deepspeech_training.util.stm import parse_stm_file$^$^$^def _download_and_preprocess_data(data_dir):$^    # conditionally download data$^    ted_data = "tedlium_release2.tar.gz"$^    ted_data_url = "http://www.openslr.org/resources/19/tedlium_release2.tar.gz"$^    local_file = maybe_download(ted_data, data_dir, ted_data_url)$^$^    # conditionally extract ted data$^    ted_dir = "tedlium_release2"$^    _maybe_extract(data_dir, ted_dir, local_file)$^$^    # conditionally convert ted sph data to wav$^    _maybe_convert_wav(data_dir, ted_dir)$^$^    # conditionally split ted wav and text data into sentences$^    train_files, dev_files, test_files = _maybe_split_sentences(data_dir, ted_dir)$^$^    # write sets to disk as csv files$^    train_files.to_csv(path.join(data_dir, "ted-train.csv"), index=false)$^    dev_files.to_csv(path.join(data_dir, "ted-dev.csv"), index=false)$^    test_files.to_csv(path.join(data_dir, "ted-test.csv"), index=false)$^$^$^def _maybe_extract(data_dir, extracted_data, archive):$^    # if data_dir/extracted_data does not exist, extract archive in data_dir$^    if not gfile.exists(path.join(data_dir, extracted_data)):$^        tar = tarfile.open(archive)$^        tar.extractall(data_dir)$^        tar.close()$^$^$^def _maybe_convert_wav(data_dir, extracted_data):$^    # create extracted_data dir$^    extracted_dir = path.join(data_dir, extracted_data)$^$^    # conditionally convert dev sph to wav$^    _maybe_convert_wav_dataset(extracted_dir, "dev")$^$^    # conditionally convert train sph to wav$^    _maybe_convert_wav_dataset(extracted_dir, "train")$^$^    # conditionally convert test sph to wav$^    _maybe_convert_wav_dataset(extracted_dir, "test")$^$^$^def _maybe_convert_wav_dataset(extracted_dir, data_set):$^    # create source dir$^    source_dir = path.join(extracted_dir, data_set, "sph")$^$^    # create target dir$^    target_dir = path.join(extracted_dir, data_set, "wav")$^$^    # conditionally convert sph files to wav files$^    if not gfile.exists(target_dir):$^        # create target_dir$^        makedirs(target_dir)$^$^        # loop over sph files in source_dir and convert each to wav$^        for sph_file in glob(path.join(source_dir, "*.sph")):$^            transformer = transformer()$^            wav_filename = path.splitext(path.basename(sph_file))[0] + ".wav"$^            wav_file = path.join(target_dir, wav_filename)$^            transformer.build(sph_file, wav_file)$^            remove(sph_file)$^$^        # remove source_dir$^        rmdir(source_dir)$^$^$^def _maybe_split_sentences(data_dir, extracted_data):$^    # create extracted_data dir$^    extracted_dir = path.join(data_dir, extracted_data)$^$^    # conditionally split dev wav$^    dev_files = _maybe_split_dataset(extracted_dir, "dev")$^$^    # conditionally split train wav$^    train_files = _maybe_split_dataset(extracted_dir, "train")$^$^    # conditionally split test wav$^    test_files = _maybe_split_dataset(extracted_dir, "test")$^$^    return train_files, dev_files, test_files$^$^$^def _maybe_split_dataset(extracted_dir, data_set):$^    # create stm dir$^    stm_dir = path.join(extracted_dir, data_set, "stm")$^$^    # create wav dir$^    wav_dir = path.join(extracted_dir, data_set, "wav")$^$^    files = []$^$^    # loop over stm files and split corresponding wav$^    for stm_file in glob(path.join(stm_dir, "*.stm")):$^        # parse stm file$^        stm_segments = parse_stm_file(stm_file)$^$^        # open wav corresponding to stm_file$^        wav_filename = path.splitext(path.basename(stm_file))[0] + ".wav"$^        wav_file = path.join(wav_dir, wav_filename)$^        origaudio = wave.open(wav_file, "r")$^$^        # loop over stm_segments and split wav_file for each segment$^        for stm_segment in stm_segments:$^            # create wav segment filename$^            start_time = stm_segment.start_time$^            stop_time = stm_segment.stop_time$^            new_wav_filename = ($^                path.splitext(path.basename(stm_file))[0]$^                + "-"$^                + str(start_time)$^                + "-"$^                + str(stop_time)$^                + ".wav"$^            )$^            new_wav_file = path.join(wav_dir, new_wav_filename)$^$^            # if the wav segment filename does not exist create it$^            if not gfile.exists(new_wav_file):$^                _split_wav(origaudio, start_time, stop_time, new_wav_file)$^$^            new_wav_filesize = path.getsize(new_wav_file)$^            files.append($^                (path.abspath(new_wav_file), new_wav_filesize, stm_segment.transcript)$^            )$^$^        # close origaudio$^        origaudio.close()$^$^    return pandas.dataframe($^        data=files, columns=["wav_filename", "wav_filesize", "transcript"]$^    )$^$^$^def _split_wav(origaudio, start_time, stop_time, new_wav_file):$^    framerate = origaudio.getframerate()$^    origaudio.setpos(int(start_time * framerate))$^    chunkdata = origaudio.readframes(int((stop_time - start_time) * framerate))$^    chunkaudio = wave.open(new_wav_file, "w")$^    chunkaudio.setnchannels(origaudio.getnchannels())$^    chunkaudio.setsampwidth(origaudio.getsampwidth())$^    chunkaudio.setframerate(framerate)$^    chunkaudio.writeframes(chunkdata)$^    chunkaudio.close()$^$^$^if __name__ == "__main__":$^    _download_and_preprocess_data(sys.argv[1])$^#!/usr/bin/env python$^# -*- coding: utf-8 -*-$^$^import sys$^$^import tensorflow.compat.v1 as tfv1$^$^$^def main():$^    with tfv1.gfile.fastgfile(sys.argv[1], "rb") as fin:$^        graph_def = tfv1.graphdef()$^        graph_def.parsefromstring(fin.read())$^$^        print("\n".join(sorted(set(n.op for n in graph_def.node))))$^$^$^if __name__ == "__main__":$^    main()$^#!/usr/bin/env python3$^import argparse$^import csv$^import os$^import re$^import subprocess$^import unicodedata$^import zipfile$^from glob import glob$^from multiprocessing import pool$^$^import progressbar$^import sox$^$^from deepspeech_training.util.downloader import simple_bar, maybe_download$^from deepspeech_training.util.importers import ($^    get_counter,$^    get_imported_samples,$^    get_importers_parser,$^    get_validate_label,$^    print_import_report,$^)$^from ds_ctcdecoder import alphabet$^$^fieldnames = ["wav_filename", "wav_filesize", "transcript"]$^sample_rate = 16000$^bitdepth = 16$^n_channels = 1$^max_secs = 10$^$^archive_dir_name = "lingua_libre"$^archive_name = "q{qid}-{iso639_3}-{language_english_name}.zip"$^archive_url = "https://lingualibre.fr/datasets/" + archive_name$^$^$^def _download_and_preprocess_data(target_dir):$^    # making path absolute$^    target_dir = os.path.abspath(target_dir)$^    # conditionally download data$^    archive_path = maybe_download(archive_name, target_dir, archive_url)$^    # conditionally extract data$^    _maybe_extract(target_dir, archive_dir_name, archive_path)$^    # produce csv files and convert ogg data to wav$^    _maybe_convert_sets(target_dir, archive_dir_name)$^$^$^def _maybe_extract(target_dir, extracted_data, archive_path):$^    # if target_dir/extracted_data does not exist, extract archive in target_dir$^    extracted_path = os.path.join(target_dir, extracted_data)$^    if not os.path.exists(extracted_path):$^        print('no directory "%s" - extracting archive...' % extracted_path)$^        if not os.path.isdir(extracted_path):$^            os.mkdir(extracted_path)$^        with zipfile.zipfile(archive_path) as zip_f:$^            zip_f.extractall(extracted_path)$^    else:$^        print('found directory "%s" - not extracting it from archive.' % archive_path)$^$^$^def one_sample(sample):$^    """ take a audio file, and optionally convert it to 16khz wav """$^    ogg_filename = sample[0]$^    # storing wav files next to the ogg ones - just with a different suffix$^    wav_filename = os.path.splitext(ogg_filename)[0] + ".wav"$^    _maybe_convert_wav(ogg_filename, wav_filename)$^    file_size = -1$^    frames = 0$^    if os.path.exists(wav_filename):$^        file_size = os.path.getsize(wav_filename)$^        frames = int($^            subprocess.check_output($^                ["soxi", "-s", wav_filename], stderr=subprocess.stdout$^            )$^        )$^    label = label_filter(sample[1])$^    rows = []$^    counter = get_counter()$^$^    if file_size == -1:$^        # excluding samples that failed upon conversion$^        counter["failed"] += 1$^    elif label is none:$^        # excluding samples that failed on label validation$^        counter["invalid_label"] += 1$^    elif int(frames / sample_rate * 1000 / 10 / 2) < len(str(label)):$^        # excluding samples that are too short to fit the transcript$^        counter["too_short"] += 1$^    elif frames / sample_rate > max_secs:$^        # excluding very long samples to keep a reasonable batch-size$^        counter["too_long"] += 1$^    else:$^        # this one is good - keep it for the target csv$^        rows.append((wav_filename, file_size, label))$^        counter["imported_time"] += frames$^    counter["all"] += 1$^    counter["total_time"] += frames$^$^    return (counter, rows)$^$^$^def _maybe_convert_sets(target_dir, extracted_data):$^    extracted_dir = os.path.join(target_dir, extracted_data)$^    # override existing csv with normalized one$^    target_csv_template = os.path.join($^        target_dir, archive_dir_name + "_" + archive_name.replace(".zip", "_{}.csv")$^    )$^    if os.path.isfile(target_csv_template):$^        return$^$^    ogg_root_dir = os.path.join(extracted_dir, archive_name.replace(".zip", ""))$^$^    # get audiofile path and transcript for each sentence in tsv$^    samples = []$^    glob_dir = os.path.join(ogg_root_dir, "**/*.ogg")$^    for record in glob(glob_dir, recursive=true):$^        record_file = record.replace(ogg_root_dir + os.path.sep, "")$^        if record_filter(record_file):$^            samples.append($^                ($^                    os.path.join(ogg_root_dir, record_file),$^                    os.path.splitext(os.path.basename(record_file))[0],$^                )$^            )$^$^    counter = get_counter()$^    num_samples = len(samples)$^    rows = []$^$^    print("importing ogg files...")$^    pool = pool()$^    bar = progressbar.progressbar(max_value=num_samples, widgets=simple_bar)$^    for i, processed in enumerate(pool.imap_unordered(one_sample, samples), start=1):$^        counter += processed[0]$^        rows += processed[1]$^        bar.update(i)$^    bar.update(num_samples)$^    pool.close()$^    pool.join()$^$^    with open(target_csv_template.format("train"), "w", encoding="utf-8", newline="") as train_csv_file:  # 80%$^        with open(target_csv_template.format("dev"), "w", encoding="utf-8", newline="") as dev_csv_file:  # 10%$^            with open(target_csv_template.format("test"), "w", encoding="utf-8", newline="") as test_csv_file:  # 10%$^                train_writer = csv.dictwriter(train_csv_file, fieldnames=fieldnames)$^                train_writer.writeheader()$^                dev_writer = csv.dictwriter(dev_csv_file, fieldnames=fieldnames)$^                dev_writer.writeheader()$^                test_writer = csv.dictwriter(test_csv_file, fieldnames=fieldnames)$^                test_writer.writeheader()$^$^                for i, item in enumerate(rows):$^                    transcript = validate_label(item[2])$^                    if not transcript:$^                        continue$^                    wav_filename = os.path.join($^                        ogg_root_dir, item[0].replace(".ogg", ".wav")$^                    )$^                    i_mod = i % 10$^                    if i_mod == 0:$^                        writer = test_writer$^                    elif i_mod == 1:$^                        writer = dev_writer$^                    else:$^                        writer = train_writer$^                    writer.writerow($^                        dict($^                            wav_filename=wav_filename,$^                            wav_filesize=os.path.getsize(wav_filename),$^                            transcript=transcript,$^                        )$^                    )$^$^    imported_samples = get_imported_samples(counter)$^    assert counter["all"] == num_samples$^    assert len(rows) == imported_samples$^$^    print_import_report(counter, sample_rate, max_secs)$^$^$^def _maybe_convert_wav(ogg_filename, wav_filename):$^    if not os.path.exists(wav_filename):$^        transformer = sox.transformer()$^        transformer.convert(samplerate=sample_rate, n_channels=n_channels, bitdepth=bitdepth)$^        try:$^            transformer.build(ogg_filename, wav_filename)$^        except sox.core.soxerror as ex:$^            print("sox processing error", ex, ogg_filename, wav_filename)$^$^$^def handle_args():$^    parser = get_importers_parser($^        description="importer for lingualibre dataset. check https://lingualibre.fr/wiki/help:download_from_lingualibre for details."$^    )$^    parser.add_argument(dest="target_dir")$^    parser.add_argument($^        "--qid", type=int, required=true, help="lingualibre language qid"$^    )$^    parser.add_argument($^        "--iso639-3", type=str, required=true, help="iso639-3 language code"$^    )$^    parser.add_argument($^        "--english-name", type=str, required=true, help="english name of the language"$^    )$^    parser.add_argument($^        "--filter_alphabet",$^        help="exclude samples with characters not in provided alphabet",$^    )$^    parser.add_argument($^        "--normalize",$^        action="store_true",$^        help="converts diacritic characters to their base ones",$^    )$^    parser.add_argument($^        "--bogus-records",$^        type=argparse.filetype("r"),$^        required=false,$^        help="text file listing well-known bogus record to skip from importing, from https://lingualibre.fr/wiki/lingualibre:misleading_items",$^    )$^    return parser.parse_args()$^$^$^if __name__ == "__main__":$^    cli_args = handle_args()$^    alphabet = alphabet(cli_args.filter_alphabet) if cli_args.filter_alphabet else none$^    validate_label = get_validate_label(cli_args)$^$^    bogus_regexes = []$^    if cli_args.bogus_records:$^        for line in cli_args.bogus_records:$^            bogus_regexes.append(re.compile(line.strip()))$^$^    def record_filter(path):$^        if any(regex.match(path) for regex in bogus_regexes):$^            print("reject", path)$^            return false$^        return true$^$^    def label_filter(label):$^        if cli_args.normalize:$^            label = ($^                unicodedata.normalize("nfkd", label.strip())$^                .encode("ascii", "ignore")$^                .decode("ascii", "ignore")$^            )$^        label = validate_label(label)$^        if alphabet and label and not alphabet.canencode(label):$^            label = none$^        return label$^$^    archive_name = archive_name.format($^        qid=cli_args.qid,$^        iso639_3=cli_args.iso639_3,$^        language_english_name=cli_args.english_name,$^    )$^    archive_url = archive_url.format($^        qid=cli_args.qid,$^        iso639_3=cli_args.iso639_3,$^        language_english_name=cli_args.english_name,$^    )$^    _download_and_preprocess_data(target_dir=cli_args.target_dir)$^#!/usr/bin/env python$^import glob$^import os$^import tarfile$^$^import pandas$^$^from deepspeech_training.util.importers import get_importers_parser$^$^columnnames = ["wav_filename", "wav_filesize", "transcript"]$^$^$^def extract(archive_path, target_dir):$^    print("extracting {} into {}...".format(archive_path, target_dir))$^    with tarfile.open(archive_path) as tar:$^        tar.extractall(target_dir)$^$^$^def preprocess_data(tgz_file, target_dir):$^    # first extract main archive and sub-archives$^    extract(tgz_file, target_dir)$^    main_folder = os.path.join(target_dir, "data_aishell")$^$^    wav_archives_folder = os.path.join(main_folder, "wav")$^    for targz in glob.glob(os.path.join(wav_archives_folder, "*.tar.gz")):$^        extract(targz, main_folder)$^$^    # folder structure is now:$^    # - data_aishell/$^    #   - train/s****/*.wav$^    #   - dev/s****/*.wav$^    #   - test/s****/*.wav$^    #   - wav/s****.tar.gz$^    #   - transcript/aishell_transcript_v0.8.txt$^$^    # transcripts file has one line per wav file, where each line consists of$^    # the wav file name without extension followed by a single space followed$^    # by the transcript.$^$^    # since the transcripts themselves can contain spaces, we split on space but$^    # only once, then build a mapping from file name to transcript$^    transcripts_path = os.path.join($^        main_folder, "transcript", "aishell_transcript_v0.8.txt"$^    )$^    with open(transcripts_path) as fin:$^        transcripts = dict((line.split(" ", maxsplit=1) for line in fin))$^$^    def load_set(glob_path):$^        set_files = []$^        for wav in glob.glob(glob_path):$^            try:$^                wav_filename = wav$^                wav_filesize = os.path.getsize(wav)$^                transcript_key = os.path.splitext(os.path.basename(wav))[0]$^                transcript = transcripts[transcript_key].strip("\n")$^                set_files.append((wav_filename, wav_filesize, transcript))$^            except keyerror:$^                print("warning: missing transcript for wav file {}.".format(wav))$^        return set_files$^$^    for subset in ("train", "dev", "test"):$^        print("loading {} set samples...".format(subset))$^        subset_files = load_set(os.path.join(main_folder, subset, "s*", "*.wav"))$^        df = pandas.dataframe(data=subset_files, columns=columnnames)$^$^        # trim train set to under 10s by removing the last couple hundred samples$^        if subset == "train":$^            durations = (df["wav_filesize"] - 44) / 16000 / 2$^            df = df[durations <= 10.0]$^            print("trimming {} samples > 10 seconds".format((durations > 10.0).sum()))$^$^        dest_csv = os.path.join(target_dir, "aishell_{}.csv".format(subset))$^        print("saving {} set into {}...".format(subset, dest_csv))$^        df.to_csv(dest_csv, index=false)$^$^$^def main():$^    # http://www.openslr.org/33/$^    parser = get_importers_parser(description="import aishell corpus")$^    parser.add_argument("aishell_tgz_file", help="path to data_aishell.tgz")$^    parser.add_argument($^        "--target_dir",$^        default="",$^        help="target folder to extract files into and put the resulting csvs. defaults to same folder as the main archive.",$^    )$^    params = parser.parse_args()$^$^    if not params.target_dir:$^        params.target_dir = os.path.dirname(params.aishell_tgz_file)$^$^    preprocess_data(params.aishell_tgz_file, params.target_dir)$^$^$^if __name__ == "__main__":$^    main()$^#!/usr/bin/env python$^import glob$^import os$^import tarfile$^$^import pandas$^$^from deepspeech_training.util.importers import get_importers_parser$^$^column_names = ["wav_filename", "wav_filesize", "transcript"]$^$^$^def extract(archive_path, target_dir):$^    print("extracting {} into {}...".format(archive_path, target_dir))$^    with tarfile.open(archive_path) as tar:$^        tar.extractall(target_dir)$^$^$^def preprocess_data(tgz_file, target_dir):$^    # first extract main archive and sub-archives$^    extract(tgz_file, target_dir)$^    main_folder = os.path.join(target_dir, "aidatatang_200zh")$^$^    for targz in glob.glob(os.path.join(main_folder, "corpus", "*", "*.tar.gz")):$^        extract(targz, os.path.dirname(targz))$^$^    # folder structure is now:$^    # - aidatatang_200zh/$^    #   - transcript/aidatatang_200_zh_transcript.txt$^    #   - corpus/train/*.tar.gz$^    #   - corpus/train/*/*.{wav,txt,trn,metadata}$^    #   - corpus/dev/*.tar.gz$^    #   - corpus/dev/*/*.{wav,txt,trn,metadata}$^    #   - corpus/test/*.tar.gz$^    #   - corpus/test/*/*.{wav,txt,trn,metadata}$^$^    # transcripts file has one line per wav file, where each line consists of$^    # the wav file name without extension followed by a single space followed$^    # by the transcript.$^$^    # since the transcripts themselves can contain spaces, we split on space but$^    # only once, then build a mapping from file name to transcript$^    transcripts_path = os.path.join($^        main_folder, "transcript", "aidatatang_200_zh_transcript.txt"$^    )$^    with open(transcripts_path) as fin:$^        transcripts = dict((line.split(" ", maxsplit=1) for line in fin))$^$^    def load_set(glob_path):$^        set_files = []$^        for wav in glob.glob(glob_path):$^            try:$^                wav_filename = wav$^                wav_filesize = os.path.getsize(wav)$^                transcript_key = os.path.splitext(os.path.basename(wav))[0]$^                transcript = transcripts[transcript_key].strip("\n")$^                set_files.append((wav_filename, wav_filesize, transcript))$^            except keyerror:$^                print("warning: missing transcript for wav file {}.".format(wav))$^        return set_files$^$^    for subset in ("train", "dev", "test"):$^        print("loading {} set samples...".format(subset))$^        subset_files = load_set($^            os.path.join(main_folder, "corpus", subset, "*", "*.wav")$^        )$^        df = pandas.dataframe(data=subset_files, columns=column_names)$^$^        # trim train set to under 10s by removing the last couple hundred samples$^        if subset == "train":$^            durations = (df["wav_filesize"] - 44) / 16000 / 2$^            df = df[durations <= 10.0]$^            print("trimming {} samples > 10 seconds".format((durations > 10.0).sum()))$^$^        dest_csv = os.path.join(target_dir, "aidatatang_{}.csv".format(subset))$^        print("saving {} set into {}...".format(subset, dest_csv))$^        df.to_csv(dest_csv, index=false)$^$^$^def main():$^    # https://www.openslr.org/62/$^    parser = get_importers_parser(description="import aidatatang_200zh corpus")$^    parser.add_argument("tgz_file", help="path to aidatatang_200zh.tgz")$^    parser.add_argument($^        "--target_dir",$^        default="",$^        help="target folder to extract files into and put the resulting csvs. defaults to same folder as the main archive.",$^    )$^    params = parser.parse_args()$^$^    if not params.target_dir:$^        params.target_dir = os.path.dirname(params.tgz_file)$^$^    preprocess_data(params.tgz_file, params.target_dir)$^$^$^if __name__ == "__main__":$^    main()$^from __future__ import print_function$^$^import progressbar$^import sys$^$^from .flags import flags$^$^$^# logging functions$^# =================$^$^def prefix_print(prefix, message):$^    print(prefix + ('\n' + prefix).join(message.split('\n')))$^$^$^def log_debug(message):$^    if flags.log_level == 0:$^        prefix_print('d ', message)$^$^$^def log_info(message):$^    if flags.log_level <= 1:$^        prefix_print('i ', message)$^$^$^def log_warn(message):$^    if flags.log_level <= 2:$^        prefix_print('w ', message)$^$^$^def log_error(message):$^    if flags.log_level <= 3:$^        prefix_print('e ', message)$^$^$^def create_progressbar(*args, **kwargs):$^    # progress bars in stdout by default$^    if 'fd' not in kwargs:$^        kwargs['fd'] = sys.stdout$^$^    if flags.show_progressbar:$^        return progressbar.progressbar(*args, **kwargs)$^$^    return progressbar.nullbar(*args, **kwargs)$^$^$^def log_progress(message):$^    if not flags.show_progressbar:$^        log_info(message)$^# -*- coding: utf-8 -*-$^from __future__ import absolute_import, division, print_function$^$^from collections import counter$^from functools import partial$^$^import numpy as np$^import tensorflow as tf$^$^from tensorflow.python.ops import gen_audio_ops as contrib_audio$^$^from .config import config$^from .text import text_to_char_array$^from .flags import flags$^from .augmentations import apply_sample_augmentations, apply_graph_augmentations$^from .audio import read_frames_from_file, vad_split, pcm_to_np, default_format$^from .sample_collections import samples_from_sources$^from .helpers import remember_exception, megabyte$^$^$^def audio_to_features(audio, sample_rate, transcript=none, clock=0.0, train_phase=false, augmentations=none, sample_id=none):$^    if train_phase:$^        # we need the lambdas to make tensorflow happy.$^        # pylint: disable=unnecessary-lambda$^        tf.cond(tf.math.not_equal(sample_rate, flags.audio_sample_rate),$^                lambda: tf.print('warning: sample rate of sample', sample_id, '(', sample_rate, ') '$^                                 'does not match flags.audio_sample_rate. this can lead to incorrect results.'),$^                lambda: tf.no_op(),$^                name='matching_sample_rate')$^$^    if train_phase and augmentations:$^        audio = apply_graph_augmentations('signal', audio, augmentations, transcript=transcript, clock=clock)$^$^    spectrogram = contrib_audio.audio_spectrogram(audio,$^                                                  window_size=config.audio_window_samples,$^                                                  stride=config.audio_step_samples,$^                                                  magnitude_squared=true)$^$^    if train_phase and augmentations:$^        spectrogram = apply_graph_augmentations('spectrogram', spectrogram, augmentations, transcript=transcript, clock=clock)$^$^    features = contrib_audio.mfcc(spectrogram=spectrogram,$^                                  sample_rate=sample_rate,$^                                  dct_coefficient_count=config.n_input,$^                                  upper_frequency_limit=flags.audio_sample_rate / 2)$^    features = tf.reshape(features, [-1, config.n_input])$^$^    if train_phase and augmentations:$^        features = apply_graph_augmentations('features', features, augmentations, transcript=transcript, clock=clock)$^$^    return features, tf.shape(input=features)[0]$^$^$^def audiofile_to_features(wav_filename, clock=0.0, train_phase=false, augmentations=none):$^    samples = tf.io.read_file(wav_filename)$^    decoded = contrib_audio.decode_wav(samples, desired_channels=1)$^    return audio_to_features(decoded.audio,$^                             decoded.sample_rate,$^                             clock=clock,$^                             train_phase=train_phase,$^                             augmentations=augmentations,$^                             sample_id=wav_filename)$^$^$^def entry_to_features(sample_id, audio, sample_rate, transcript, clock, train_phase=false, augmentations=none):$^    # https://bugs.python.org/issue32117$^    sparse_transcript = tf.sparsetensor(*transcript)$^    features, features_len = audio_to_features(audio,$^                                               sample_rate,$^                                               transcript=sparse_transcript,$^                                               clock=clock,$^                                               train_phase=train_phase,$^                                               augmentations=augmentations,$^                                               sample_id=sample_id)$^    return sample_id, features, features_len, sparse_transcript$^$^$^def to_sparse_tuple(sequence):$^    r"""creates a sparse representention of ``sequence``.$^        returns a tuple with (indices, values, shape)$^    """$^    indices = np.asarray(list(zip([0]*len(sequence), range(len(sequence)))), dtype=np.int64)$^    shape = np.asarray([1, len(sequence)], dtype=np.int64)$^    return indices, sequence, shape$^$^$^def create_dataset(sources,$^                   batch_size,$^                   epochs=1,$^                   augmentations=none,$^                   cache_path=none,$^                   train_phase=false,$^                   reverse=false,$^                   limit=0,$^                   exception_box=none,$^                   process_ahead=none,$^                   buffering=1 * megabyte,$^                   split_dataset=false):$^    epoch_counter = counter()  # survives restarts of the dataset and its generator$^$^    def generate_values():$^        epoch = epoch_counter['epoch']$^        if train_phase:$^            epoch_counter['epoch'] += 1$^        samples = samples_from_sources(sources, buffering=buffering, labeled=true, reverse=reverse)$^        num_samples = len(samples)$^        if limit > 0:$^            num_samples = min(limit, num_samples)$^        samples = apply_sample_augmentations(samples,$^                                             augmentations,$^                                             buffering=buffering,$^                                             process_ahead=2 * batch_size if process_ahead is none else process_ahead,$^                                             clock=epoch / epochs,$^                                             final_clock=(epoch + 1) / epochs)$^        for sample_index, sample in enumerate(samples):$^            if sample_index >= num_samples:$^                break$^            clock = (epoch * num_samples + sample_index) / (epochs * num_samples) if train_phase and epochs > 0 else 0.0$^            transcript = text_to_char_array(sample.transcript, config.alphabet, context=sample.sample_id)$^            transcript = to_sparse_tuple(transcript)$^            yield sample.sample_id, sample.audio, sample.audio_format.rate, transcript, clock$^$^    # batching a dataset of 2d sparsetensors creates 3d batches, which fail$^    # when passed to tf.nn.ctc_loss, so we reshape them to remove the extra$^    # dimension here.$^    def sparse_reshape(sparse):$^        shape = sparse.dense_shape$^        return tf.sparse.reshape(sparse, [shape[0], shape[2]])$^$^    def batch_fn(sample_ids, features, features_len, transcripts):$^        features = tf.data.dataset.zip((features, features_len))$^        features = features.padded_batch(batch_size, padded_shapes=([none, config.n_input], []))$^        transcripts = transcripts.batch(batch_size).map(sparse_reshape)$^        sample_ids = sample_ids.batch(batch_size)$^        return tf.data.dataset.zip((sample_ids, features, transcripts))$^$^    process_fn = partial(entry_to_features, train_phase=train_phase, augmentations=augmentations)$^$^    dataset = tf.data.dataset.from_generator(remember_exception(generate_values, exception_box),$^                                             output_types=(tf.string, tf.float32, tf.int32,$^                                                           (tf.int64, tf.int32, tf.int64), tf.float64))$^    if split_dataset:$^        # using horovod iterator.get_next() is not aware of different devices.$^        # a.shard(n, i) will contain all elements of a whose index mod n = i.$^        import horovod.tensorflow as hvd$^        dataset = dataset.shard(hvd.size(), hvd.rank())$^    dataset = dataset.map(process_fn, num_parallel_calls=tf.data.experimental.autotune)$^    if cache_path:$^        dataset = dataset.cache(cache_path)$^    dataset = (dataset.window(batch_size, drop_remainder=train_phase).flat_map(batch_fn))$^    if split_dataset:$^        #todo is there a way to get a proper value?$^        dataset = dataset.prefetch(2)$^    else:$^        dataset = dataset.prefetch(config.num_devices)$^    return dataset$^$^def split_audio_file(audio_path,$^                     audio_format=default_format,$^                     batch_size=1,$^                     aggressiveness=3,$^                     outlier_duration_ms=10000,$^                     outlier_batch_size=1,$^                     exception_box=none):$^    def generate_values():$^        frames = read_frames_from_file(audio_path)$^        segments = vad_split(frames, aggressiveness=aggressiveness)$^        for segment in segments:$^            segment_buffer, time_start, time_end = segment$^            samples = pcm_to_np(segment_buffer, audio_format)$^            yield time_start, time_end, samples$^$^    def to_mfccs(time_start, time_end, samples):$^        features, features_len = audio_to_features(samples, audio_format.rate)$^        return time_start, time_end, features, features_len$^$^    def create_batch_set(bs, criteria):$^        return (tf.data.dataset$^                .from_generator(remember_exception(generate_values, exception_box),$^                                output_types=(tf.int32, tf.int32, tf.float32))$^                .map(to_mfccs, num_parallel_calls=tf.data.experimental.autotune)$^                .filter(criteria)$^                .padded_batch(bs, padded_shapes=([], [], [none, config.n_input], [])))$^$^    nds = create_batch_set(batch_size,$^                           lambda start, end, f, fl: end - start <= int(outlier_duration_ms))$^    ods = create_batch_set(outlier_batch_size,$^                           lambda start, end, f, fl: end - start > int(outlier_duration_ms))$^    dataset = nds.concatenate(ods)$^    dataset = dataset.prefetch(config.num_devices)$^    return dataset$^from __future__ import absolute_import, division, print_function$^$^import os$^import sys$^import tensorflow.compat.v1 as tfv1$^$^from attrdict import attrdict$^from xdg import basedirectory as xdg$^from ds_ctcdecoder import alphabet, utf8alphabet$^$^from .flags import flags$^from .gpu import get_available_gpus$^from .logging import log_error, log_warn$^from .helpers import parse_file_size$^from .augmentations import parse_augmentations, normalizesamplerate$^from .io import path_exists_remote$^$^class configsingleton:$^    _config = none$^$^    def __getattr__(self, name):$^        if not configsingleton._config:$^            raise runtimeerror("global configuration not yet initialized.")$^        if not hasattr(configsingleton._config, name):$^            raise runtimeerror("configuration option {} not found in config.".format(name))$^        return configsingleton._config[name]$^$^$^config = configsingleton() # pylint: disable=invalid-name$^$^def initialize_globals():$^    c = attrdict()$^$^    # augmentations$^    c.augmentations = parse_augmentations(flags.augment)$^    if c.augmentations and flags.feature_cache and flags.cache_for_epochs == 0:$^        log_warn('due to current feature-cache settings the exact same sample augmentations of the first '$^                 'epoch will be repeated on all following epochs. this could lead to unintended over-fitting. '$^                 'you could use --cache_for_epochs <n_epochs> to invalidate the cache after a given number of epochs.')$^$^    if flags.normalize_sample_rate:$^        c.augmentations = [normalizesamplerate(flags.audio_sample_rate)] + c['augmentations']$^$^    # caching$^    if flags.cache_for_epochs == 1:$^        log_warn('--cache_for_epochs == 1 is (re-)creating the feature cache on every epoch but will never use it.')$^$^    # read-buffer$^    flags.read_buffer = parse_file_size(flags.read_buffer)$^$^    # set default dropout rates$^    if flags.dropout_rate2 < 0:$^        flags.dropout_rate2 = flags.dropout_rate$^    if flags.dropout_rate3 < 0:$^        flags.dropout_rate3 = flags.dropout_rate$^    if flags.dropout_rate6 < 0:$^        flags.dropout_rate6 = flags.dropout_rate$^$^    # set default checkpoint dir$^    if not flags.checkpoint_dir:$^        flags.checkpoint_dir = xdg.save_data_path(os.path.join('deepspeech', 'checkpoints'))$^$^    if flags.load_train not in ['last', 'best', 'init', 'auto']:$^        flags.load_train = 'auto'$^$^    if flags.load_evaluate not in ['last', 'best', 'auto']:$^        flags.load_evaluate = 'auto'$^$^    # set default summary dir$^    if not flags.summary_dir:$^        flags.summary_dir = xdg.save_data_path(os.path.join('deepspeech', 'summaries'))$^$^    # standard session configuration that'll be used for all new sessions.$^    c.session_config = tfv1.configproto(allow_soft_placement=true, log_device_placement=flags.log_placement,$^                                        inter_op_parallelism_threads=flags.inter_op_parallelism_threads,$^                                        intra_op_parallelism_threads=flags.intra_op_parallelism_threads,$^                                        gpu_options=tfv1.gpuoptions(allow_growth=flags.use_allow_growth))$^$^    # cpu device$^    c.cpu_device = '/cpu:0'$^$^    if flags.horovod:$^        try:$^            import horovod.tensorflow as hvd$^        except importerror as e:$^            print($^                "error importing horovod. did you installed deepspeech with -dnohorovod? "$^                "if you do not want to use horovod, use 'from deepspeech_training import train'")$^            raise e$^$^        hvd.init()$^$^        # pin gpu to be used to process local rank (one gpu per process)$^        c.session_config.gpu_options.visible_device_list = str(hvd.local_rank())$^        c.num_devices = hvd.size()$^        c.is_master_process = true if hvd.rank() == 0 else false$^    else:$^    # # available gpu devices$^        c.available_devices = get_available_gpus(c.session_config)$^$^        # if there is no gpu available, we fall back to cpu based operation$^        if not c.available_devices:$^            c.available_devices = [c.cpu_device]$^$^        c.num_devices = len(c.available_devices)$^$^        # if there are no horovod processes the only one should handled like horovod master$^        c.is_master_process = true$^$^    if flags.bytes_output_mode:$^        c.alphabet = utf8alphabet()$^    else:$^        c.alphabet = alphabet(os.path.abspath(flags.alphabet_config_path))$^$^    # geometric constants$^    # ===================$^$^    # for an explanation of the meaning of the geometric constants, please refer to$^    # doc/geometry.md$^$^    # number of mfcc features$^    c.n_input = 26 # todo: determine this programmatically from the sample rate$^$^    # the number of frames in the context$^    c.n_context = 9 # todo: determine the optimal value using a validation data set$^$^    # number of units in hidden layers$^    c.n_hidden = flags.n_hidden$^$^    c.n_hidden_1 = c.n_hidden$^$^    c.n_hidden_2 = c.n_hidden$^$^    c.n_hidden_5 = c.n_hidden$^$^    # lstm cell state dimension$^    c.n_cell_dim = c.n_hidden$^$^    # the number of units in the third layer, which feeds in to the lstm$^    c.n_hidden_3 = c.n_cell_dim$^$^    # units in the sixth layer = number of characters in the target language plus one$^    c.n_hidden_6 = c.alphabet.getsize() + 1 # +1 for ctc blank label$^$^    # size of audio window in samples$^    if (flags.feature_win_len * flags.audio_sample_rate) % 1000 != 0:$^        log_error('--feature_win_len value ({}) in milliseconds ({}) multiplied '$^                  'by --audio_sample_rate value ({}) must be an integer value. adjust '$^                  'your --feature_win_len value or resample your audio accordingly.'$^                  ''.format(flags.feature_win_len, flags.feature_win_len / 1000, flags.audio_sample_rate))$^        sys.exit(1)$^$^    c.audio_window_samples = flags.audio_sample_rate * (flags.feature_win_len / 1000)$^$^    # stride for feature computations in samples$^    if (flags.feature_win_step * flags.audio_sample_rate) % 1000 != 0:$^        log_error('--feature_win_step value ({}) in milliseconds ({}) multiplied '$^                  'by --audio_sample_rate value ({}) must be an integer value. adjust '$^                  'your --feature_win_step value or resample your audio accordingly.'$^                  ''.format(flags.feature_win_step, flags.feature_win_step / 1000, flags.audio_sample_rate))$^        sys.exit(1)$^$^    c.audio_step_samples = flags.audio_sample_rate * (flags.feature_win_step / 1000)$^$^    if flags.one_shot_infer:$^        if not path_exists_remote(flags.one_shot_infer):$^            log_error('path specified in --one_shot_infer is not a valid file.')$^            sys.exit(1)$^$^    if flags.train_cudnn and flags.load_cudnn:$^        log_error('trying to use --train_cudnn, but --load_cudnn '$^                  'was also specified. the --load_cudnn flag is only '$^                  'needed when converting a cudnn rnn checkpoint to '$^                  'a cpu-capable graph. if your system is capable of '$^                  'using cudnn rnn, you can just specify the cudnn rnn '$^                  'checkpoint normally with --save_checkpoint_dir.')$^        sys.exit(1)$^$^    # if separate save and load flags were not specified, default to load and save$^    # from the same dir.$^    if not flags.save_checkpoint_dir:$^        flags.save_checkpoint_dir = flags.checkpoint_dir$^$^    if not flags.load_checkpoint_dir:$^        flags.load_checkpoint_dir = flags.checkpoint_dir$^$^    configsingleton._config = c # pylint: disable=protected-access$^import requests$^import progressbar$^$^from os import path, makedirs$^from .io import open_remote, path_exists_remote, is_remote_path$^$^simple_bar = ['progress ', progressbar.bar(), ' ', progressbar.percentage(), ' completed']$^$^def maybe_download(archive_name, target_dir, archive_url):$^    # if archive file does not exist, download it...$^    archive_path = path.join(target_dir, archive_name)$^$^    if not is_remote_path(target_dir) and not path.exists(target_dir):$^        print('no path "%s" - creating ...' % target_dir)$^        makedirs(target_dir)$^$^    if not path_exists_remote(archive_path):$^        print('no archive "%s" - downloading...' % archive_path)$^        req = requests.get(archive_url, stream=true)$^        total_size = int(req.headers.get('content-length', 0))$^        done = 0$^        with open_remote(archive_path, 'wb') as f:$^            bar = progressbar.progressbar(max_value=total_size if total_size > 0 else progressbar.unknownlength, widgets=simple_bar)$^$^            for data in req.iter_content(1024*1024):$^                done += len(data)$^                f.write(data)$^                bar.update(done)$^    else:$^        print('found archive "%s" - not downloading.' % archive_path)$^    return archive_path$^# -*- coding: utf-8 -*-$^import os$^import io$^import csv$^import json$^import tarfile$^$^from pathlib import path$^from functools import partial$^$^from .helpers import kilobyte, megabyte, gigabyte, interleaved, lenmap$^from .audio import ($^    sample,$^    audio_type_pcm,$^    audio_type_opus,$^    serializable_audio_types,$^    get_loadable_audio_type_from_extension,$^    write_wav$^)$^from .io import open_remote, is_remote_path$^$^big_endian = 'big'$^int_size = 4$^bigint_size = 2 * int_size$^magic = b'sampledb'$^$^buffer_size = 1 * megabyte$^reverse_buffer_size = 16 * kilobyte$^cache_size = 1 * gigabyte$^$^schema_key = 'schema'$^content_key = 'content'$^mime_type_key = 'mime-type'$^mime_type_text = 'text/plain'$^content_type_speech = 'speech'$^content_type_transcript = 'transcript'$^$^$^class labeledsample(sample):$^    """in-memory labeled audio sample representing an utterance.$^    derived from util.audio.sample and used by sample collection readers and writers."""$^    def __init__(self, audio_type, raw_data, transcript, audio_format=none, sample_id=none):$^        """$^        parameters$^        ----------$^        audio_type : str$^            see util.audio.sample.__init__ .$^        raw_data : binary$^            see util.audio.sample.__init__ .$^        transcript : str$^            transcript of the sample's utterance$^        audio_format : tuple$^            see util.audio.sample.__init__ .$^        sample_id : str$^            tracking id - should indicate sample's origin as precisely as possible.$^            it is typically assigned by collection readers.$^        """$^        super().__init__(audio_type, raw_data, audio_format=audio_format, sample_id=sample_id)$^        self.transcript = transcript$^$^$^class packedsample:$^    """$^    a wrapper that we can carry around in an iterator and pass to a child process in order to$^    have the child process do the loading/unpacking of the sample, allowing for parallel file$^    i/o.$^    """$^    def __init__(self, filename, audio_type, label):$^        self.filename = filename$^        self.audio_type = audio_type$^        self.label = label$^$^    def unpack(self):$^        with open_remote(self.filename, 'rb') as audio_file:$^            data = audio_file.read()$^        if self.label is none:$^            s = sample(self.audio_type, data, sample_id=self.filename)$^        s = labeledsample(self.audio_type, data, self.label, sample_id=self.filename)$^        return s$^$^$^def unpack_maybe(sample):$^    """$^    loads the supplied sample from disk (or the network) if the audio isn't loaded in to memory already.$^    """$^    if hasattr(sample, 'unpack'):$^        realized_sample = sample.unpack()$^    else:$^        realized_sample = sample$^    return realized_sample$^$^$^def load_sample(filename, label=none):$^    """$^    loads audio-file as a (labeled or unlabeled) sample$^$^    parameters$^    ----------$^    filename : str$^        filename of the audio-file to load as sample$^    label : str$^        label (transcript) of the sample.$^        if none: returned result.unpack() will return util.audio.sample instance$^        otherwise: returned result.unpack()  util.sample_collections.labeledsample instance$^$^    returns$^    -------$^    util.sample_collections.packedsample, a wrapper object, on which calling unpack() will return$^        util.audio.sample instance if label is none, else util.sample_collections.labeledsample instance$^    """$^    ext = os.path.splitext(filename)[1].lower()$^    audio_type = get_loadable_audio_type_from_extension(ext)$^    if audio_type is none:$^        raise valueerror('unknown audio type extension "{}"'.format(ext))$^    return packedsample(filename, audio_type, label)$^$^$^class directsdbwriter:$^    """sample collection writer for creating a sample db (sdb) file"""$^    def __init__(self,$^                 sdb_filename,$^                 buffering=buffer_size,$^                 audio_type=audio_type_opus,$^                 bitrate=none,$^                 id_prefix=none,$^                 labeled=true):$^        """$^        parameters$^        ----------$^        sdb_filename : str$^            path to the sdb file to write$^        buffering : int$^            write-buffer size to use while writing the sdb file$^        audio_type : str$^            see util.audio.sample.__init__ .$^        bitrate : int$^            bitrate for sample-compression in case of lossy audio_type (e.g. audio_type_opus)$^        id_prefix : str$^            prefix for ids of written samples - defaults to sdb_filename$^        labeled : bool or none$^            if true: writes labeled samples (util.sample_collections.labeledsample) only.$^            if false: ignores transcripts (if available) and writes (unlabeled) util.audio.sample instances.$^        """$^        self.sdb_filename = sdb_filename$^        self.id_prefix = sdb_filename if id_prefix is none else id_prefix$^        self.labeled = labeled$^        if audio_type not in serializable_audio_types:$^            raise valueerror('audio type "{}" not supported'.format(audio_type))$^        self.audio_type = audio_type$^        self.bitrate = bitrate$^        self.sdb_file = open_remote(sdb_filename, 'wb', buffering=buffering)$^        self.offsets = []$^        self.num_samples = 0$^$^        self.sdb_file.write(magic)$^$^        schema_entries = [{content_key: content_type_speech, mime_type_key: audio_type}]$^        if self.labeled:$^            schema_entries.append({content_key: content_type_transcript, mime_type_key: mime_type_text})$^        meta_data = {schema_key: schema_entries}$^        meta_data = json.dumps(meta_data).encode()$^        self.write_big_int(len(meta_data))$^        self.sdb_file.write(meta_data)$^$^        self.offset_samples = self.sdb_file.tell()$^        self.sdb_file.seek(2 * bigint_size, 1)$^$^    def write_int(self, n):$^        return self.sdb_file.write(n.to_bytes(int_size, big_endian))$^$^    def write_big_int(self, n):$^        return self.sdb_file.write(n.to_bytes(bigint_size, big_endian))$^$^    def __enter__(self):$^        return self$^$^    def add(self, sample):$^        def to_bytes(n):$^            return n.to_bytes(int_size, big_endian)$^        sample.change_audio_type(self.audio_type, bitrate=self.bitrate)$^        opus = sample.audio.getbuffer()$^        opus_len = to_bytes(len(opus))$^        if self.labeled:$^            transcript = sample.transcript.encode()$^            transcript_len = to_bytes(len(transcript))$^            entry_len = to_bytes(len(opus_len) + len(opus) + len(transcript_len) + len(transcript))$^            buffer = b''.join([entry_len, opus_len, opus, transcript_len, transcript])$^        else:$^            entry_len = to_bytes(len(opus_len) + len(opus))$^            buffer = b''.join([entry_len, opus_len, opus])$^        self.offsets.append(self.sdb_file.tell())$^        self.sdb_file.write(buffer)$^        sample.sample_id = '{}:{}'.format(self.id_prefix, self.num_samples)$^        self.num_samples += 1$^        return sample.sample_id$^$^    def close(self):$^        if self.sdb_file is none:$^            return$^        offset_index = self.sdb_file.tell()$^        self.sdb_file.seek(self.offset_samples)$^        self.write_big_int(offset_index - self.offset_samples - bigint_size)$^        self.write_big_int(self.num_samples)$^$^        self.sdb_file.seek(offset_index + bigint_size)$^        self.write_big_int(self.num_samples)$^        for offset in self.offsets:$^            self.write_big_int(offset)$^        offset_end = self.sdb_file.tell()$^        self.sdb_file.seek(offset_index)$^        self.write_big_int(offset_end - offset_index - bigint_size)$^        self.sdb_file.close()$^        self.sdb_file = none$^$^    def __len__(self):$^        return len(self.offsets)$^$^    def __exit__(self, exc_type, exc_val, exc_tb):$^        self.close()$^$^$^class sdb:  # pylint: disable=too-many-instance-attributes$^    """sample collection reader for reading a sample db (sdb) file"""$^    def __init__(self,$^                 sdb_filename,$^                 buffering=buffer_size,$^                 id_prefix=none,$^                 labeled=true,$^                 reverse=false):$^        """$^        parameters$^        ----------$^        sdb_filename : str$^            path to the sdb file to read samples from$^        buffering : int$^            read-ahead buffer size to use while reading the sdb file in normal order. fixed to 16kb if in reverse-mode.$^        id_prefix : str$^            prefix for ids of read samples - defaults to sdb_filename$^        labeled : bool or none$^            if true: reads util.sample_collections.labeledsample instances. fails, if sdb file provides no transcripts.$^            if false: ignores transcripts (if available) and reads (unlabeled) util.audio.sample instances.$^            if none: automatically determines if sdb schema has transcripts$^            (reading util.sample_collections.labeledsample instances) or not (reading util.audio.sample instances).$^        """$^        self.sdb_filename = sdb_filename$^        self.id_prefix = sdb_filename if id_prefix is none else id_prefix$^        self.sdb_file = open_remote(sdb_filename, 'rb', buffering=reverse_buffer_size if reverse else buffering)$^        self.offsets = []$^        if self.sdb_file.read(len(magic)) != magic:$^            raise runtimeerror('no sample database')$^        meta_chunk_len = self.read_big_int()$^        self.meta = json.loads(self.sdb_file.read(meta_chunk_len).decode())$^        if schema_key not in self.meta:$^            raise runtimeerror('missing schema')$^        self.schema = self.meta[schema_key]$^$^        speech_columns = self.find_columns(content=content_type_speech, mime_type=serializable_audio_types)$^        if not speech_columns:$^            raise runtimeerror('no speech data (missing in schema)')$^        self.speech_index = speech_columns[0]$^        self.audio_type = self.schema[self.speech_index][mime_type_key]$^$^        self.transcript_index = none$^        if labeled is not false:$^            transcript_columns = self.find_columns(content=content_type_transcript, mime_type=mime_type_text)$^            if transcript_columns:$^                self.transcript_index = transcript_columns[0]$^            else:$^                if labeled is true:$^                    raise runtimeerror('no transcript data (missing in schema)')$^$^        sample_chunk_len = self.read_big_int()$^        self.sdb_file.seek(sample_chunk_len + bigint_size, 1)$^        num_samples = self.read_big_int()$^        for _ in range(num_samples):$^            self.offsets.append(self.read_big_int())$^        if reverse:$^            self.offsets.reverse()$^$^    def read_int(self):$^        return int.from_bytes(self.sdb_file.read(int_size), big_endian)$^$^    def read_big_int(self):$^        return int.from_bytes(self.sdb_file.read(bigint_size), big_endian)$^$^    def find_columns(self, content=none, mime_type=none):$^        criteria = []$^        if content is not none:$^            criteria.append((content_key, content))$^        if mime_type is not none:$^            criteria.append((mime_type_key, mime_type))$^        if len(criteria) == 0:$^            raise valueerror('at least one of "content" or "mime-type" has to be provided')$^        matches = []$^        for index, column in enumerate(self.schema):$^            matched = 0$^            for field, value in criteria:$^                if column[field] == value or (isinstance(value, list) and column[field] in value):$^                    matched += 1$^            if matched == len(criteria):$^                matches.append(index)$^        return matches$^$^    def read_row(self, row_index, *columns):$^        columns = list(columns)$^        column_data = [none] * len(columns)$^        found = 0$^        if not 0 <= row_index < len(self.offsets):$^            raise valueerror('wrong sample index: {} - has to be between 0 and {}'$^                             .format(row_index, len(self.offsets) - 1))$^        self.sdb_file.seek(self.offsets[row_index] + int_size)$^        for index in range(len(self.schema)):$^            chunk_len = self.read_int()$^            if index in columns:$^                column_data[columns.index(index)] = self.sdb_file.read(chunk_len)$^                found += 1$^                if found == len(columns):$^                    return tuple(column_data)$^            else:$^                self.sdb_file.seek(chunk_len, 1)$^        return tuple(column_data)$^$^    def __getitem__(self, i):$^        sample_id = '{}:{}'.format(self.id_prefix, i)$^        if self.transcript_index is none:$^            [audio_data] = self.read_row(i, self.speech_index)$^            return sample(self.audio_type, audio_data, sample_id=sample_id)$^        audio_data, transcript = self.read_row(i, self.speech_index, self.transcript_index)$^        transcript = transcript.decode()$^        return labeledsample(self.audio_type, audio_data, transcript, sample_id=sample_id)$^$^    def __iter__(self):$^        for i in range(len(self.offsets)):$^            yield self[i]$^$^    def __len__(self):$^        return len(self.offsets)$^$^    def close(self):$^        if self.sdb_file is not none:$^            self.sdb_file.close()$^$^    def __del__(self):$^        self.close()$^$^$^class csvwriter:  # pylint: disable=too-many-instance-attributes$^    """sample collection writer for writing a csv data-set and all its referenced wav samples"""$^    def __init__(self,$^                 csv_filename,$^                 absolute_paths=false,$^                 labeled=true):$^        """$^        parameters$^        ----------$^        csv_filename : str$^            path to the csv file to write.$^            will create a directory (csv-filename without extension) next to it and fail if it already exists.$^        absolute_paths : bool$^            if paths in csv file should be absolute instead of relative to the csv file's parent directory.$^        labeled : bool or none$^            if true: writes labeled samples (util.sample_collections.labeledsample) only.$^            if false: ignores transcripts (if available) and writes (unlabeled) util.audio.sample instances.$^        $^        currently only works with local files (not gs:// or hdfs://...)$^        """$^        self.csv_filename = path(csv_filename)$^        self.csv_base_dir = self.csv_filename.parent.resolve().absolute()$^        self.set_name = self.csv_filename.stem$^        self.csv_dir = self.csv_base_dir / self.set_name$^        if self.csv_dir.exists():$^            raise runtimeerror('"{}" already existing'.format(self.csv_dir))$^        os.mkdir(str(self.csv_dir))$^        self.absolute_paths = absolute_paths$^        fieldnames = ['wav_filename', 'wav_filesize']$^        self.labeled = labeled$^        if labeled:$^            fieldnames.append('transcript')$^        self.csv_file = open_remote(csv_filename, 'w', encoding='utf-8', newline='')$^        self.csv_writer = csv.dictwriter(self.csv_file, fieldnames=fieldnames)$^        self.csv_writer.writeheader()$^        self.counter = 0$^$^    def __enter__(self):$^        return self$^$^    def add(self, sample):$^        sample_filename = self.csv_dir / 'sample{0:08d}.wav'.format(self.counter)$^        self.counter += 1$^        sample.change_audio_type(audio_type_pcm)$^        write_wav(str(sample_filename), sample.audio, audio_format=sample.audio_format)$^        sample.sample_id = str(sample_filename.relative_to(self.csv_base_dir))$^        row = {$^            'wav_filename': str(sample_filename.absolute()) if self.absolute_paths else sample.sample_id,$^            'wav_filesize': sample_filename.stat().st_size$^        }$^        if self.labeled:$^            row['transcript'] = sample.transcript$^        self.csv_writer.writerow(row)$^        return sample.sample_id$^$^    def close(self):$^        if self.csv_file:$^            self.csv_file.close()$^$^    def __len__(self):$^        return self.counter$^$^    def __exit__(self, exc_type, exc_val, exc_tb):$^        self.close()$^$^$^class tarwriter:  # pylint: disable=too-many-instance-attributes$^    """sample collection writer for writing a csv data-set and all its referenced wav samples to a tar file."""$^    def __init__(self,$^                 tar_filename,$^                 gz=false,$^                 labeled=true,$^                 include=none):$^        """$^        parameters$^        ----------$^        tar_filename : str$^            path to the tar file to write.$^        gz : bool$^            if to compress tar file with gzip.$^        labeled : bool or none$^            if true: writes labeled samples (util.sample_collections.labeledsample) only.$^            if false: ignores transcripts (if available) and writes (unlabeled) util.audio.sample instances.$^        include : str[]$^            list of files to include into tar root.$^$^        currently only works with local files (not gs:// or hdfs://...)$^        """$^        self.tar = tarfile.open(tar_filename, 'w:gz' if gz else 'w')$^        samples_dir = tarfile.tarinfo('samples')$^        samples_dir.type = tarfile.dirtype$^        self.tar.addfile(samples_dir)$^        if include:$^            for include_path in include:$^                self.tar.add(include_path, recursive=false, arcname=path(include_path).name)$^        fieldnames = ['wav_filename', 'wav_filesize']$^        self.labeled = labeled$^        if labeled:$^            fieldnames.append('transcript')$^        self.csv_file = io.stringio()$^        self.csv_writer = csv.dictwriter(self.csv_file, fieldnames=fieldnames)$^        self.csv_writer.writeheader()$^        self.counter = 0$^$^    def __enter__(self):$^        return self$^$^    def add(self, sample):$^        sample_filename = 'samples/sample{0:08d}.wav'.format(self.counter)$^        self.counter += 1$^        sample.change_audio_type(audio_type_pcm)$^        sample_file = io.bytesio()$^        write_wav(sample_file, sample.audio, audio_format=sample.audio_format)$^        sample_size = sample_file.tell()$^        sample_file.seek(0)$^        sample_tar = tarfile.tarinfo(sample_filename)$^        sample_tar.size = sample_size$^        self.tar.addfile(sample_tar, sample_file)$^        row = {$^            'wav_filename': sample_filename,$^            'wav_filesize': sample_size$^        }$^        if self.labeled:$^            row['transcript'] = sample.transcript$^        self.csv_writer.writerow(row)$^        return sample_filename$^$^    def close(self):$^        if self.csv_file and self.tar:$^            csv_tar = tarfile.tarinfo('samples.csv')$^            csv_tar.size = self.csv_file.tell()$^            self.csv_file.seek(0)$^            self.tar.addfile(csv_tar, io.bytesio(self.csv_file.read().encode('utf8')))$^        if self.tar:$^            self.tar.close()$^$^    def __len__(self):$^        return self.counter$^$^    def __exit__(self, exc_type, exc_val, exc_tb):$^        self.close()$^$^$^class samplelist:$^    """sample collection base class with samples loaded from a list of in-memory paths."""$^    def __init__(self, samples, labeled=true, reverse=false):$^        """$^        parameters$^        ----------$^        samples : iterable of tuples of the form (sample_filename, filesize [, transcript])$^            file-size is used for ordering the samples; transcript has to be provided if labeled=true$^        labeled : bool or none$^            if true: reads labeledsample instances.$^            if false: ignores transcripts (if available) and reads (unlabeled) util.audio.sample instances.$^        reverse : bool$^            if the order of the samples should be reversed$^        """$^        self.labeled = labeled$^        self.samples = list(samples)$^        self.samples.sort(key=lambda r: r[1], reverse=reverse)$^$^    def __getitem__(self, i):$^        sample_spec = self.samples[i]$^        return load_sample(sample_spec[0], label=sample_spec[2] if self.labeled else none)$^$^    def __len__(self):$^        return len(self.samples)$^$^$^class csv(samplelist):$^    """sample collection reader for reading a deepspeech csv file$^    automatically orders samples by csv column wav_filesize (if available)."""$^    def __init__(self, csv_filename, labeled=none, reverse=false):$^        """$^        parameters$^        ----------$^        csv_filename : str$^            path to the csv file containing sample audio paths and transcripts$^        labeled : bool or none$^            if true: reads labeledsample instances. fails, if csv file has no transcript column.$^            if false: ignores transcripts (if available) and reads (unlabeled) util.audio.sample instances.$^            if none: automatically determines if csv file has a transcript column$^            (reading util.sample_collections.labeledsample instances) or not (reading util.audio.sample instances).$^        reverse : bool$^            if the order of the samples should be reversed$^        """$^        rows = []$^        with open_remote(csv_filename, 'r', encoding='utf8') as csv_file:$^            reader = csv.dictreader(csv_file)$^            if 'transcript' in reader.fieldnames:$^                if labeled is none:$^                    labeled = true$^            elif labeled:$^                raise runtimeerror('no transcript data (missing csv column)')$^            for row in reader:$^                wav_filename = path(row['wav_filename'])$^                if not wav_filename.is_absolute() and not is_remote_path(row['wav_filename']):$^                    wav_filename = path(csv_filename).parent / wav_filename$^                    wav_filename = str(wav_filename)$^                else:$^                    # pathlib otherwise removes a / from filenames like hdfs://$^                    wav_filename = row['wav_filename']$^                wav_filesize = int(row['wav_filesize']) if 'wav_filesize' in row else 0$^                if labeled:$^                    rows.append((wav_filename, wav_filesize, row['transcript']))$^                else:$^                    rows.append((wav_filename, wav_filesize))$^        super(csv, self).__init__(rows, labeled=labeled, reverse=reverse)$^$^$^def samples_from_source(sample_source, buffering=buffer_size, labeled=none, reverse=false):$^    """$^    loads samples from a sample source file.$^$^    parameters$^    ----------$^    sample_source : str$^        path to the sample source file (sdb or csv)$^    buffering : int$^        read-buffer size to use while reading files$^    labeled : bool or none$^        if true: reads labeledsample instances. fails, if source provides no transcripts.$^        if false: ignores transcripts (if available) and reads (unlabeled) util.audio.sample instances.$^        if none: automatically determines if source provides transcripts$^        (reading util.sample_collections.labeledsample instances) or not (reading util.audio.sample instances).$^    reverse : bool$^        if the order of the samples should be reversed$^$^    returns$^    -------$^    iterable of util.sample_collections.labeledsample or util.audio.sample instances supporting len.$^    """$^    ext = os.path.splitext(sample_source)[1].lower()$^    if ext == '.sdb':$^        return sdb(sample_source, buffering=buffering, labeled=labeled, reverse=reverse)$^    if ext == '.csv':$^        return csv(sample_source, labeled=labeled, reverse=reverse)$^    raise valueerror('unknown file type: "{}"'.format(ext))$^$^$^def samples_from_sources(sample_sources, buffering=buffer_size, labeled=none, reverse=false):$^    """$^    loads and combines samples from a list of source files. sources are combined in an interleaving way to$^    keep default sample order from shortest to longest.$^$^    note that when using distributed training, it is much faster to call this function with single pre-$^    sorted sample source, because this allows for parallelization of the file i/o. (if this function is$^    called with multiple sources, the samples have to be unpacked on a single parent process to allow$^    for reading their durations.)$^$^    parameters$^    ----------$^    sample_sources : list of str$^        paths to sample source files (sdbs or csvs)$^    buffering : int$^        read-buffer size to use while reading files$^    labeled : bool or none$^        if true: reads labeledsample instances. fails, if not all sources provide transcripts.$^        if false: ignores transcripts (if available) and always reads (unlabeled) util.audio.sample instances.$^        if none: reads util.sample_collections.labeledsample instances from sources with transcripts and$^        util.audio.sample instances from sources with no transcripts.$^    reverse : bool$^        if the order of the samples should be reversed$^$^    returns$^    -------$^    iterable of util.sample_collections.packedsample if a single collection is provided, wrapping$^        labeledsample (labeled=true) or util.audio.sample (labeled=false) supporting len$^    or labeledsample / util.audio.sample directly, if multiple collections are provided$^    """$^    sample_sources = list(sample_sources)$^    if len(sample_sources) == 0:$^        raise valueerror('no files')$^    if len(sample_sources) == 1:$^        return samples_from_source(sample_sources[0], buffering=buffering, labeled=labeled, reverse=reverse)$^$^    # if we wish to interleave based on duration, we have to unpack the audio. note that this unpacking should$^    # be done lazily onn the fly so that it respects the limitingpool logic used in the feeding code.$^    cols = [lenmap($^        unpack_maybe, samples_from_source(source, buffering=buffering, labeled=labeled, reverse=reverse))$^        for source in sample_sources]$^$^    return interleaved(*cols, key=lambda s: s.duration, reverse=reverse)$^from __future__ import absolute_import, division, print_function$^$^import os$^import absl.flags$^$^flags = absl.flags.flags$^$^# sphinx-doc: training_ref_flags_start$^def create_flags():$^    # importer$^    # ========$^$^    f = absl.flags$^$^    f.define_string('train_files', '', 'comma separated list of files specifying the dataset used for training. multiple files will get merged. if empty, training will not be run.')$^    f.define_string('dev_files', '', 'comma separated list of files specifying the datasets used for validation. multiple files will get reported separately. if empty, validation will not be run.')$^    f.define_string('test_files', '', 'comma separated list of files specifying the datasets used for testing. multiple files will get reported separately. if empty, the model will not be tested.')$^    f.define_string('metrics_files', '', 'comma separated list of files specifying the datasets used for tracking of metrics (after validation step). currently the only metric is the ctc loss but without affecting the tracking of best validation loss. multiple files will get reported separately. if empty, metrics will not be computed.')$^$^    f.define_string('read_buffer', '1mb', 'buffer-size for reading samples from datasets (supports file-size suffixes kb, mb, gb, tb)')$^    f.define_string('feature_cache', '', 'cache mfcc features to disk to speed up future training runs on the same data. this flag specifies the path where cached features extracted from --train_files will be saved. if empty, or if online augmentation flags are enabled, caching will be disabled.')$^    f.define_integer('cache_for_epochs', 0, 'after how many epochs the feature cache is invalidated again - 0 for "never"')$^$^    f.define_integer('feature_win_len', 32, 'feature extraction audio window length in milliseconds')$^    f.define_integer('feature_win_step', 20, 'feature extraction window step length in milliseconds')$^    f.define_integer('audio_sample_rate', 16000, 'sample rate value expected by model')$^    f.define_boolean('normalize_sample_rate', true, 'normalize sample rate of all train_files to --audio_sample_rate')$^$^    # data augmentation$^    # ================$^$^    f.define_multi_string('augment', none, 'specifies an augmentation of the training samples. format is "--augment operation[param1=value1, ...]"')$^$^    # global constants$^    # ================$^$^    f.define_integer('epochs', 75, 'how many epochs (complete runs through the train files) to train for')$^$^    f.define_float('dropout_rate', 0.05, 'dropout rate for feedforward layers')$^    f.define_float('dropout_rate2', -1.0, 'dropout rate for layer 2 - defaults to dropout_rate')$^    f.define_float('dropout_rate3', -1.0, 'dropout rate for layer 3 - defaults to dropout_rate')$^    f.define_float('dropout_rate4', 0.0, 'dropout rate for layer 4 - defaults to 0.0')$^    f.define_float('dropout_rate5', 0.0, 'dropout rate for layer 5 - defaults to 0.0')$^    f.define_float('dropout_rate6', -1.0, 'dropout rate for layer 6 - defaults to dropout_rate')$^$^    f.define_float('relu_clip', 20.0, 'relu clipping value for non-recurrent layers')$^$^    # adam optimizer(http://arxiv.org/abs/1412.6980) parameters$^$^    f.define_float('beta1', 0.9, 'beta 1 parameter of adam optimizer')$^    f.define_float('beta2', 0.999, 'beta 2 parameter of adam optimizer')$^    f.define_float('epsilon', 1e-8, 'epsilon parameter of adam optimizer')$^    f.define_float('learning_rate', 0.001, 'learning rate of adam optimizer')$^$^    # batch sizes$^$^    f.define_integer('train_batch_size', 1, 'number of elements in a training batch')$^    f.define_integer('dev_batch_size', 1, 'number of elements in a validation batch')$^    f.define_integer('test_batch_size', 1, 'number of elements in a test batch')$^$^    f.define_integer('export_batch_size', 1, 'number of elements per batch on the exported graph')$^$^    # performance$^$^    f.define_integer('inter_op_parallelism_threads', 0, 'number of inter-op parallelism threads - see tf.configproto for more details. use of this flag is unsupported')$^    f.define_integer('intra_op_parallelism_threads', 0, 'number of intra-op parallelism threads - see tf.configproto for more details. use of this flag is unsupported')$^    f.define_boolean('use_allow_growth', false, 'use allow growth flag which will allocate only required amount of gpu memory and prevent full allocation of available gpu memory')$^    f.define_boolean('load_cudnn', false, 'specifying this flag allows one to convert a cudnn rnn checkpoint to a checkpoint capable of running on a cpu graph.')$^    f.define_boolean('train_cudnn', false, 'use cudnn rnn backend for training on gpu. note that checkpoints created with this flag can only be used with cudnn rnn, i.e. fine tuning on a cpu device will not work')$^    f.define_boolean('automatic_mixed_precision', false, 'whether to allow automatic mixed precision training. use of this flag is unsupported. checkpoints created with automatic mixed precision training will not be usable without mixed precision.')$^$^    f.define_boolean('horovod', false, 'use horovod for training on multiple gpus')$^$^    # sample limits$^$^    f.define_integer('limit_train', 0, 'maximum number of elements to use from train set - 0 means no limit')$^    f.define_integer('limit_dev', 0, 'maximum number of elements to use from validation set - 0 means no limit')$^    f.define_integer('limit_test', 0, 'maximum number of elements to use from test set - 0 means no limit')$^$^    # sample order$^$^    f.define_boolean('reverse_train', false, 'if to reverse sample order of the train set')$^    f.define_boolean('reverse_dev', false, 'if to reverse sample order of the dev set')$^    f.define_boolean('reverse_test', false, 'if to reverse sample order of the test set')$^$^    # checkpointing$^$^    f.define_string('checkpoint_dir', '', 'directory from which checkpoints are loaded and to which they are saved - defaults to directory "deepspeech/checkpoints" within user\'s data home specified by the xdg base directory specification')$^    f.define_string('load_checkpoint_dir', '', 'directory in which checkpoints are stored - defaults to directory "deepspeech/checkpoints" within user\'s data home specified by the xdg base directory specification')$^    f.define_string('save_checkpoint_dir', '', 'directory to which checkpoints are saved - defaults to directory "deepspeech/checkpoints" within user\'s data home specified by the xdg base directory specification')$^    f.define_integer('checkpoint_secs', 600, 'checkpoint saving interval in seconds')$^    f.define_integer('max_to_keep', 5, 'number of checkpoint files to keep - default value is 5')$^    f.define_string('load_train', 'auto', 'what checkpoint to load before starting the training process. "last" for loading most recent epoch checkpoint, "best" for loading best validation loss checkpoint, "init" for initializing a new checkpoint, "auto" for trying several options.')$^    f.define_string('load_evaluate', 'auto', 'what checkpoint to load for evaluation tasks (test epochs, model export, single file inference, etc). "last" for loading most recent epoch checkpoint, "best" for loading best validation loss checkpoint, "auto" for trying several options.')$^$^    # transfer learning$^$^    f.define_integer('drop_source_layers', 0, 'single integer for how many layers to drop from source model (to drop just output == 1, drop penultimate and output ==2, etc)')$^$^    # exporting$^$^    f.define_string('export_dir', '', 'directory in which exported models are stored - if omitted, the model won\'t get exported')$^    f.define_boolean('remove_export', false, 'whether to remove old exported models')$^    f.define_boolean('export_tflite', false, 'export a graph ready for tf lite engine')$^    f.define_integer('n_steps', 16, 'how many timesteps to process at once by the export graph, higher values mean more latency')$^    f.define_boolean('export_zip', false, 'export a tflite model and package with lm and info.json')$^    f.define_string('export_file_name', 'output_graph', 'name for the exported model file name')$^    f.define_integer('export_beam_width', 500, 'default beam width to embed into exported graph')$^$^    # model metadata$^$^    f.define_string('export_author_id', 'author', 'author of the exported model. github user or organization name used to uniquely identify the author of this model')$^    f.define_string('export_model_name', 'model', 'name of the exported model. must not contain forward slashes.')$^    f.define_string('export_model_version', '0.0.1', 'semantic version of the exported model. see https://semver.org/. this is fully controlled by you as author of the model and has no required connection with deepspeech versions')$^$^    def str_val_equals_help(name, val_desc):$^        f.define_string(name, '<{}>'.format(val_desc), val_desc)$^$^    str_val_equals_help('export_contact_info', 'public contact information of the author. can be an email address, or a link to a contact form, issue tracker, or discussion forum. must provide a way to reach the model authors')$^    str_val_equals_help('export_license', 'spdx identifier of the license of the exported model. see https://spdx.org/licenses/. if the license does not have an spdx identifier, use the license name.')$^    str_val_equals_help('export_language', 'language the model was trained on - ietf bcp 47 language tag including at least language, script and region subtags. e.g. "en-latn-uk" or "de-latn-de" or "cmn-hans-cn". include as much info as you can without loss of precision. for example, if a model is trained on scottish english, include the variant subtag: "en-latn-gb-scotland".')$^    str_val_equals_help('export_min_ds_version', 'minimum deepspeech version (inclusive) the exported model is compatible with')$^    str_val_equals_help('export_max_ds_version', 'maximum deepspeech version (inclusive) the exported model is compatible with')$^    str_val_equals_help('export_description', 'freeform description of the model being exported. markdown accepted. you can also leave this flag unchanged and edit the generated .md file directly. useful things to describe are demographic and acoustic characteristics of the data used to train the model, any architectural changes, names of public datasets that were used when applicable, hyperparameters used for training, evaluation results on standard benchmark datasets, etc.')$^$^    # reporting$^$^    f.define_integer('log_level', 1, 'log level for console logs - 0: debug, 1: info, 2: warn, 3: error')$^    f.define_boolean('show_progressbar', true, 'show progress for training, validation and testing processes. log level should be > 0.')$^$^    f.define_boolean('log_placement', false, 'whether to log device placement of the operators to the console')$^    f.define_integer('report_count', 5, 'number of phrases for each of best wer, median wer and worst wer to print out during a wer report')$^$^    f.define_string('summary_dir', '', 'target directory for tensorboard summaries - defaults to directory "deepspeech/summaries" within user\'s data home specified by the xdg base directory specification')$^$^    f.define_string('test_output_file', '', 'path to a file to save all src/decoded/distance/loss tuples generated during a test epoch')$^$^    # geometry$^$^    f.define_integer('n_hidden', 2048, 'layer width to use when initialising layers')$^    f.define_boolean('layer_norm', false, 'wether to use layer-normalization after each fully-connected layer (except the last one)')$^$^    # initialization$^$^    f.define_integer('random_seed', 4568, 'default random seed that is used to initialize variables')$^$^    # early stopping$^$^    f.define_boolean('early_stop', false, 'enable early stopping mechanism over validation dataset. if validation is not being run, early stopping is disabled.')$^    f.define_integer('es_epochs', 25, 'number of epochs with no improvement after which training will be stopped. loss is not stored in the checkpoint so when checkpoint is revived it starts the loss calculation from start at that point')$^    f.define_float('es_min_delta', 0.05, 'minimum change in loss to qualify as an improvement. this value will also be used in reduce learning rate on plateau')$^$^    # reduce learning rate on plateau$^$^    f.define_boolean('reduce_lr_on_plateau', false, 'enable reducing the learning rate if a plateau is reached. this is the case if the validation loss did not improve for some epochs.')$^    f.define_integer('plateau_epochs', 10, 'number of epochs to consider for rlrop. has to be smaller than es_epochs from early stopping')$^    f.define_float('plateau_reduction', 0.1, 'multiplicative factor to apply to the current learning rate if a plateau has occurred.')$^    f.define_boolean('force_initialize_learning_rate', false, 'force re-initialization of learning rate which was previously reduced.')$^$^    # decoder$^$^    f.define_boolean('bytes_output_mode', false, 'enable bytes output mode mode. when this is used the model outputs utf-8 byte values directly rather than using an alphabet mapping. the --alphabet_config_path option will be ignored. see the training documentation for more details.')$^    f.define_string('alphabet_config_path', 'data/alphabet.txt', 'path to the configuration file specifying the alphabet used by the network. see the comment in data/alphabet.txt for a description of the format.')$^    f.define_string('scorer_path', '', 'path to the external scorer file.')$^    f.define_alias('scorer', 'scorer_path')$^    f.define_integer('beam_width', 1024, 'beam width used in the ctc decoder when building candidate transcriptions')$^    f.define_float('lm_alpha', 0.931289039105002, 'the alpha hyperparameter of the ctc decoder. language model weight.')$^    f.define_float('lm_beta', 1.1834137581510284, 'the beta hyperparameter of the ctc decoder. word insertion weight.')$^    f.define_float('cutoff_prob', 1.0, 'only consider characters until this probability mass is reached. 1.0 = disabled.')$^    f.define_integer('cutoff_top_n', 300, 'only process this number of characters sorted by probability mass for each time step. if bigger than alphabet size, disabled.')$^$^    # inference mode$^$^    f.define_string('one_shot_infer', '', 'one-shot inference mode: specify a wav file and the script will load the checkpoint and perform inference on it.')$^$^    # optimizer mode$^$^    f.define_float('lm_alpha_max', 5, 'the maximum of the alpha hyperparameter of the ctc decoder explored during hyperparameter optimization. language model weight.')$^    f.define_float('lm_beta_max', 5, 'the maximum beta hyperparameter of the ctc decoder explored during hyperparameter optimization. word insertion weight.')$^    f.define_integer('n_trials', 2400, 'the number of trials to run during hyperparameter optimization.')$^$^    # register validators for paths which require a file to be specified$^$^    f.register_validator('alphabet_config_path',$^                         os.path.isfile,$^                         message='the file pointed to by --alphabet_config_path must exist and be readable.')$^$^    f.register_validator('one_shot_infer',$^                         lambda value: not value or os.path.isfile(value),$^                         message='the file pointed to by --one_shot_infer must exist and be readable.')$^$^# sphinx-doc: training_ref_flags_end$^"""$^a set of i/o utils that allow us to open files on remote storage as if they were present locally and access$^into hdfs storage using tensorflow's c++ filestream api.$^currently only includes wrappers for google's gcs, but this can easily be expanded for aws s3 buckets.$^"""$^import os$^from tensorflow.io import gfile$^$^$^def is_remote_path(path):$^    """$^    returns true iff the path is one of the remote formats that this$^    module supports$^    """$^    return path.startswith('gs://') or path.startswith('hdfs://')$^$^$^def path_exists_remote(path):$^    """$^    wrapper that allows existance check of local and remote paths like$^    `gs://...`$^    """$^    if is_remote_path(path):$^        return gfile.exists(path)$^    return os.path.exists(path)$^$^$^def copy_remote(src, dst, overwrite=false):$^    """$^    allows us to copy a file from local to remote or vice versa$^    """$^    return gfile.copy(src, dst, overwrite)$^$^$^def open_remote(path, mode='r', buffering=-1, encoding=none, newline=none, closefd=true, opener=none):$^    """$^    wrapper around open() method that can handle remote paths like `gs://...`$^    off google cloud using tensorflow's io helpers.$^$^    buffering, encoding, newline, closefd, and opener are ignored for remote files$^$^    this enables us to do:$^    with open_remote('gs://.....', mode='w+') as f:$^        do something with the file f, whether or not we have local access to it$^    """$^    if is_remote_path(path):$^        return gfile.gfile(path, mode=mode)$^    return open(path, mode, buffering=buffering, encoding=encoding, newline=newline, closefd=closefd, opener=opener)$^$^$^def isdir_remote(path):$^    """$^    wrapper to check if remote and local paths are directories$^    """$^    if is_remote_path(path):$^        return gfile.isdir(path)$^    return os.path.isdir(path)$^$^$^def listdir_remote(path):$^    """$^    wrapper to list paths in local dirs (alternative to using a glob, i suppose)$^    """$^    if is_remote_path(path):$^        return gfile.listdir(path)$^    return os.listdir(path)$^$^$^def glob_remote(filename):$^    """$^    wrapper that provides globs on local and remote paths like `gs://...`$^    """$^    return gfile.glob(filename)$^$^$^def remove_remote(filename):$^    """$^    wrapper that can remove local and remote files like `gs://...`$^    """$^    # conditional import$^    return gfile.remove(filename)$^import argparse$^import importlib$^import os$^import re$^import sys$^$^from .helpers import secs_to_hours$^from collections import counter$^$^def get_counter():$^    return counter({'all': 0, 'failed': 0, 'invalid_label': 0, 'too_short': 0, 'too_long': 0, 'imported_time': 0, 'total_time': 0})$^$^def get_imported_samples(counter):$^    return counter['all'] - counter['failed'] - counter['too_short'] - counter['too_long'] - counter['invalid_label']$^$^def print_import_report(counter, sample_rate, max_secs):$^    print('imported %d samples.' % (get_imported_samples(counter)))$^    if counter['failed'] > 0:$^        print('skipped %d samples that failed upon conversion.' % counter['failed'])$^    if counter['invalid_label'] > 0:$^        print('skipped %d samples that failed on transcript validation.' % counter['invalid_label'])$^    if counter['too_short'] > 0:$^        print('skipped %d samples that were too short to match the transcript.' % counter['too_short'])$^    if counter['too_long'] > 0:$^        print('skipped %d samples that were longer than %d seconds.' % (counter['too_long'], max_secs))$^    print('final amount of imported audio: %s from %s.' % (secs_to_hours(counter['imported_time'] / sample_rate), secs_to_hours(counter['total_time'] / sample_rate)))$^$^def get_importers_parser(description):$^    parser = argparse.argumentparser(description=description)$^    parser.add_argument('--validate_label_locale', help='path to a python file defining a |validate_label| function for your locale. warning: this will add this file\'s directory into pythonpath.')$^    return parser$^$^def get_validate_label(args):$^    """$^    expects an argparse.namespace argument to search for validate_label_locale parameter.$^    if found, this will modify python's library search path and add the directory of the$^    file pointed by the validate_label_locale argument.$^$^    :param args: the importer's cli argument object$^    :type args: argparse.namespace$^$^    :return: the user-supplied validate_label function$^    :type: function$^    """$^    # python 3.5 does not support passing a pathlib.path to os.path.* methods$^    if 'validate_label_locale' not in args or (args.validate_label_locale is none):$^        print('warning: no --validate_label_locale specified, your might end with inconsistent dataset.')$^        return validate_label_eng$^    validate_label_locale = str(args.validate_label_locale)$^    if not os.path.exists(os.path.abspath(validate_label_locale)):$^        print('error: inexistent --validate_label_locale specified. please check.')$^        return none$^    module_dir = os.path.abspath(os.path.dirname(validate_label_locale))$^    sys.path.insert(1, module_dir)$^    fname = os.path.basename(validate_label_locale).replace('.py', '')$^    locale_module = importlib.import_module(fname, package=none)$^    return locale_module.validate_label$^$^# validate and normalize transcriptions. returns a cleaned version of the label$^# or none if it's invalid.$^def validate_label_eng(label):$^    # for now we can only handle [a-z ']$^    if re.search(r"[0-9]|[(<\[\]&*{]", label) is not none:$^        return none$^$^    label = label.replace("-", " ")$^    label = label.replace("_", " ")$^    label = re.sub("[ ]{2,}", " ", label)$^    label = label.replace(".", "")$^    label = label.replace(",", "")$^    label = label.replace(";", "")$^    label = label.replace("?", "")$^    label = label.replace("!", "")$^    label = label.replace(":", "")$^    label = label.replace("\"", "")$^    label = label.strip()$^    label = label.lower()$^$^    return label if label else none$^import sys$^import tensorflow as tf$^import tensorflow.compat.v1 as tfv1$^$^from .flags import flags$^from .logging import log_info, log_error, log_warn$^$^$^def _load_checkpoint(session, checkpoint_path, allow_drop_layers, allow_lr_init=true):$^    # load the checkpoint and put all variables into loading list$^    # we will exclude variables we do not wish to load and then$^    # we will initialize them instead$^    ckpt = tfv1.train.load_checkpoint(checkpoint_path)$^    vars_in_ckpt = frozenset(ckpt.get_variable_to_shape_map().keys())$^    load_vars = set(tfv1.global_variables())$^    init_vars = set()$^$^    # we explicitly allow the learning rate variable to be missing for backwards$^    # compatibility with older checkpoints.$^    lr_var = set(v for v in load_vars if v.op.name == 'learning_rate')$^    if lr_var and ('learning_rate' not in vars_in_ckpt or$^                    (flags.force_initialize_learning_rate and allow_lr_init)):$^        assert len(lr_var) <= 1$^        load_vars -= lr_var$^        init_vars |= lr_var$^$^    if flags.load_cudnn:$^        # initialize training from a cudnn rnn checkpoint$^        # identify the variables which we cannot load, and set them$^        # for initialization$^        missing_vars = set()$^        for v in load_vars:$^            if v.op.name not in vars_in_ckpt:$^                log_warn('cudnn variable not found: %s' % (v.op.name))$^                missing_vars.add(v)$^                init_vars.add(v)$^$^        load_vars -= init_vars$^$^        # check that the only missing variables (i.e. those to be initialised)$^        # are the adam moment tensors, if they aren't then we have an issue$^        missing_var_names = [v.op.name for v in missing_vars]$^        if any('adam' not in v for v in missing_var_names):$^            log_error('tried to load a cudnn rnn checkpoint but there were '$^                      'more missing variables than just the adam moment '$^                      'tensors. missing variables: {}'.format(missing_var_names))$^            sys.exit(1)$^$^    if allow_drop_layers and flags.drop_source_layers > 0:$^        # this transfer learning approach requires supplying$^        # the layers which we exclude from the source model.$^        # say we want to exclude all layers except for the first one,$^        # then we are dropping five layers total, so: drop_source_layers=5$^        # if we want to use all layers from the source model except$^        # the last one, we use this: drop_source_layers=1$^        if flags.drop_source_layers >= 6:$^            log_warn('the checkpoint only has 6 layers, but you are trying to drop '$^                     'all of them or more than all of them. continuing and '$^                     'dropping only 5 layers.')$^            flags.drop_source_layers = 5$^$^        dropped_layers = ['2', '3', 'lstm', '5', '6'][-1 * int(flags.drop_source_layers):]$^        # initialize all variables needed for ds, but not loaded from ckpt$^        for v in load_vars:$^            if any(layer in v.op.name for layer in dropped_layers):$^                init_vars.add(v)$^        load_vars -= init_vars$^$^    for v in sorted(load_vars, key=lambda v: v.op.name):$^        log_info('loading variable from checkpoint: %s' % (v.op.name))$^        v.load(ckpt.get_tensor(v.op.name), session=session)$^$^    for v in sorted(init_vars, key=lambda v: v.op.name):$^        log_info('initializing variable: %s' % (v.op.name))$^        session.run(v.initializer)$^$^$^def _checkpoint_path_or_none(checkpoint_filename):$^    checkpoint = tfv1.train.get_checkpoint_state(flags.load_checkpoint_dir, checkpoint_filename)$^    if not checkpoint:$^        return none$^    return checkpoint.model_checkpoint_path$^$^$^def _initialize_all_variables(session):$^    init_vars = tfv1.global_variables()$^    for v in init_vars:$^        session.run(v.initializer)$^$^$^def _load_or_init_impl(session, method_order, allow_drop_layers, allow_lr_init=true):$^    for method in method_order:$^        # load best validating checkpoint, saved in checkpoint file 'best_dev_checkpoint'$^        if method == 'best':$^            ckpt_path = _checkpoint_path_or_none('best_dev_checkpoint')$^            if ckpt_path:$^                log_info('loading best validating checkpoint from {}'.format(ckpt_path))$^                return _load_checkpoint(session, ckpt_path, allow_drop_layers, allow_lr_init=allow_lr_init)$^            log_info('could not find best validating checkpoint.')$^$^        # load most recent checkpoint, saved in checkpoint file 'checkpoint'$^        elif method == 'last':$^            ckpt_path = _checkpoint_path_or_none('checkpoint')$^            if ckpt_path:$^                log_info('loading most recent checkpoint from {}'.format(ckpt_path))$^                return _load_checkpoint(session, ckpt_path, allow_drop_layers, allow_lr_init=allow_lr_init)$^            log_info('could not find most recent checkpoint.')$^$^        # initialize all variables$^        elif method == 'init':$^            log_info('initializing all variables.')$^            return _initialize_all_variables(session)$^$^        else:$^            log_error('unknown initialization method: {}'.format(method))$^            sys.exit(1)$^$^    log_error('all initialization methods failed ({}).'.format(method_order))$^    sys.exit(1)$^$^$^def reload_best_checkpoint(session):$^    _load_or_init_impl(session, ['best'], allow_drop_layers=false, allow_lr_init=false)$^$^$^def load_or_init_graph_for_training(session):$^    '''$^    load variables from checkpoint or initialize variables. by default this will$^    try to load the best validating checkpoint, then try the last checkpoint,$^    and finally initialize the weights from scratch. this can be overriden with$^    the `--load_train` flag. see its documentation for more info.$^    '''$^    if flags.load_train == 'auto':$^        methods = ['best', 'last', 'init']$^    else:$^        methods = [flags.load_train]$^    _load_or_init_impl(session, methods, allow_drop_layers=true)$^$^$^def load_graph_for_evaluation(session):$^    '''$^    load variables from checkpoint. initialization is not allowed. by default$^    this will try to load the best validating checkpoint, then try the last$^    checkpoint. this can be overriden with the `--load_evaluate` flag. see its$^    documentation for more info.$^    '''$^    if flags.load_evaluate == 'auto':$^        methods = ['best', 'last']$^    else:$^        methods = [flags.load_evaluate]$^    _load_or_init_impl(session, methods, allow_drop_layers=false)$^from __future__ import absolute_import, division, print_function$^$^import numpy as np$^import struct$^$^def text_to_char_array(transcript, alphabet, context=''):$^    r"""$^    given a transcript string, map characters to$^    integers and return a numpy array representing the processed string.$^    use a string in `context` for adding text to raised exceptions.$^    """$^    if not alphabet.canencode(transcript):$^        # provide the row context (especially wav_filename) for alphabet errors$^        raise valueerror($^            'alphabet cannot encode transcript "{}" while processing sample "{}", '$^            'check that your alphabet contains all characters in the training corpus. '$^            'missing characters are: {}.'$^            .format(transcript, context, list(ch for ch in transcript if not alphabet.canencodesingle(ch))))$^$^    encoded = alphabet.encode(transcript)$^    if len(encoded) == 0:$^        raise valueerror('while processing {}: found an empty transcript! '$^                         'you must include a transcript for all training data.'$^                         .format(context))$^    return encoded$^$^$^# the following code is from: http://hetland.org/coding/python/levenshtein.py$^$^# this is a straightforward implementation of a well-known algorithm, and thus$^# probably shouldn't be covered by copyright to begin with. but in case it is,$^# the author (magnus lie hetland) has, to the extent possible under law,$^# dedicated all copyright and related and neighboring rights to this software$^# to the public domain worldwide, by distributing it under the cc0 license,$^# version 1.0. this software is distributed without any warranty. for more$^# information, see <http://creativecommons.org/publicdomain/zero/1.0>$^$^def levenshtein(a, b):$^    "calculates the levenshtein distance between a and b."$^    n, m = len(a), len(b)$^    if n > m:$^        # make sure n <= m, to use o(min(n,m)) space$^        a, b = b, a$^        n, m = m, n$^$^    current = list(range(n+1))$^    for i in range(1, m+1):$^        previous, current = current, [i]+[0]*n$^        for j in range(1, n+1):$^            add, delete = previous[j]+1, current[j-1]+1$^            change = previous[j-1]$^            if a[j-1] != b[i-1]:$^                change = change + 1$^            current[j] = min(add, delete, change)$^$^    return current[n]$^"""$^usage:$^ from within the training/ directory, call this script as a module:$^$^       $ python3 -m deepspeech_training.util.check_characters "infile"$^ e.g.  $ python3 -m deepspeech_training.util.check_characters -csv /home/data/french.csv$^ e.g.  $ python3 -m deepspeech_training.util.check_characters -csv ../train.csv,../test.csv$^ e.g.  $ python3 -m deepspeech_training.util.check_characters -alpha -csv ../train.csv$^$^point this script to your transcripts, and it returns$^to the terminal the unique set of characters in those$^files (combined).$^$^these files are assumed to be csv, with the transcript being the third field.$^$^the script simply reads all the text from all the files,$^storing a set of unique characters that were seen$^along the way.$^"""$^import argparse$^import csv$^import os$^import sys$^import unicodedata$^from .io import open_remote$^$^def main():$^    parser = argparse.argumentparser()$^$^    parser.add_argument("-csv", "--csv-files", help="str. filenames as a comma separated list", required=true)$^    parser.add_argument("-alpha", "--alphabet-format", help="bool. print in format for alphabet.txt", action="store_true")$^    parser.add_argument("-unicode", "--disable-unicode-variants", help="bool. disable check for unicode consistency (use with --alphabet-format)", action="store_true")$^    args = parser.parse_args()$^    in_files = args.csv_files.split(",")$^$^    print("### reading in the following transcript files: ###")$^    print("### {} ###".format(in_files))$^$^    all_text = set()$^    for in_file in in_files:$^        with open_remote(in_file, "r") as csv_file:$^            reader = csv.reader(csv_file)$^            try:$^                next(reader, none)  # skip the file header (i.e. "transcript")$^                for row in reader:$^                    if not args.disable_unicode_variants:$^                        unicode_transcript = unicodedata.normalize("nfkc", row[2])$^                        if row[2] != unicode_transcript:$^                            print("your input file", in_file, "contains at least one transript with unicode chars on more than one code-point: '{}'. consider using nfkc normalization: unicodedata.normalize('nfkc', str).".format(row[2]))$^                            sys.exit(-1)$^                    all_text |= set(row[2])$^            except indexerror:$^                print("your input file", in_file, "is not formatted properly. check if there are 3 columns with the 3rd containing the transcript")$^                sys.exit(-1)$^            finally:$^                csv_file.close()$^$^    print("### the following unique characters were found in your transcripts: ###")$^    if args.alphabet_format:$^        for char in list(all_text):$^            print(char)$^        print("### ^^^ you can copy-paste these into data/alphabet.txt ###")$^    else:$^        print(list(all_text))$^$^if __name__ == '__main__':$^    main()$^import collections$^import ctypes$^import io$^import math$^import numpy as np$^import os$^import pyogg$^import tempfile$^import wave$^$^from .helpers import limitingpool$^from collections import namedtuple$^from .io import open_remote, remove_remote, copy_remote, is_remote_path$^$^audioformat = namedtuple('audioformat', 'rate channels width')$^$^default_rate = 16000$^default_channels = 1$^default_width = 2$^default_format = audioformat(default_rate, default_channels, default_width)$^$^audio_type_np = 'application/vnd.mozilla.np'$^audio_type_pcm = 'application/vnd.mozilla.pcm'$^audio_type_wav = 'audio/wav'$^audio_type_opus = 'application/vnd.mozilla.opus'$^audio_type_ogg_opus = 'application/vnd.deepspeech.ogg_opus'$^$^serializable_audio_types = [audio_type_wav, audio_type_opus, audio_type_ogg_opus]$^$^opus_pcm_len_size = 4$^opus_rate_size = 4$^opus_channels_size = 1$^opus_width_size = 1$^opus_chunk_len_size = 2$^$^$^class sample:$^    """$^    represents in-memory audio data of a certain (convertible) representation.$^$^    attributes$^    ----------$^    audio_type : str$^        see `__init__`.$^    audio_format : util.audio.audioformat$^        see `__init__`.$^    audio : binary$^        audio data represented as indicated by `audio_type`$^    duration : float$^        audio duration of the sample in seconds$^    """$^    def __init__(self, audio_type, raw_data, audio_format=none, sample_id=none):$^        """$^        parameters$^        ----------$^        audio_type : str$^            audio data representation type$^            supported types:$^                - util.audio.audio_type_opus: memory file representation (bytesio) of opus encoded audio$^                    wrapped by a custom container format (used in sdbs)$^                - util.audio.audio_type_wav: memory file representation (bytesio) of a wave file$^                - util.audio.audio_type_pcm: binary representation (bytearray) of pcm encoded audio data (wave file without header)$^                - util.audio.audio_type_np: numpy representation of audio data (np.float32) - typically used for gpu feeding$^        raw_data : binary$^            audio data in the form of the provided representation type (see audio_type).$^            for types util.audio.audio_type_opus or util.audio.audio_type_wav data can also be passed as a bytearray.$^        audio_format : util.audio.audioformat$^            required in case of audio_type = util.audio.audio_type_pcm or util.audio.audio_type_np,$^            as this information cannot be derived from raw audio data.$^        sample_id : str$^            tracking id - should indicate sample's origin as precisely as possible$^        """$^        self.audio_type = audio_type$^        self.audio_format = audio_format$^        self.sample_id = sample_id$^        if audio_type in serializable_audio_types:$^            self.audio = raw_data if isinstance(raw_data, io.bytesio) else io.bytesio(raw_data)$^            self.duration = read_duration(audio_type, self.audio)$^            if not self.audio_format:$^                self.audio_format = read_format(audio_type, self.audio)$^        else:$^            self.audio = raw_data$^            if self.audio_format is none:$^                raise valueerror('for audio type "{}" parameter "audio_format" is mandatory'.format(self.audio_type))$^            if audio_type == audio_type_pcm:$^                self.duration = get_pcm_duration(len(self.audio), self.audio_format)$^            elif audio_type == audio_type_np:$^                self.duration = get_np_duration(len(self.audio), self.audio_format)$^            else:$^                raise valueerror('unsupported audio type: {}'.format(self.audio_type))$^$^    def change_audio_type(self, new_audio_type, bitrate=none):$^        """$^        in-place conversion of audio data into a different representation.$^$^        parameters$^        ----------$^        new_audio_type : str$^            new audio-type - see `__init__`.$^        bitrate : int$^            bitrate to use in case of converting to a lossy audio-type.$^        """$^        if self.audio_type == new_audio_type:$^            return$^        if new_audio_type == audio_type_pcm and self.audio_type in serializable_audio_types:$^            self.audio_format, audio = read_audio(self.audio_type, self.audio)$^            self.audio.close()$^            self.audio = audio$^        elif new_audio_type == audio_type_pcm and self.audio_type == audio_type_np:$^            self.audio = np_to_pcm(self.audio, self.audio_format)$^        elif new_audio_type == audio_type_np:$^            self.change_audio_type(audio_type_pcm)$^            self.audio = pcm_to_np(self.audio, self.audio_format)$^        elif new_audio_type in serializable_audio_types:$^            self.change_audio_type(audio_type_pcm)$^            audio_bytes = io.bytesio()$^            write_audio(new_audio_type, audio_bytes, self.audio, audio_format=self.audio_format, bitrate=bitrate)$^            audio_bytes.seek(0)$^            self.audio = audio_bytes$^        else:$^            raise runtimeerror('changing audio representation type from "{}" to "{}" not supported'$^                               .format(self.audio_type, new_audio_type))$^        self.audio_type = new_audio_type$^$^$^def _unpack_and_change_audio_type(sample_and_audio_type):$^    packed_sample, audio_type, bitrate = sample_and_audio_type$^    if hasattr(packed_sample, 'unpack'):$^        sample = packed_sample.unpack()$^    else:$^        sample = packed_sample$^    sample.change_audio_type(audio_type, bitrate=bitrate)$^    return sample$^$^$^def change_audio_types(packed_samples, audio_type=audio_type_pcm, bitrate=none, processes=none, process_ahead=none):$^    with limitingpool(processes=processes, process_ahead=process_ahead) as pool:$^        yield from pool.imap(_unpack_and_change_audio_type, map(lambda s: (s, audio_type, bitrate), packed_samples))$^$^$^def get_loadable_audio_type_from_extension(ext):$^    return {$^        '.wav': audio_type_wav,$^        '.opus': audio_type_ogg_opus,$^    }.get(ext, none)$^$^$^def read_audio_format_from_wav_file(wav_file):$^    return audioformat(wav_file.getframerate(), wav_file.getnchannels(), wav_file.getsampwidth())$^$^$^def get_num_samples(pcm_buffer_size, audio_format=default_format):$^    return pcm_buffer_size // (audio_format.channels * audio_format.width)$^$^$^def get_pcm_duration(pcm_buffer_size, audio_format=default_format):$^    """calculates duration in seconds of a binary pcm buffer (typically read from a wav file)"""$^    return get_num_samples(pcm_buffer_size, audio_format) / audio_format.rate$^$^$^def get_np_duration(np_len, audio_format=default_format):$^    """calculates duration in seconds of numpy audio data"""$^    return np_len / audio_format.rate$^$^$^def convert_audio(src_audio_path, dst_audio_path, file_type=none, audio_format=default_format):$^    import sox$^    transformer = sox.transformer()$^    transformer.set_output_format(file_type=file_type,$^                                  rate=audio_format.rate,$^                                  channels=audio_format.channels,$^                                  bits=audio_format.width * 8)$^    transformer.build(src_audio_path, dst_audio_path)$^$^$^class audiofile:$^    """$^    audio data file wrapper that ensures that the file is loaded with the correct sample rate, channels,$^    and width, and converts the file on the fly otherwise.$^    """$^    def __init__(self, audio_path, as_path=false, audio_format=default_format):$^        self.audio_path = audio_path$^        self.audio_format = audio_format$^        self.as_path = as_path$^        self.open_file = none$^        self.open_wav = none$^        self.tmp_file_path = none$^        self.tmp_src_file_path = none$^$^    def __enter__(self):$^        if self.audio_path.endswith('.wav'):$^            self.open_file = open_remote(self.audio_path, 'rb')$^            self.open_wav = wave.open(self.open_file)$^            if read_audio_format_from_wav_file(self.open_wav) == self.audio_format:$^                if self.as_path:$^                    self.open_wav.close()$^                    self.open_file.close()$^                    return self.audio_path$^                return self.open_wav$^            self.open_wav.close()$^            self.open_file.close()$^$^        # if the format isn't right, copy the file to local tmp dir and do the conversion on disk$^        if is_remote_path(self.audio_path):$^            _, self.tmp_src_file_path = tempfile.mkstemp(suffix='.wav')$^            copy_remote(self.audio_path, self.tmp_src_file_path, true)$^            self.audio_path = self.tmp_src_file_path$^$^        _, self.tmp_file_path = tempfile.mkstemp(suffix='.wav')$^        convert_audio(self.audio_path, self.tmp_file_path, file_type='wav', audio_format=self.audio_format)$^        if self.as_path:$^            return self.tmp_file_path$^        self.open_wav = wave.open(self.tmp_file_path, 'rb')$^        return self.open_wav$^$^    def __exit__(self, *args):$^        if not self.as_path:$^            self.open_wav.close()$^            if self.open_file:$^                self.open_file.close()$^        if self.tmp_file_path is not none:$^            os.remove(self.tmp_file_path)$^        if self.tmp_src_file_path is not none:$^            os.remove(self.tmp_src_file_path)$^$^$^def read_frames(wav_file, frame_duration_ms=30, yield_remainder=false):$^    audio_format = read_audio_format_from_wav_file(wav_file)$^    frame_size = int(audio_format.rate * (frame_duration_ms / 1000.0))$^    while true:$^        try:$^            data = wav_file.readframes(frame_size)$^            if not yield_remainder and get_pcm_duration(len(data), audio_format) * 1000 < frame_duration_ms:$^                break$^            yield data$^        except eoferror:$^            break$^$^$^def read_frames_from_file(audio_path, audio_format=default_format, frame_duration_ms=30, yield_remainder=false):$^    with audiofile(audio_path, audio_format=audio_format) as wav_file:$^        for frame in read_frames(wav_file, frame_duration_ms=frame_duration_ms, yield_remainder=yield_remainder):$^            yield frame$^$^$^def vad_split(audio_frames,$^              audio_format=default_format,$^              num_padding_frames=10,$^              threshold=0.5,$^              aggressiveness=3):$^    from webrtcvad import vad  # pylint: disable=import-outside-toplevel$^    if audio_format.channels != 1:$^        raise valueerror('vad-splitting requires mono samples')$^    if audio_format.width != 2:$^        raise valueerror('vad-splitting requires 16 bit samples')$^    if audio_format.rate not in [8000, 16000, 32000, 48000]:$^        raise valueerror('vad-splitting only supported for sample rates 8000, 16000, 32000, or 48000')$^    if aggressiveness not in [0, 1, 2, 3]:$^        raise valueerror('vad-splitting aggressiveness mode has to be one of 0, 1, 2, or 3')$^    ring_buffer = collections.deque(maxlen=num_padding_frames)$^    triggered = false$^    vad = vad(int(aggressiveness))$^    voiced_frames = []$^    frame_duration_ms = 0$^    frame_index = 0$^    for frame_index, frame in enumerate(audio_frames):$^        frame_duration_ms = get_pcm_duration(len(frame), audio_format) * 1000$^        if int(frame_duration_ms) not in [10, 20, 30]:$^            raise valueerror('vad-splitting only supported for frame durations 10, 20, or 30 ms')$^        is_speech = vad.is_speech(frame, audio_format.rate)$^        if not triggered:$^            ring_buffer.append((frame, is_speech))$^            num_voiced = len([f for f, speech in ring_buffer if speech])$^            if num_voiced > threshold * ring_buffer.maxlen:$^                triggered = true$^                for f, s in ring_buffer:$^                    voiced_frames.append(f)$^                ring_buffer.clear()$^        else:$^            voiced_frames.append(frame)$^            ring_buffer.append((frame, is_speech))$^            num_unvoiced = len([f for f, speech in ring_buffer if not speech])$^            if num_unvoiced > threshold * ring_buffer.maxlen:$^                triggered = false$^                yield b''.join(voiced_frames), \$^                      frame_duration_ms * max(0, frame_index - len(voiced_frames)), \$^                      frame_duration_ms * frame_index$^                ring_buffer.clear()$^                voiced_frames = []$^    if len(voiced_frames) > 0:$^        yield b''.join(voiced_frames), \$^              frame_duration_ms * (frame_index - len(voiced_frames)), \$^              frame_duration_ms * (frame_index + 1)$^$^$^def pack_number(n, num_bytes):$^    return n.to_bytes(num_bytes, 'big', signed=false)$^$^$^def unpack_number(data):$^    return int.from_bytes(data, 'big', signed=false)$^$^$^def get_opus_frame_size(rate):$^    return 60 * rate // 1000$^$^$^def write_opus(opus_file, audio_data, audio_format=default_format, bitrate=none):$^    frame_size = get_opus_frame_size(audio_format.rate)$^    import opuslib  # pylint: disable=import-outside-toplevel$^    encoder = opuslib.encoder(audio_format.rate, audio_format.channels, 'audio')$^    if bitrate is not none:$^        encoder.bitrate = bitrate$^    chunk_size = frame_size * audio_format.channels * audio_format.width$^    opus_file.write(pack_number(len(audio_data), opus_pcm_len_size))$^    opus_file.write(pack_number(audio_format.rate, opus_rate_size))$^    opus_file.write(pack_number(audio_format.channels, opus_channels_size))$^    opus_file.write(pack_number(audio_format.width, opus_width_size))$^    for i in range(0, len(audio_data), chunk_size):$^        chunk = audio_data[i:i + chunk_size]$^        # preventing non-deterministic encoding results from uninitialized remainder of the encoder buffer$^        if len(chunk) < chunk_size:$^            chunk = chunk + b'\0' * (chunk_size - len(chunk))$^        encoded = encoder.encode(chunk, frame_size)$^        opus_file.write(pack_number(len(encoded), opus_chunk_len_size))$^        opus_file.write(encoded)$^$^$^def read_opus_header(opus_file):$^    opus_file.seek(0)$^    pcm_buffer_size = unpack_number(opus_file.read(opus_pcm_len_size))$^    rate = unpack_number(opus_file.read(opus_rate_size))$^    channels = unpack_number(opus_file.read(opus_channels_size))$^    width = unpack_number(opus_file.read(opus_width_size))$^    return pcm_buffer_size, audioformat(rate, channels, width)$^$^$^def read_opus(opus_file):$^    pcm_buffer_size, audio_format = read_opus_header(opus_file)$^    frame_size = get_opus_frame_size(audio_format.rate)$^    import opuslib  # pylint: disable=import-outside-toplevel$^    decoder = opuslib.decoder(audio_format.rate, audio_format.channels)$^    audio_data = bytearray()$^    while len(audio_data) < pcm_buffer_size:$^        chunk_len = unpack_number(opus_file.read(opus_chunk_len_size))$^        chunk = opus_file.read(chunk_len)$^        decoded = decoder.decode(chunk, frame_size)$^        audio_data.extend(decoded)$^    audio_data = audio_data[:pcm_buffer_size]$^    return audio_format, bytes(audio_data)$^$^$^def read_ogg_opus(ogg_file):$^    error = ctypes.c_int()$^    ogg_file_buffer = ogg_file.getbuffer()$^    ubyte_array = ctypes.c_ubyte * len(ogg_file_buffer)$^    opusfile = pyogg.opus.op_open_memory($^        ubyte_array.from_buffer(ogg_file_buffer),$^        len(ogg_file_buffer),$^        ctypes.pointer(error)$^    )$^$^    if error.value != 0:$^        raise valueerror($^            ("ogg/opus buffer could not be read."$^             "error code: {}").format(error.value)$^        )$^$^    channel_count = pyogg.opus.op_channel_count(opusfile, -1)$^    sample_rate = 48000 # opus files are always 48khz$^    sample_width = 2 # always 16-bit$^    audio_format = audioformat(sample_rate, channel_count, sample_width)$^$^    # allocate sufficient memory to store the entire pcm$^    pcm_size = pyogg.opus.op_pcm_total(opusfile, -1)$^    buf = pyogg.opus.opus_int16*(pcm_size*channel_count)$^    buf = buf()$^$^    # create a pointer to the newly allocated memory.  it$^    # seems we can only do pointer arithmetic on void$^    # pointers.  see$^    # https://mattgwwalker.wordpress.com/2020/05/30/pointer-manipulation-in-python/$^    buf_ptr = ctypes.cast($^        ctypes.pointer(buf),$^        ctypes.c_void_p$^    )$^    assert buf_ptr.value is not none # for mypy$^    buf_ptr_zero = buf_ptr.value$^$^    #: bytes per sample$^    bytes_per_sample = ctypes.sizeof(pyogg.opus.opus_int16)$^$^    # read through the entire file, copying the pcm into the$^    # buffer$^    samples = 0$^    while true:$^        # calculate remaining buffer size$^        remaining_buffer = ($^            len(buf) # int$^            - (buf_ptr.value - buf_ptr_zero) // bytes_per_sample$^        )$^$^        # convert buffer pointer to the desired type$^        ptr = ctypes.cast($^            buf_ptr,$^            ctypes.pointer(pyogg.opus.opus_int16)$^        )$^$^        # read the next section of pcm$^        ns = pyogg.opus.op_read($^            opusfile,$^            ptr,$^            remaining_buffer,$^            pyogg.ogg.c_int_p()$^        )$^$^        # check for errors$^        if ns < 0:$^            raise valueerror($^                "error while reading oggopus buffer. "+$^                "error code: {}".format(ns)$^            )$^$^        # increment the pointer$^        buf_ptr.value += ($^            ns$^            * bytes_per_sample$^            * channel_count$^        )$^        assert buf_ptr.value is not none # for mypy$^$^        samples += ns$^$^        # check if we've finished$^        if ns == 0:$^            break$^$^    # close the open file$^    pyogg.opus.op_free(opusfile)$^$^    # cast buffer to a one-dimensional array of chars$^    #: raw pcm data from audio file.$^    charbuffer = ctypes.c_byte * (bytes_per_sample * channel_count * pcm_size)$^    audio_data = charbuffer.from_buffer(buf)$^$^    return audio_format, audio_data$^$^$^def write_wav(wav_file, pcm_data, audio_format=default_format):$^    # wav_file is already a file-pointer here$^    with wave.open(wav_file, 'wb') as wav_file_writer:$^        wav_file_writer.setframerate(audio_format.rate)$^        wav_file_writer.setnchannels(audio_format.channels)$^        wav_file_writer.setsampwidth(audio_format.width)$^        wav_file_writer.writeframes(pcm_data)$^$^$^def read_wav(wav_file):$^    wav_file.seek(0)$^    with wave.open(wav_file, 'rb') as wav_file_reader:$^        audio_format = read_audio_format_from_wav_file(wav_file_reader)$^        pcm_data = wav_file_reader.readframes(wav_file_reader.getnframes())$^        return audio_format, pcm_data$^$^$^def read_audio(audio_type, audio_file):$^    if audio_type == audio_type_wav:$^        return read_wav(audio_file)$^    if audio_type == audio_type_opus:$^        return read_opus(audio_file)$^    if audio_type == audio_type_ogg_opus:$^        return read_ogg_opus(audio_file)$^    raise valueerror('unsupported audio type: {}'.format(audio_type))$^$^$^def write_audio(audio_type, audio_file, pcm_data, audio_format=default_format, bitrate=none):$^    if audio_type == audio_type_wav:$^        return write_wav(audio_file, pcm_data, audio_format=audio_format)$^    if audio_type == audio_type_opus:$^        return write_opus(audio_file, pcm_data, audio_format=audio_format, bitrate=bitrate)$^    raise valueerror('unsupported audio type: {}'.format(audio_type))$^$^$^def read_wav_duration(wav_file):$^    wav_file.seek(0)$^    with wave.open(wav_file, 'rb') as wav_file_reader:$^        return wav_file_reader.getnframes() / wav_file_reader.getframerate()$^$^$^def read_opus_duration(opus_file):$^    pcm_buffer_size, audio_format = read_opus_header(opus_file)$^    return get_pcm_duration(pcm_buffer_size, audio_format)$^$^$^def read_ogg_opus_duration(ogg_file):$^    error = ctypes.c_int()$^    ogg_file_buffer = ogg_file.getbuffer()$^    ubyte_array = ctypes.c_ubyte * len(ogg_file_buffer)$^    opusfile = pyogg.opus.op_open_memory($^        ubyte_array.from_buffer(ogg_file_buffer),$^        len(ogg_file_buffer),$^        ctypes.pointer(error)$^    )$^$^    if error.value != 0:$^        raise valueerror($^            ("ogg/opus buffer could not be read."$^             "error code: {}").format(error.value)$^        )$^$^    pcm_buffer_size = pyogg.opus.op_pcm_total(opusfile, -1)$^    channel_count = pyogg.opus.op_channel_count(opusfile, -1)$^    sample_rate = 48000 # opus files are always 48khz$^    sample_width = 2 # always 16-bit$^    audio_format = audioformat(sample_rate, channel_count, sample_width)$^    pyogg.opus.op_free(opusfile)$^    return get_pcm_duration(pcm_buffer_size, audio_format)$^$^$^def read_duration(audio_type, audio_file):$^    if audio_type == audio_type_wav:$^        return read_wav_duration(audio_file)$^    if audio_type == audio_type_opus:$^        return read_opus_duration(audio_file)$^    if audio_type == audio_type_ogg_opus:$^        return read_ogg_opus_duration(audio_file)$^    raise valueerror('unsupported audio type: {}'.format(audio_type))$^$^$^def read_wav_format(wav_file):$^    wav_file.seek(0)$^    with wave.open(wav_file, 'rb') as wav_file_reader:$^        return read_audio_format_from_wav_file(wav_file_reader)$^$^$^def read_opus_format(opus_file):$^    _, audio_format = read_opus_header(opus_file)$^    return audio_format$^$^$^def read_ogg_opus_format(ogg_file):$^    error = ctypes.c_int()$^    ogg_file_buffer = ogg_file.getbuffer()$^    ubyte_array = ctypes.c_ubyte * len(ogg_file_buffer)$^    opusfile = pyogg.opus.op_open_memory($^        ubyte_array.from_buffer(ogg_file_buffer),$^        len(ogg_file_buffer),$^        ctypes.pointer(error)$^    )$^$^    if error.value != 0:$^        raise valueerror($^            ("ogg/opus buffer could not be read."$^             "error code: {}").format(error.value)$^        )$^$^    channel_count = pyogg.opus.op_channel_count(opusfile, -1)$^    pyogg.opus.op_free(opusfile)$^$^    sample_rate = 48000 # opus files are always 48khz$^    sample_width = 2 # always 16-bit$^    return audioformat(sample_rate, channel_count, sample_width)$^$^$^def read_format(audio_type, audio_file):$^    if audio_type == audio_type_wav:$^        return read_wav_format(audio_file)$^    if audio_type == audio_type_opus:$^        return read_opus_format(audio_file)$^    if audio_type == audio_type_ogg_opus:$^        return read_ogg_opus_format(audio_file)$^    raise valueerror('unsupported audio type: {}'.format(audio_type))$^$^$^def get_dtype(audio_format):$^    if audio_format.width not in [1, 2, 4]:$^        raise valueerror('unsupported sample width: {}'.format(audio_format.width))$^    return [none, np.int8, np.int16, none, np.int32][audio_format.width]$^$^$^def pcm_to_np(pcm_data, audio_format=default_format):$^    """$^    converts pcm data (e.g. read from a wavfile) into a mono numpy column vector$^    with values in the range [0.0, 1.0].$^    """$^    # handles both mono and stero audio$^    dtype = get_dtype(audio_format)$^    samples = np.frombuffer(pcm_data, dtype=dtype)$^$^    # read interleaved channels$^    nchannels = audio_format.channels$^    samples = samples.reshape((int(len(samples)/nchannels), nchannels))$^    $^    # convert to 0.0-1.0 range$^    samples = samples.astype(np.float32) / np.iinfo(dtype).max$^$^    # average multi-channel clips into mono and turn into column vector$^    return np.expand_dims(np.mean(samples, axis=1), axis=1)$^$^$^def np_to_pcm(np_data, audio_format=default_format):$^    dtype = get_dtype(audio_format)$^    np_data = np_data.squeeze()$^    np_data = np_data * np.iinfo(dtype).max$^    np_data = np_data.astype(dtype)$^    return np_data.tobytes()$^$^$^def rms_to_dbfs(rms):$^    return 20.0 * math.log10(max(1e-16, rms)) + 3.0103$^$^$^def max_dbfs(sample_data):$^    # peak dbfs based on the maximum energy sample. will prevent overdrive if used for normalization.$^    return rms_to_dbfs(max(abs(np.min(sample_data)), abs(np.max(sample_data))))$^$^$^def mean_dbfs(sample_data):$^    return rms_to_dbfs(math.sqrt(np.mean(np.square(sample_data, dtype=np.float64))))$^$^$^def gain_db_to_ratio(gain_db):$^    return math.pow(10.0, gain_db / 20.0)$^$^$^def normalize_audio(sample_data, dbfs=3.0103):$^    return np.maximum(np.minimum(sample_data * gain_db_to_ratio(dbfs - max_dbfs(sample_data)), 1.0), -1.0)$^import codecs$^import unicodedata$^$^class stmsegment(object):$^    r"""$^    representation of an individual segment in an stm file.$^    """$^    def __init__(self, stm_line):$^        tokens = stm_line.split()$^        self._filename    = tokens[0]$^        self._channel     = tokens[1]$^        self._speaker_id  = tokens[2]$^        self._start_time  = float(tokens[3])$^        self._stop_time   = float(tokens[4])$^        self._labels      = tokens[5]$^        self._transcript  = ""$^        for token in tokens[6:]:$^          self._transcript += token + " "$^        # we need to do the encode-decode dance here because encode$^        # returns a bytes() object on python 3, and text_to_char_array$^        # expects a string.$^        self._transcript = unicodedata.normalize("nfkd", self._transcript.strip())  \$^                                      .encode("ascii", "ignore")                    \$^                                      .decode("ascii", "ignore")$^$^    @property$^    def filename(self):$^        return self._filename$^$^    @property$^    def channel(self):$^        return self._channel$^$^    @property$^    def speaker_id(self):$^        return self._speaker_id$^$^    @property$^    def start_time(self):$^        return self._start_time$^$^    @property$^    def stop_time(self):$^        return self._stop_time$^$^    @property$^    def labels(self):$^        return self._labels$^$^    @property$^    def transcript(self):$^        return self._transcript$^$^def parse_stm_file(stm_file):$^    r"""$^    parses an stm file at ``stm_file`` into a list of :class:`stmsegment`.$^    """$^    stm_segments = []$^    with codecs.open(stm_file, encoding="utf-8") as stm_lines:$^        for stm_line in stm_lines:$^            stmsegment = stmsegment(stm_line)$^            if not "ignore_time_segment_in_scoring" == stmsegment.transcript:$^                stm_segments.append(stmsegment)$^    return stm_segments$^from tensorflow.python.client import device_lib$^$^$^def get_available_gpus(config):$^    r"""$^    returns the number of gpus available on this system.$^    """$^    local_device_protos = device_lib.list_local_devices(session_config=config)$^    return [x.name for x in local_device_protos if x.device_type == 'gpu']$^#!/usr/bin/env python$^# -*- coding: utf-8 -*-$^from __future__ import absolute_import, division, print_function$^$^import json$^from multiprocessing.dummy import pool$^$^import numpy as np$^from attrdict import attrdict$^$^from .flags import flags$^from .text import levenshtein$^from .io import open_remote$^$^def pmap(fun, iterable):$^    pool = pool()$^    results = pool.map(fun, iterable)$^    pool.close()$^    return results$^$^$^def wer_cer_batch(samples):$^    r"""$^    the wer is defined as the edit/levenshtein distance on word level divided by$^    the amount of words in the original text.$^    in case of the original having more words (n) than the result and both$^    being totally different (all n words resulting in 1 edit operation each),$^    the wer will always be 1 (n / n = 1).$^    """$^    wer = sum(s.word_distance for s in samples) / sum(s.word_length for s in samples)$^    cer = sum(s.char_distance for s in samples) / sum(s.char_length for s in samples)$^$^    wer = min(wer, 1.0)$^    cer = min(cer, 1.0)$^$^    return wer, cer$^$^$^def process_decode_result(item):$^    wav_filename, ground_truth, prediction, loss = item$^    char_distance = levenshtein(ground_truth, prediction)$^    char_length = len(ground_truth)$^    word_distance = levenshtein(ground_truth.split(), prediction.split())$^    word_length = len(ground_truth.split())$^    return attrdict({$^        'wav_filename': wav_filename,$^        'src': ground_truth,$^        'res': prediction,$^        'loss': loss,$^        'char_distance': char_distance,$^        'char_length': char_length,$^        'word_distance': word_distance,$^        'word_length': word_length,$^        'cer': char_distance / char_length,$^        'wer': word_distance / word_length,$^    })$^$^$^def calculate_and_print_report(wav_filenames, labels, decodings, losses, dataset_name):$^    r'''$^    this routine will calculate and print a wer report.$^    it'll compute the `mean` wer and create ``sample`` objects of the ``report_count`` top lowest$^    loss items from the provided wer results tuple (only items with wer!=0 and ordered by their wer).$^    '''$^    samples = pmap(process_decode_result, zip(wav_filenames, labels, decodings, losses))$^$^    # getting the wer and cer from the accumulated edit distances and lengths$^    samples_wer, samples_cer = wer_cer_batch(samples)$^$^    # reversed because the worst wer with the best loss is to identify systemic issues, where the acoustic model is confident,$^    # yet the result is completely off the mark. this can point to transcription errors and stuff like that.$^    samples.sort(key=lambda s: s.loss, reverse=true)$^$^    # then order by ascending wer/cer$^    if flags.bytes_output_mode:$^        samples.sort(key=lambda s: s.cer)$^    else:$^        samples.sort(key=lambda s: s.wer)$^$^    # print the report$^    print_report(samples, losses, samples_wer, samples_cer, dataset_name)$^$^    return samples$^$^$^def print_report(samples, losses, wer, cer, dataset_name):$^    """ print a report summary and samples of best, median and worst results """$^$^    # print summary$^    mean_loss = np.mean(losses)$^    print('test on %s - wer: %f, cer: %f, loss: %f' % (dataset_name, wer, cer, mean_loss))$^    print('-' * 80)$^$^    best_samples = samples[:flags.report_count]$^    worst_samples = samples[-flags.report_count:]$^    median_index = int(len(samples) / 2)$^    median_left = int(flags.report_count / 2)$^    median_right = flags.report_count - median_left$^    median_samples = samples[median_index - median_left:median_index + median_right]$^$^    def print_single_sample(sample):$^        print('wer: %f, cer: %f, loss: %f' % (sample.wer, sample.cer, sample.loss))$^        print(' - wav: file://%s' % sample.wav_filename)$^        print(' - src: "%s"' % sample.src)$^        print(' - res: "%s"' % sample.res)$^        print('-' * 80)$^$^    print('best wer:', '\n' + '-' * 80)$^    for s in best_samples:$^        print_single_sample(s)$^$^    print('median wer:', '\n' + '-' * 80)$^    for s in median_samples:$^        print_single_sample(s)$^$^    print('worst wer:', '\n' + '-' * 80)$^    for s in worst_samples:$^        print_single_sample(s)$^$^$^def save_samples_json(samples, output_path):$^    ''' save decoded tuples as json, converting numpy floats to python floats.$^$^        we set ensure_ascii=true to prevent json from escaping non-ascii chars$^        in the texts.$^    '''$^    with open_remote(output_path, 'w') as fout:$^        json.dump(samples, fout, default=float, ensure_ascii=false, indent=2)$^import os$^import sys$^import time$^import heapq$^import semver$^import random$^$^from multiprocessing import pool$^from collections import namedtuple$^$^kilo = 1024$^kilobyte = 1 * kilo$^megabyte = kilo * kilobyte$^gigabyte = kilo * megabyte$^terabyte = kilo * gigabyte$^size_prefix_lookup = {'k': kilobyte, 'm': megabyte, 'g': gigabyte, 't': terabyte}$^$^valuerange = namedtuple('valuerange', 'start end r')$^$^$^def parse_file_size(file_size):$^    file_size = file_size.lower().strip()$^    if len(file_size) == 0:$^        return 0$^    n = int(keep_only_digits(file_size))$^    if file_size[-1] == 'b':$^        file_size = file_size[:-1]$^    e = file_size[-1]$^    return size_prefix_lookup[e] * n if e in size_prefix_lookup else n$^$^$^def keep_only_digits(txt):$^    return ''.join(filter(str.isdigit, txt))$^$^$^def secs_to_hours(secs):$^    hours, remainder = divmod(secs, 3600)$^    minutes, seconds = divmod(remainder, 60)$^    return '%d:%02d:%02d' % (hours, minutes, seconds)$^$^$^def check_ctcdecoder_version():$^    ds_version_s = open(os.path.join(os.path.dirname(__file__), '../version')).read().strip()$^$^    try:$^        # pylint: disable=import-outside-toplevel$^        from ds_ctcdecoder import __version__ as decoder_version$^    except importerror as e:$^        if e.msg.find('__version__') > 0:$^            print("deepspeech version ({ds_version}) requires ctc decoder to expose __version__. "$^                  "please upgrade the ds_ctcdecoder package to version {ds_version}".format(ds_version=ds_version_s))$^            sys.exit(1)$^        raise e$^$^    rv = semver.compare(ds_version_s, decoder_version)$^    if rv != 0:$^        print("deepspeech version ({}) and ctc decoder version ({}) do not match. "$^              "please ensure matching versions are in use.".format(ds_version_s, decoder_version))$^        sys.exit(1)$^$^    return rv$^$^$^class interleaved:$^    """collection that lazily combines sorted collections in an interleaving fashion.$^    during iteration the next smallest element from all the sorted collections is always picked.$^    the collections must support iter() and len()."""$^    def __init__(self, *iterables, key=lambda obj: obj, reverse=false):$^        self.iterables = iterables$^        self.key = key$^        self.reverse = reverse$^        self.len = sum(map(len, iterables))$^$^    def __iter__(self):$^        return heapq.merge(*self.iterables, key=self.key, reverse=self.reverse)$^$^    def __len__(self):$^        return self.len$^$^$^class lenmap:$^    """$^    wrapper around python map() output object that preserves the original collection length$^    by implementing __len__.$^    """$^    def __init__(self, fn, iterable):$^        try:$^            self.length = len(iterable)$^        except typeerror:$^            self.length = none$^        self.mapobj = map(fn, iterable)$^$^    def __iter__(self):$^        self.mapobj = self.mapobj.__iter__()$^        return self$^$^    def __next__(self):$^        return self.mapobj.__next__()$^$^    def __getitem__(self, key):$^        return self.mapobj.__getitem__(key)$^$^    def __len__(self):$^        return self.length$^$^$^class limitingpool:$^    """limits unbound ahead-processing of multiprocessing.pool's imap method$^    before items get consumed by the iteration caller.$^    this prevents oom issues in situations where items represent larger memory allocations."""$^    def __init__(self, processes=none, initializer=none, initargs=none, process_ahead=none, sleeping_for=0.1):$^        self.process_ahead = os.cpu_count() if process_ahead is none else process_ahead$^        self.sleeping_for = sleeping_for$^        self.processed = 0$^        self.pool = pool(processes=processes, initializer=initializer, initargs=initargs)$^$^    def __enter__(self):$^        return self$^$^    def _limit(self, it):$^        for obj in it:$^            while self.processed >= self.process_ahead:$^                time.sleep(self.sleeping_for)$^            self.processed += 1$^            yield obj$^$^    def imap(self, fun, it):$^        for obj in self.pool.imap(fun, self._limit(it)):$^            self.processed -= 1$^            yield obj$^$^    def terminate(self):$^        self.pool.terminate()$^$^    def __exit__(self, exc_type, exc_value, traceback):$^        self.pool.close()$^$^$^class exceptionbox:$^    """helper class for passing-back and re-raising an exception from inside a tensorflow dataset generator.$^    used in conjunction with `remember_exception`."""$^    def __init__(self):$^        self.exception = none$^$^    def raise_if_set(self):$^        if self.exception is not none:$^            exception = self.exception$^            self.exception = none$^            raise exception  # pylint: disable = raising-bad-type$^$^$^def remember_exception(iterable, exception_box=none):$^    """wraps a tensorflow dataset generator for catching its actual exceptions$^    that would otherwise just interrupt iteration w/o bubbling up."""$^    def do_iterate():$^        try:$^            yield from iterable()$^        except stopiteration:$^            return$^        except exception as ex:  # pylint: disable = broad-except$^            exception_box.exception = ex$^    return iterable if exception_box is none else do_iterate$^$^$^def get_value_range(value, target_type):$^    if isinstance(value, str):$^        r = target_type(0)$^        parts = value.split('~')$^        if len(parts) == 2:$^            value = parts[0]$^            r = target_type(parts[1])$^        elif len(parts) > 2:$^            raise valueerror('cannot parse value range')$^        parts = value.split(':')$^        if len(parts) == 1:$^            parts.append(parts[0])$^        elif len(parts) > 2:$^            raise valueerror('cannot parse value range')$^        return valuerange(target_type(parts[0]), target_type(parts[1]), r)$^    if isinstance(value, tuple):$^        if len(value) == 2:$^            return valuerange(target_type(value[0]), target_type(value[1]), 0)$^        if len(value) == 3:$^            return valuerange(target_type(value[0]), target_type(value[1]), target_type(value[2]))$^        raise valueerror('cannot convert to valuerange: wrong tuple size')$^    return valuerange(target_type(value), target_type(value), 0)$^$^$^def int_range(value):$^    return get_value_range(value, int)$^$^$^def float_range(value):$^    return get_value_range(value, float)$^$^$^def pick_value_from_range(value_range, clock=none):$^    clock = random.random() if clock is none else max(0.0, min(1.0, float(clock)))$^    value = value_range.start + clock * (value_range.end - value_range.start)$^    value = random.uniform(value - value_range.r, value + value_range.r)$^    return round(value) if isinstance(value_range.start, int) else value$^$^$^def tf_pick_value_from_range(value_range, clock=none, double_precision=false):$^    import tensorflow as tf  # pylint: disable=import-outside-toplevel$^    clock = (tf.random.stateless_uniform([], seed=(-1, 1), dtype=tf.float64) if clock is none$^             else tf.maximum(tf.constant(0.0, dtype=tf.float64), tf.minimum(tf.constant(1.0, dtype=tf.float64), clock)))$^    value = value_range.start + clock * (value_range.end - value_range.start)$^    value = tf.random.stateless_uniform([],$^                                        minval=value - value_range.r,$^                                        maxval=value + value_range.r,$^                                        seed=(clock * tf.int32.min, clock * tf.int32.max),$^                                        dtype=tf.float64)$^    if isinstance(value_range.start, int):$^        return tf.cast(tf.math.round(value), tf.int64 if double_precision else tf.int32)$^    return tf.cast(value, tf.float64 if double_precision else tf.float32)$^$^import os$^import re$^import math$^import random$^import resampy$^import numpy as np$^$^from multiprocessing import queue, process$^from .audio import gain_db_to_ratio, max_dbfs, normalize_audio, audio_type_np, audio_type_pcm, audio_type_opus$^from .helpers import limitingpool, int_range, float_range, pick_value_from_range, tf_pick_value_from_range, megabyte$^from .sample_collections import samples_from_source, unpack_maybe$^$^buffer_size = 1 * megabyte$^spec_parser = re.compile(r'^(?p<cls>[a-z_]+)(\[(?p<params>.*)\])?$')$^$^$^class augmentation:$^    def __init__(self, p=1.0):$^        self.probability = float(p)$^$^$^class sampleaugmentation(augmentation):$^    def start(self, buffering=buffer_size):$^        pass$^$^    def apply(self, sample, clock=0.0):$^        raise notimplementederror$^$^    def stop(self):$^        pass$^$^$^class graphaugmentation(augmentation):$^    def __init__(self, p=1.0, domain='spectrogram'):$^        super(graphaugmentation, self).__init__(p)$^        if domain not in ['signal', 'spectrogram', 'features']:$^            raise valueerror('unsupported augmentation domain: {}'.format(domain))$^        self.domain = domain$^$^    def apply(self, tensor, transcript=none, clock=0.0):$^        raise notimplementederror$^$^    def apply_with_probability(self, tensor, transcript=none, clock=0.0):$^        import tensorflow as tf  # pylint: disable=import-outside-toplevel$^        rv = tf.random.stateless_uniform([], seed=(clock * tf.int32.min, clock * tf.int32.max))$^        return tf.cond(tf.less(rv, self.probability),$^                       lambda: self.apply(tensor, transcript=transcript, clock=clock),$^                       lambda: tensor)$^$^    def maybe_apply(self, domain, tensor, transcript=none, clock=0.0):$^        if domain == self.domain:$^            return self.apply_with_probability(tensor, transcript=transcript, clock=clock)$^        return tensor$^$^    def units_per_ms(self):$^        from .flags import flags  # pylint: disable=import-outside-toplevel$^        return flags.audio_sample_rate / 1000.0 if self.domain == 'signal' else 1.0 / flags.feature_win_step$^$^$^def parse_augmentation(augmentation_spec):$^    """$^    parses an augmentation specification.$^$^    parameters$^    ----------$^    augmentation_spec : str$^        augmentation specification like "reverb[delay=20.0,decay=1.0]".$^$^    returns$^    -------$^    instance of an augmentation class from util.augmentations.*.$^    """$^    match = spec_parser.match(augmentation_spec)$^    if not match:$^        raise valueerror('augmentation specification has wrong format')$^    cls_name = ''.join(map(lambda p: p[0].upper() + p[1:], match.group('cls').split('_')))$^    augmentation_cls = globals()[cls_name] if cls_name in globals() else none$^    if augmentation_cls is none or not issubclass(augmentation_cls, augmentation) or augmentation_cls == augmentation:$^        raise valueerror('unknown augmentation: {}'.format(cls_name))$^    parameters = match.group('params')$^    parameters = [] if parameters is none else parameters.split(',')$^    args = []$^    kwargs = {}$^    for parameter in parameters:$^        pair = tuple(list(map(str.strip, (parameter.split('=')))))$^        if len(pair) == 1:$^            args.append(pair)$^        elif len(pair) == 2:$^            kwargs[pair[0]] = pair[1]$^        else:$^            raise valueerror('unable to parse augmentation value assignment')$^    return augmentation_cls(*args, **kwargs)$^$^$^def parse_augmentations(augmentation_specs):$^    """$^    parses an augmentation specification.$^$^    parameters$^    ----------$^    augmentation_specs : list of str$^        list of augmentation specifications like ["reverb[delay=20.0,decay=1.0]", "volume"].$^$^    returns$^    -------$^    list of augmentation class instances from util.augmentations.*.$^    """$^    return [] if augmentation_specs is none else list(map(parse_augmentation, augmentation_specs))$^$^$^def apply_graph_augmentations(domain, tensor, augmentations, transcript=none, clock=0.0):$^    """$^    augments training sample tensor of a certain domain with matching augmentations of passed list.$^$^    parameters$^    ----------$^    domain : str$^        domain of the tensor to apply augmentations to. one of "signal", "spectrogram" or "features"$^    tensor : tensor of type float32$^        tensor to apply augmentations to.$^    augmentations : list of augmentation class instances from util.augmentations.*.$^        list of augmentations of which only the spectrogram ones will get applied to the samples.$^    transcript : sparsetensor$^    clock : tensor of type float32$^        time indicator for augmentation value-ranges. running from 0.0 (start of training) to 1.0 (end of training).$^$^    returns$^    -------$^    tensor of type float32$^        the augmented spectrogram$^    """$^    if augmentations:$^        for augmentation in augmentations:$^            if isinstance(augmentation, graphaugmentation):$^                tensor = augmentation.maybe_apply(domain, tensor, transcript=transcript, clock=clock)$^    return tensor$^$^$^class augmentationcontext:$^    def __init__(self, target_audio_type, augmentations):$^        self.target_audio_type = target_audio_type$^        self.augmentations = augmentations$^$^$^augmentation_context = none$^$^$^def _init_augmentation_worker(preparation_context):$^    global augmentation_context  # pylint: disable=global-statement$^    augmentation_context = preparation_context$^$^$^def _load_and_augment_sample(timed_sample, context=none):$^    sample, clock = timed_sample$^    realized_sample = unpack_maybe(sample)$^    return _augment_sample((realized_sample, clock), context)$^$^$^def _augment_sample(timed_sample, context=none):$^    context = augmentation_context if context is none else context$^    sample, clock = timed_sample$^    for augmentation in context.augmentations:$^        if random.random() < augmentation.probability:$^            augmentation.apply(sample, clock)$^    sample.change_audio_type(new_audio_type=context.target_audio_type)$^    return sample$^$^$^def apply_sample_augmentations(samples,$^                               augmentations,$^                               audio_type=audio_type_np,$^                               buffering=buffer_size,$^                               process_ahead=none,$^                               clock=0.0,$^                               final_clock=none):$^    """$^    prepares samples for being used during training.$^    this includes parallel and buffered application of augmentations and a conversion to a specified audio-type.$^$^    parameters$^    ----------$^    samples : sample enumeration$^        typically produced by util.sample_collections.samples_from_sources.$^    augmentations : list of augmentation class instances from util.augmentations.*.$^        list of augmentations of which only the signal ones will get applied to the samples.$^    audio_type : str$^        target audio-type to convert samples to. see util.audio.sample.__init__ .$^    buffering : int$^        read-buffer size to use while reading files.$^    process_ahead : int$^        number of samples to pre-process ahead of time.$^    clock : float$^        start or fixed clock value between 0.0 and 1.0 for the first or all samples. has to be <= than final_clock.$^    final_clock : float$^        final clock value between 0.0 and 1.0 for the last sample. has to be >= than clock.$^        requires samples.__len__ attribute.$^$^    returns$^    -------$^    iterable of util.sample_collections.labeledsample or util.audio.sample$^    """$^    def timed_samples():$^        if final_clock is none:$^            for sample in samples:$^                yield sample, clock$^        else:$^            for sample_index, sample in enumerate(samples):$^                sample_clock = clock + (final_clock - clock) * (sample_index / len(samples))$^                yield sample, sample_clock$^$^    assert 0.0 <= clock <= 1.0$^    if final_clock is not none:$^        assert 0.0 <= final_clock <= 1.0$^        assert clock <= final_clock$^    augmentations = [aug for aug in augmentations if isinstance(aug, sampleaugmentation)] if augmentations else []$^    try:$^        for augmentation in augmentations:$^            augmentation.start(buffering=buffering)$^        context = augmentationcontext(audio_type, augmentations)$^        if process_ahead == 0:$^            for timed_sample in timed_samples():$^                yield _load_and_augment_sample(timed_sample, context=context)$^        else:$^            with limitingpool(process_ahead=process_ahead,$^                              initializer=_init_augmentation_worker,$^                              initargs=(context,)) as pool:$^                yield from pool.imap(_load_and_augment_sample, timed_samples())$^    finally:$^        for augmentation in augmentations:$^            augmentation.stop()$^$^$^def _enqueue_overlay_samples(sample_source, queue, buffering=buffer_size):$^    """$^    as the central distribution point for overlay samples this function is supposed to run in one process only.$^    this ensures that samples are not used twice if not required.$^    it loads the (raw and still compressed) data and provides it to the actual augmentation workers.$^    these are then doing decompression, potential conversion and overlaying in parallel.$^    """$^    samples = samples_from_source(sample_source, buffering=buffering, labeled=false)$^    while true:$^        for sample in samples:$^            queue.put(sample)$^$^$^class overlay(sampleaugmentation):$^    """see "overlay augmentation" in training documentation"""$^    def __init__(self, source, p=1.0, snr=3.0, layers=1):$^        super(overlay, self).__init__(p)$^        self.source = source$^        self.snr = float_range(snr)$^        self.layers = int_range(layers)$^        self.current_sample = none$^        self.queue = none$^        self.enqueue_process = none$^$^    def start(self, buffering=buffer_size):$^        self.queue = queue(max(1, math.floor(self.probability * self.layers[1] * os.cpu_count())))$^        self.enqueue_process = process(target=_enqueue_overlay_samples,$^                                       args=(self.source, self.queue),$^                                       kwargs={'buffering': buffering})$^        self.enqueue_process.start()$^$^    def apply(self, sample, clock=0.0):$^        sample = unpack_maybe(sample)$^        sample.change_audio_type(new_audio_type=audio_type_np)$^        n_layers = pick_value_from_range(self.layers, clock=clock)$^        audio = sample.audio$^        overlay_data = np.zeros_like(audio)$^        for _ in range(n_layers):$^            overlay_offset = 0$^            while overlay_offset < len(audio):$^                if self.current_sample is none:$^                    next_overlay_sample = self.queue.get()$^                    next_overlay_sample = unpack_maybe(next_overlay_sample)$^                    next_overlay_sample.change_audio_type(new_audio_type=audio_type_np)$^                    self.current_sample = next_overlay_sample.audio$^                n_required = len(audio) - overlay_offset$^                n_current = len(self.current_sample)$^                if n_required >= n_current:  # take it completely$^                    overlay_data[overlay_offset:overlay_offset + n_current] += self.current_sample$^                    overlay_offset += n_current$^                    self.current_sample = none$^                else:  # take required slice from head and keep tail for next layer or sample$^                    overlay_data[overlay_offset:overlay_offset + n_required] += self.current_sample[0:n_required]$^                    overlay_offset += n_required$^                    self.current_sample = self.current_sample[n_required:]$^        snr_db = pick_value_from_range(self.snr, clock=clock)$^        orig_dbfs = max_dbfs(audio)$^        overlay_gain = orig_dbfs - max_dbfs(overlay_data) - snr_db$^        audio += overlay_data * gain_db_to_ratio(overlay_gain)$^        sample.audio = normalize_audio(audio, dbfs=orig_dbfs)$^$^    def stop(self):$^        if self.enqueue_process is not none:$^            self.enqueue_process.terminate()$^            self.enqueue_process = none$^        self.current_sample = none$^        self.queue = none$^$^$^class codec(sampleaugmentation):$^    """see "codec augmentation" in training documentation"""$^    def __init__(self, p=1.0, bitrate=3200):$^        super(codec, self).__init__(p)$^        self.bitrate = int_range(bitrate)$^$^    def apply(self, sample, clock=0.0):$^        bitrate = pick_value_from_range(self.bitrate, clock=clock)$^        sample.change_audio_type(new_audio_type=audio_type_pcm)  # decoding to ensure it has to get encoded again$^        sample.change_audio_type(new_audio_type=audio_type_opus, bitrate=bitrate)  # will get decoded again downstream$^$^$^class reverb(sampleaugmentation):$^    """see "reverb augmentation" in training documentation"""$^    def __init__(self, p=1.0, delay=20.0, decay=10.0):$^        super(reverb, self).__init__(p)$^        self.delay = float_range(delay)$^        self.decay = float_range(decay)$^$^    def apply(self, sample, clock=0.0):$^        sample.change_audio_type(new_audio_type=audio_type_np)$^        audio = np.array(sample.audio, dtype=np.float64)$^        orig_dbfs = max_dbfs(audio)$^        delay = pick_value_from_range(self.delay, clock=clock)$^        decay = pick_value_from_range(self.decay, clock=clock)$^        decay = gain_db_to_ratio(-decay)$^        result = np.copy(audio)$^        primes = [17, 19, 23, 29, 31]$^        for delay_prime in primes:  # primes to minimize comb filter interference$^            layer = np.copy(audio)$^            n_delay = math.floor(delay * (delay_prime / primes[0]) * sample.audio_format.rate / 1000.0)$^            n_delay = max(16, n_delay)  # 16 samples minimum to avoid performance trap and risk of division by zero$^            for w_index in range(0, math.floor(len(audio) / n_delay)):$^                w1 = w_index * n_delay$^                w2 = (w_index + 1) * n_delay$^                width = min(len(audio) - w2, n_delay)  # last window could be smaller$^                layer[w2:w2 + width] += decay * layer[w1:w1 + width]$^            result += layer$^        audio = normalize_audio(result, dbfs=orig_dbfs)$^        sample.audio = np.array(audio, dtype=np.float32)$^$^$^class resample(sampleaugmentation):$^    """see "resample augmentation" in training documentation"""$^    def __init__(self, p=1.0, rate=8000):$^        super(resample, self).__init__(p)$^        self.rate = int_range(rate)$^$^    def apply(self, sample, clock=0.0):$^        sample.change_audio_type(new_audio_type=audio_type_np)$^        rate = pick_value_from_range(self.rate, clock=clock)$^        orig_len = len(sample.audio)$^        resampled = resampy.resample(sample.audio, sample.audio_format.rate, rate, axis=0, filter='kaiser_fast')$^        sample.audio = resampy.resample(resampled, rate, sample.audio_format.rate, axis=0, filter='kaiser_fast')[:orig_len]$^$^$^class normalizesamplerate(sampleaugmentation):$^    def __init__(self, rate):$^        super().__init__(p=1.0)$^        self.rate = rate$^$^    def apply(self, sample, clock=0.0):$^        if sample.audio_format.rate == self.rate:$^            return$^$^        sample.change_audio_type(new_audio_type=audio_type_np)$^        sample.audio = resampy.resample(sample.audio, sample.audio_format.rate, self.rate, axis=0, filter='kaiser_fast')$^        sample.audio_format = sample.audio_format._replace(rate=self.rate)$^$^$^class volume(sampleaugmentation):$^    """see "volume augmentation" in training documentation"""$^    def __init__(self, p=1.0, dbfs=3.0103):$^        super(volume, self).__init__(p)$^        self.target_dbfs = float_range(dbfs)$^$^    def apply(self, sample, clock=0.0):$^        sample.change_audio_type(new_audio_type=audio_type_np)$^        target_dbfs = pick_value_from_range(self.target_dbfs, clock=clock)$^        sample.audio = normalize_audio(sample.audio, dbfs=target_dbfs)$^$^$^class pitch(graphaugmentation):$^    """see "pitch augmentation" in training documentation"""$^    def __init__(self, p=1.0, pitch=(1.075, 1.075, 0.125)):$^        super(pitch, self).__init__(p, domain='spectrogram')$^        self.pitch = float_range(pitch)$^$^    def apply(self, tensor, transcript=none, clock=0.0):$^        import tensorflow as tf  # pylint: disable=import-outside-toplevel$^        original_shape = tf.shape(tensor)$^        pitch = tf_pick_value_from_range(self.pitch, clock=clock)$^        new_freq_size = tf.cast(tf.cast(original_shape[2], tf.float32) * pitch, tf.int32)$^        spectrogram_aug = tf.image.resize_bilinear(tf.expand_dims(tensor, -1), [original_shape[1], new_freq_size])$^        spectrogram_aug = tf.image.crop_to_bounding_box(spectrogram_aug,$^                                                        offset_height=0,$^                                                        offset_width=0,$^                                                        target_height=original_shape[1],$^                                                        target_width=tf.math.minimum(original_shape[2], new_freq_size))$^        spectrogram_aug = tf.cond(pitch < 1,$^                                  lambda: tf.image.pad_to_bounding_box(spectrogram_aug,$^                                                                       offset_height=0,$^                                                                       offset_width=0,$^                                                                       target_height=tf.shape(spectrogram_aug)[1],$^                                                                       target_width=original_shape[2]),$^                                  lambda: spectrogram_aug)$^        return spectrogram_aug[:, :, :, 0]$^$^$^class tempo(graphaugmentation):$^    """see "tempo augmentation" in training documentation"""$^    def __init__(self, p=1.0, factor=1.1, max_time=-1):$^        super(tempo, self).__init__(p, domain='spectrogram')$^        self.factor = float_range(factor)$^        self.max_time = float(max_time)$^$^    def apply(self, tensor, transcript=none, clock=0.0):$^        import tensorflow as tf  # pylint: disable=import-outside-toplevel$^        factor = tf_pick_value_from_range(self.factor, clock=clock)$^        original_shape = tf.shape(tensor)$^        new_time_size = tf.cast(tf.cast(original_shape[1], tf.float32) / factor, tf.int32)$^        if transcript is not none:$^            new_time_size = tf.math.maximum(new_time_size, tf.shape(transcript)[1])$^        if self.max_time > 0:$^            new_time_size = tf.math.minimum(new_time_size, tf.cast(self.max_time * self.units_per_ms(), tf.int32))$^        spectrogram_aug = tf.image.resize_bilinear(tf.expand_dims(tensor, -1), [new_time_size, original_shape[2]])$^        return spectrogram_aug[:, :, :, 0]$^$^$^class warp(graphaugmentation):$^    """see "warp augmentation" in training documentation"""$^    def __init__(self, p=1.0, nt=1, nf=1, wt=0.1, wf=0.0):$^        super(warp, self).__init__(p, domain='spectrogram')$^        self.num_t = int_range(nt)$^        self.num_f = int_range(nf)$^        self.warp_t = float_range(wt)$^        self.warp_f = float_range(wf)$^$^    def apply(self, tensor, transcript=none, clock=0.0):$^        import tensorflow as tf  # pylint: disable=import-outside-toplevel$^        original_shape = tf.shape(tensor)$^        size_t, size_f = original_shape[1], original_shape[2]$^        seed = (clock * tf.int32.min, clock * tf.int32.max)$^        num_t = tf_pick_value_from_range(self.num_t, clock=clock)$^        num_f = tf_pick_value_from_range(self.num_f, clock=clock)$^$^        def get_flows(n, size, warp):$^            warp = tf_pick_value_from_range(warp, clock=clock)$^            warp = warp * tf.cast(size, dtype=tf.float32) / tf.cast(2 * (n + 1), dtype=tf.float32)$^            f = tf.random.stateless_normal([num_t, num_f], seed, mean=0.0, stddev=warp, dtype=tf.float32)$^            return tf.pad(f, tf.constant([[1, 1], [1, 1]]), 'constant')  # zero flow at all edges$^$^        flows = tf.stack([get_flows(num_t, size_t, self.warp_t), get_flows(num_f, size_f, self.warp_f)], axis=2)$^        flows = tf.image.resize_bicubic(tf.expand_dims(flows, 0), [size_t, size_f])$^        spectrogram_aug = tf.contrib.image.dense_image_warp(tf.expand_dims(tensor, -1), flows)$^        return tf.reshape(spectrogram_aug, shape=(1, -1, size_f))$^$^$^class frequencymask(graphaugmentation):$^    """see "frequency mask augmentation" in training documentation"""$^    def __init__(self, p=1.0, n=3, size=2):$^        super(frequencymask, self).__init__(p, domain='spectrogram')$^        self.n = int_range(n)  # pylint: disable=invalid-name$^        self.size = int_range(size)$^$^    def apply(self, tensor, transcript=none, clock=0.0):$^        import tensorflow as tf  # pylint: disable=import-outside-toplevel$^        time_max = tf.shape(tensor)[1]$^        freq_max = tf.shape(tensor)[2]$^        n = tf_pick_value_from_range(self.n, clock=clock)$^$^        def body(i, spectrogram_aug):$^            size = tf_pick_value_from_range(self.size, clock=clock)$^            size = tf.math.maximum(1, tf.math.minimum(freq_max - 1, size))$^            seed = tf.cast(clock * tf.int32.max, tf.int32) - i$^            f0 = tf.random.stateless_uniform((), (-seed, seed), minval=0, maxval=freq_max - size, dtype=tf.dtypes.int32)$^            freq_mask = tf.concat([tf.ones([1, time_max, f0]),$^                                   tf.zeros([1, time_max, size]),$^                                   tf.ones([1, time_max, freq_max - f0 - size])], axis=2)$^            return i + 1, spectrogram_aug * freq_mask$^$^        return tf.while_loop(lambda i, spectrogram_aug: i < n, body, (0, tensor))[1]$^$^$^class timemask(graphaugmentation):$^    """see "time mask augmentation" in training documentation"""$^    def __init__(self, p=1.0, domain='spectrogram', n=3, size=10.0):$^        super(timemask, self).__init__(p, domain=domain)$^        self.n = int_range(n)  # pylint: disable=invalid-name$^        self.size = float_range(size)$^$^    def apply(self, tensor, transcript=none, clock=0.0):$^        import tensorflow as tf  # pylint: disable=import-outside-toplevel$^        time_max = tf.shape(tensor)[0 if self.domain == 'signal' else 1]$^        n = tf_pick_value_from_range(self.n, clock=clock)$^$^        def body(i, augmented):$^            size = tf.cast(tf_pick_value_from_range(self.size, clock=clock) * self.units_per_ms(), dtype=tf.int32)$^            size = tf.math.maximum(1, tf.math.minimum(time_max - 1, size))$^            seed = tf.cast(clock * tf.int32.max, tf.int32) - i$^            t0 = tf.random.stateless_uniform((), (-seed, seed), minval=0, maxval=time_max - size, dtype=tf.dtypes.int32)$^            rest = time_max - t0 - size$^            if self.domain == 'spectrogram':$^                fm = tf.shape(tensor)[2]$^                time_mask = tf.concat([tf.ones([1, t0, fm]), tf.zeros([1, size, fm]), tf.ones([1, rest, fm])], axis=1)$^            elif self.domain == 'signal':$^                time_mask = tf.concat([tf.ones([t0, 1]), tf.zeros([size, 1]), tf.ones([rest, 1])], axis=0)$^            else:$^                time_mask = tf.concat([tf.ones([1, t0]), tf.zeros([1, size]), tf.ones([1, rest])], axis=1)$^            return i + 1, augmented * time_mask$^$^        return tf.while_loop(lambda i, augmented: i < n, body, (0, tensor))[1]$^$^$^class dropout(graphaugmentation):$^    """see "dropout augmentation" in training documentation"""$^    def __init__(self, p=1.0, domain='spectrogram', rate=0.05):$^        super(dropout, self).__init__(p, domain=domain)$^        self.rate = float_range(rate)$^$^    def apply(self, tensor, transcript=none, clock=0.0):$^        import tensorflow as tf  # pylint: disable=import-outside-toplevel$^        rate = tf_pick_value_from_range(self.rate, clock=clock)$^        rate = tf.math.maximum(0.0, rate)$^        factors = tf.random.stateless_uniform(tf.shape(tensor),$^                                              (clock * tf.int32.min, clock * tf.int32.max),$^                                              minval=0.0,$^                                              maxval=1.0,$^                                              dtype=tf.float32)$^        return tensor * tf.math.sign(tf.math.floor(factors + rate))$^$^$^class add(graphaugmentation):$^    """see "add augmentation" in training documentation"""$^    def __init__(self, p=1.0, domain='features', stddev=5):$^        super(add, self).__init__(p, domain=domain)$^        self.stddev = float_range(stddev)$^$^    def apply(self, tensor, transcript=none, clock=0.0):$^        import tensorflow as tf  # pylint: disable=import-outside-toplevel$^        stddev = tf_pick_value_from_range(self.stddev, clock=clock)$^        seed = (clock * tf.int32.min, clock * tf.int32.max)$^        return tensor + tf.random.stateless_normal(tf.shape(tensor), seed, mean=0.0, stddev=stddev)$^$^$^class multiply(graphaugmentation):$^    """see "multiply augmentation" in training documentation"""$^    def __init__(self, p=1.0, domain='features', stddev=5):$^        super(multiply, self).__init__(p, domain=domain)$^        self.stddev = float_range(stddev)$^$^    def apply(self, tensor, transcript=none, clock=0.0):$^        import tensorflow as tf  # pylint: disable=import-outside-toplevel$^        stddev = tf_pick_value_from_range(self.stddev, clock=clock)$^        seed = (clock * tf.int32.min, clock * tf.int32.max)$^        return tensor * tf.random.stateless_normal(tf.shape(tensor), seed, mean=1.0, stddev=stddev)$^#!/usr/bin/env python$^# -*- coding: utf-8 -*-$^from __future__ import absolute_import, division, print_function$^$^import os$^import sys$^$^log_level_index = sys.argv.index('--log_level') + 1 if '--log_level' in sys.argv else 0$^desired_log_level = sys.argv[log_level_index] if 0 < log_level_index < len(sys.argv) else '3'$^os.environ['tf_cpp_min_log_level'] = desired_log_level$^$^import absl.app$^import numpy as np$^import progressbar$^import shutil$^import tensorflow as tf$^import tensorflow.compat.v1 as tfv1$^import time$^$^tfv1.logging.set_verbosity({$^    '0': tfv1.logging.debug,$^    '1': tfv1.logging.info,$^    '2': tfv1.logging.warn,$^    '3': tfv1.logging.error$^}.get(desired_log_level))$^$^from datetime import datetime$^from ds_ctcdecoder import ctc_beam_search_decoder, scorer$^from .evaluate import evaluate$^from six.moves import zip, range$^from .util.config import config, initialize_globals$^from .util.checkpoints import load_or_init_graph_for_training, load_graph_for_evaluation, reload_best_checkpoint$^from .util.evaluate_tools import save_samples_json$^from .util.feeding import create_dataset, audio_to_features, audiofile_to_features$^from .util.flags import create_flags, flags$^from .util.helpers import check_ctcdecoder_version, exceptionbox$^from .util.logging import create_progressbar, log_debug, log_error, log_info, log_progress, log_warn$^from .util.io import open_remote, remove_remote, listdir_remote, is_remote_path, isdir_remote$^$^check_ctcdecoder_version()$^$^# graph creation$^# ==============$^$^def variable_on_cpu(name, shape, initializer):$^    r"""$^    next we concern ourselves with graph creation.$^    however, before we do so we must introduce a utility function ``variable_on_cpu()``$^    used to create a variable in cpu memory.$^    """$^    # use the /cpu:0 device for scoped operations$^    with tf.device(config.cpu_device):$^        # create or get apropos variable$^        var = tfv1.get_variable(name=name, shape=shape, initializer=initializer)$^    return var$^$^$^def create_overlapping_windows(batch_x):$^    batch_size = tf.shape(input=batch_x)[0]$^    window_width = 2 * config.n_context + 1$^    num_channels = config.n_input$^$^    # create a constant convolution filter using an identity matrix, so that the$^    # convolution returns patches of the input tensor as is, and we can create$^    # overlapping windows over the mfccs.$^    eye_filter = tf.constant(np.eye(window_width * num_channels)$^                               .reshape(window_width, num_channels, window_width * num_channels), tf.float32) # pylint: disable=bad-continuation$^$^    # create overlapping windows$^    batch_x = tf.nn.conv1d(input=batch_x, filters=eye_filter, stride=1, padding='same')$^$^    # remove dummy depth dimension and reshape into [batch_size, n_windows, window_width, n_input]$^    batch_x = tf.reshape(batch_x, [batch_size, -1, window_width, num_channels])$^$^    return batch_x$^$^$^def dense(name, x, units, dropout_rate=none, relu=true, layer_norm=false):$^    with tfv1.variable_scope(name):$^        bias = variable_on_cpu('bias', [units], tfv1.zeros_initializer())$^        weights = variable_on_cpu('weights', [x.shape[-1], units], tfv1.keras.initializers.variancescaling(scale=1.0, mode="fan_avg", distribution="uniform"))$^$^    output = tf.nn.bias_add(tf.matmul(x, weights), bias)$^$^    if relu:$^        output = tf.minimum(tf.nn.relu(output), flags.relu_clip)$^$^    if layer_norm:$^        with tfv1.variable_scope(name):$^            output = tf.contrib.layers.layer_norm(output)$^$^    if dropout_rate is not none:$^        output = tf.nn.dropout(output, rate=dropout_rate)$^$^    return output$^$^$^def rnn_impl_lstmblockfusedcell(x, seq_length, previous_state, reuse):$^    with tfv1.variable_scope('cudnn_lstm/rnn/multi_rnn_cell/cell_0'):$^        fw_cell = tf.contrib.rnn.lstmblockfusedcell(config.n_cell_dim,$^                                                    forget_bias=0,$^                                                    reuse=reuse,$^                                                    name='cudnn_compatible_lstm_cell')$^$^        output, output_state = fw_cell(inputs=x,$^                                       dtype=tf.float32,$^                                       sequence_length=seq_length,$^                                       initial_state=previous_state)$^$^    return output, output_state$^$^$^def rnn_impl_cudnn_rnn(x, seq_length, previous_state, _):$^    assert previous_state is none # 'passing previous state not supported with cudnn backend'$^$^    # hack: cudnnlstm works similarly to keras layers in that when you instantiate$^    # the object it creates the variables, and then you just call it several times$^    # to enable variable re-use. because all of our code is structure in an old$^    # school tensorflow structure where you can just call tf.get_variable again with$^    # reuse=true to reuse variables, we can't easily make use of the object oriented$^    # way cudnnlstm is implemented, so we save a singleton instance in the function,$^    # emulating a static function variable.$^    if not rnn_impl_cudnn_rnn.cell:$^        # forward direction cell:$^        fw_cell = tf.contrib.cudnn_rnn.cudnnlstm(num_layers=1,$^                                                 num_units=config.n_cell_dim,$^                                                 input_mode='linear_input',$^                                                 direction='unidirectional',$^                                                 dtype=tf.float32)$^        rnn_impl_cudnn_rnn.cell = fw_cell$^$^    output, output_state = rnn_impl_cudnn_rnn.cell(inputs=x,$^                                                   sequence_lengths=seq_length)$^$^    return output, output_state$^$^rnn_impl_cudnn_rnn.cell = none$^$^$^def rnn_impl_static_rnn(x, seq_length, previous_state, reuse):$^    with tfv1.variable_scope('cudnn_lstm/rnn/multi_rnn_cell'):$^        # forward direction cell:$^        fw_cell = tfv1.nn.rnn_cell.lstmcell(config.n_cell_dim,$^                                            forget_bias=0,$^                                            reuse=reuse,$^                                            name='cudnn_compatible_lstm_cell')$^$^        # split rank n tensor into list of rank n-1 tensors$^        x = [x[l] for l in range(x.shape[0])]$^$^        output, output_state = tfv1.nn.static_rnn(cell=fw_cell,$^                                                  inputs=x,$^                                                  sequence_length=seq_length,$^                                                  initial_state=previous_state,$^                                                  dtype=tf.float32,$^                                                  scope='cell_0')$^$^        output = tf.concat(output, 0)$^$^    return output, output_state$^$^$^def create_model(batch_x, seq_length, dropout, reuse=false, batch_size=none, previous_state=none, overlap=true, rnn_impl=rnn_impl_lstmblockfusedcell):$^    layers = {}$^$^    # input shape: [batch_size, n_steps, n_input + 2*n_input*n_context]$^    if not batch_size:$^        batch_size = tf.shape(input=batch_x)[0]$^$^    # create overlapping feature windows if needed$^    if overlap:$^        batch_x = create_overlapping_windows(batch_x)$^$^    # reshaping `batch_x` to a tensor with shape `[n_steps*batch_size, n_input + 2*n_input*n_context]`.$^    # this is done to prepare the batch for input into the first layer which expects a tensor of rank `2`.$^$^    # permute n_steps and batch_size$^    batch_x = tf.transpose(a=batch_x, perm=[1, 0, 2, 3])$^    # reshape to prepare input for first layer$^    batch_x = tf.reshape(batch_x, [-1, config.n_input + 2*config.n_input*config.n_context]) # (n_steps*batch_size, n_input + 2*n_input*n_context)$^    layers['input_reshaped'] = batch_x$^$^    # the next three blocks will pass `batch_x` through three hidden layers with$^    # clipped relu activation and dropout.$^    layers['layer_1'] = layer_1 = dense('layer_1', batch_x, config.n_hidden_1, dropout_rate=dropout[0], layer_norm=flags.layer_norm)$^    layers['layer_2'] = layer_2 = dense('layer_2', layer_1, config.n_hidden_2, dropout_rate=dropout[1], layer_norm=flags.layer_norm)$^    layers['layer_3'] = layer_3 = dense('layer_3', layer_2, config.n_hidden_3, dropout_rate=dropout[2], layer_norm=flags.layer_norm)$^$^    # `layer_3` is now reshaped into `[n_steps, batch_size, 2*n_cell_dim]`,$^    # as the lstm rnn expects its input to be of shape `[max_time, batch_size, input_size]`.$^    layer_3 = tf.reshape(layer_3, [-1, batch_size, config.n_hidden_3])$^$^    # run through parametrized rnn implementation, as we use different rnns$^    # for training and inference$^    output, output_state = rnn_impl(layer_3, seq_length, previous_state, reuse)$^$^    # reshape output from a tensor of shape [n_steps, batch_size, n_cell_dim]$^    # to a tensor of shape [n_steps*batch_size, n_cell_dim]$^    output = tf.reshape(output, [-1, config.n_cell_dim])$^    layers['rnn_output'] = output$^    layers['rnn_output_state'] = output_state$^$^    # now we feed `output` to the fifth hidden layer with clipped relu activation$^    layers['layer_5'] = layer_5 = dense('layer_5', output, config.n_hidden_5, dropout_rate=dropout[5], layer_norm=flags.layer_norm)$^$^    # now we apply a final linear layer creating `n_classes` dimensional vectors, the logits.$^    layers['layer_6'] = layer_6 = dense('layer_6', layer_5, config.n_hidden_6, relu=false)$^$^    # finally we reshape layer_6 from a tensor of shape [n_steps*batch_size, n_hidden_6]$^    # to the slightly more useful shape [n_steps, batch_size, n_hidden_6].$^    # note, that this differs from the input in that it is time-major.$^    layer_6 = tf.reshape(layer_6, [-1, batch_size, config.n_hidden_6], name='raw_logits')$^    layers['raw_logits'] = layer_6$^$^    # output shape: [n_steps, batch_size, n_hidden_6]$^    return layer_6, layers$^$^$^# accuracy and loss$^# =================$^$^# in accord with 'deep speech: scaling up end-to-end speech recognition'$^# (http://arxiv.org/abs/1412.5567),$^# the loss function used by our network should be the ctc loss function$^# (http://www.cs.toronto.edu/~graves/preprint.pdf).$^# conveniently, this loss function is implemented in tensorflow.$^# thus, we can simply make use of this implementation to define our loss.$^$^def calculate_mean_edit_distance_and_loss(iterator, dropout, reuse):$^    r'''$^    this routine beam search decodes a mini-batch and calculates the loss and mean edit distance.$^    next to total and average loss it returns the mean edit distance,$^    the decoded result and the batch's original y.$^    '''$^    # obtain the next batch of data$^    batch_filenames, (batch_x, batch_seq_len), batch_y = iterator.get_next()$^$^    if flags.train_cudnn:$^        rnn_impl = rnn_impl_cudnn_rnn$^    else:$^        rnn_impl = rnn_impl_lstmblockfusedcell$^$^    # calculate the logits of the batch$^    logits, _ = create_model(batch_x, batch_seq_len, dropout, reuse=reuse, rnn_impl=rnn_impl)$^$^    # compute the ctc loss using tensorflow's `ctc_loss`$^    total_loss = tfv1.nn.ctc_loss(labels=batch_y, inputs=logits, sequence_length=batch_seq_len)$^$^    # check if any files lead to non finite loss$^    non_finite_files = tf.gather(batch_filenames, tfv1.where(~tf.math.is_finite(total_loss)))$^$^    # calculate the average loss across the batch$^    avg_loss = tf.reduce_mean(input_tensor=total_loss)$^$^    # finally we return the average loss$^    return avg_loss, non_finite_files$^$^$^# adam optimization$^# =================$^$^# in contrast to 'deep speech: scaling up end-to-end speech recognition'$^# (http://arxiv.org/abs/1412.5567),$^# in which 'nesterov's accelerated gradient descent'$^# (www.cs.toronto.edu/~fritz/absps/momentum.pdf) was used,$^# we will use the adam method for optimization (http://arxiv.org/abs/1412.6980),$^# because, generally, it requires less fine-tuning.$^def create_optimizer(learning_rate_var):$^    optimizer = tfv1.train.adamoptimizer(learning_rate=learning_rate_var,$^                                         beta1=flags.beta1,$^                                         beta2=flags.beta2,$^                                         epsilon=flags.epsilon)$^    return optimizer$^$^$^# towers$^# ======$^$^# in order to properly make use of multiple gpu's, one must introduce new abstractions,$^# not present when using a single gpu, that facilitate the multi-gpu use case.$^# in particular, one must introduce a means to isolate the inference and gradient$^# calculations on the various gpu's.$^# the abstraction we intoduce for this purpose is called a 'tower'.$^# a tower is specified by two properties:$^# * **scope** - a scope, as provided by `tf.name_scope()`,$^# is a means to isolate the operations within a tower.$^# for example, all operations within 'tower 0' could have their name prefixed with `tower_0/`.$^# * **device** - a hardware device, as provided by `tf.device()`,$^# on which all operations within the tower execute.$^# for example, all operations of 'tower 0' could execute on the first gpu `tf.device('/gpu:0')`.$^$^def get_tower_results(iterator, optimizer, dropout_rates):$^    r'''$^    with this preliminary step out of the way, we can for each gpu introduce a$^    tower for which's batch we calculate and return the optimization gradients$^    and the average loss across towers.$^    '''$^    # to calculate the mean of the losses$^    tower_avg_losses = []$^$^    # tower gradients to return$^    tower_gradients = []$^$^    # aggregate any non finite files in the batches$^    tower_non_finite_files = []$^$^    with tfv1.variable_scope(tfv1.get_variable_scope()):$^        # loop over available_devices$^        for i in range(len(config.available_devices)):$^            # execute operations of tower i on device i$^            device = config.available_devices[i]$^            with tf.device(device):$^                # create a scope for all operations of tower i$^                with tf.name_scope('tower_%d' % i):$^                    # calculate the avg_loss and mean_edit_distance and retrieve the decoded$^                    # batch along with the original batch's labels (y) of this tower$^                    avg_loss, non_finite_files = calculate_mean_edit_distance_and_loss(iterator, dropout_rates, reuse=i > 0)$^$^                    # allow for variables to be re-used by the next tower$^                    tfv1.get_variable_scope().reuse_variables()$^$^                    # retain tower's avg losses$^                    tower_avg_losses.append(avg_loss)$^$^                    # compute gradients for model parameters using tower's mini-batch$^                    gradients = optimizer.compute_gradients(avg_loss)$^$^                    # retain tower's gradients$^                    tower_gradients.append(gradients)$^$^                    tower_non_finite_files.append(non_finite_files)$^$^    avg_loss_across_towers = tf.reduce_mean(input_tensor=tower_avg_losses, axis=0)$^    tfv1.summary.scalar(name='step_loss', tensor=avg_loss_across_towers, collections=['step_summaries'])$^$^    all_non_finite_files = tf.concat(tower_non_finite_files, axis=0)$^$^    # return gradients and the average loss$^    return tower_gradients, avg_loss_across_towers, all_non_finite_files$^$^$^def average_gradients(tower_gradients):$^    r'''$^    a routine for computing each variable's average of the gradients obtained from the gpus.$^    note also that this code acts as a synchronization point as it requires all$^    gpus to be finished with their mini-batch before it can run to completion.$^    '''$^    # list of average gradients to return to the caller$^    average_grads = []$^$^    # run this on cpu_device to conserve gpu memory$^    with tf.device(config.cpu_device):$^        # loop over gradient/variable pairs from all towers$^        for grad_and_vars in zip(*tower_gradients):$^            # introduce grads to store the gradients for the current variable$^            grads = []$^$^            # loop over the gradients for the current variable$^            for g, _ in grad_and_vars:$^                # add 0 dimension to the gradients to represent the tower.$^                expanded_g = tf.expand_dims(g, 0)$^                # append on a 'tower' dimension which we will average over below.$^                grads.append(expanded_g)$^$^            # average over the 'tower' dimension$^            grad = tf.concat(grads, 0)$^            grad = tf.reduce_mean(input_tensor=grad, axis=0)$^$^            # create a gradient/variable tuple for the current variable with its average gradient$^            grad_and_var = (grad, grad_and_vars[0][1])$^$^            # add the current tuple to average_grads$^            average_grads.append(grad_and_var)$^$^    # return result to caller$^    return average_grads$^$^$^$^# logging$^# =======$^$^def log_variable(variable, gradient=none):$^    r'''$^    we introduce a function for logging a tensor variable's current state.$^    it logs scalar values for the mean, standard deviation, minimum and maximum.$^    furthermore it logs a histogram of its state and (if given) of an optimization gradient.$^    '''$^    name = variable.name.replace(':', '_')$^    mean = tf.reduce_mean(input_tensor=variable)$^    tfv1.summary.scalar(name='%s/mean'   % name, tensor=mean)$^    tfv1.summary.scalar(name='%s/sttdev' % name, tensor=tf.sqrt(tf.reduce_mean(input_tensor=tf.square(variable - mean))))$^    tfv1.summary.scalar(name='%s/max'    % name, tensor=tf.reduce_max(input_tensor=variable))$^    tfv1.summary.scalar(name='%s/min'    % name, tensor=tf.reduce_min(input_tensor=variable))$^    tfv1.summary.histogram(name=name, values=variable)$^    if gradient is not none:$^        if isinstance(gradient, tf.indexedslices):$^            grad_values = gradient.values$^        else:$^            grad_values = gradient$^        if grad_values is not none:$^            tfv1.summary.histogram(name='%s/gradients' % name, values=grad_values)$^$^$^def log_grads_and_vars(grads_and_vars):$^    r'''$^    let's also introduce a helper function for logging collections of gradient/variable tuples.$^    '''$^    for gradient, variable in grads_and_vars:$^        log_variable(variable, gradient=gradient)$^$^$^def train():$^    exception_box = exceptionbox()$^$^    if flags.horovod:$^        import horovod.tensorflow as hvd$^$^    # create training and validation datasets$^    split_dataset = flags.horovod$^$^    train_set = create_dataset(flags.train_files.split(','),$^                               batch_size=flags.train_batch_size,$^                               epochs=flags.epochs,$^                               augmentations=config.augmentations,$^                               cache_path=flags.feature_cache,$^                               train_phase=true,$^                               exception_box=exception_box,$^                               process_ahead=config.num_devices * flags.train_batch_size * 2,$^                               reverse=flags.reverse_train,$^                               limit=flags.limit_train,$^                               buffering=flags.read_buffer,$^                               split_dataset=split_dataset)$^$^    iterator = tfv1.data.iterator.from_structure(tfv1.data.get_output_types(train_set),$^                                                 tfv1.data.get_output_shapes(train_set),$^                                                 output_classes=tfv1.data.get_output_classes(train_set))$^$^    # make initialization ops for switching between the two sets$^    train_init_op = iterator.make_initializer(train_set)$^$^    if flags.dev_files:$^        dev_sources = flags.dev_files.split(',')$^        dev_sets = [create_dataset([source],$^                                   batch_size=flags.dev_batch_size,$^                                   train_phase=false,$^                                   exception_box=exception_box,$^                                   process_ahead=config.num_devices * flags.dev_batch_size * 2,$^                                   reverse=flags.reverse_dev,$^                                   limit=flags.limit_dev,$^                                   buffering=flags.read_buffer,$^                                   split_dataset=split_dataset) for source in dev_sources]$^        dev_init_ops = [iterator.make_initializer(dev_set) for dev_set in dev_sets]$^$^    if flags.metrics_files:$^        metrics_sources = flags.metrics_files.split(',')$^        metrics_sets = [create_dataset([source],$^                                       batch_size=flags.dev_batch_size,$^                                       train_phase=false,$^                                       exception_box=exception_box,$^                                       process_ahead=config.num_devices * flags.dev_batch_size * 2,$^                                       reverse=flags.reverse_dev,$^                                       limit=flags.limit_dev,$^                                       buffering=flags.read_buffer,$^                                       split_dataset=split_dataset) for source in metrics_sources]$^        metrics_init_ops = [iterator.make_initializer(metrics_set) for metrics_set in metrics_sets]$^$^    # dropout$^    dropout_rates = [tfv1.placeholder(tf.float32, name='dropout_{}'.format(i)) for i in range(6)]$^    dropout_feed_dict = {$^        dropout_rates[0]: flags.dropout_rate,$^        dropout_rates[1]: flags.dropout_rate2,$^        dropout_rates[2]: flags.dropout_rate3,$^        dropout_rates[3]: flags.dropout_rate4,$^        dropout_rates[4]: flags.dropout_rate5,$^        dropout_rates[5]: flags.dropout_rate6,$^    }$^    no_dropout_feed_dict = {$^        rate: 0. for rate in dropout_rates$^    }$^$^    # building the graph$^    learning_rate_var = tfv1.get_variable('learning_rate', initializer=flags.learning_rate, trainable=false)$^    reduce_learning_rate_op = learning_rate_var.assign(tf.multiply(learning_rate_var, flags.plateau_reduction))$^    if flags.horovod:$^        # effective batch size in synchronous distributed training is scaled by the number of workers. an increase in learning rate compensates for the increased batch size.$^        optimizer = create_optimizer(learning_rate_var * hvd.size())$^        optimizer = hvd.distributedoptimizer(optimizer)$^    else:$^        optimizer = create_optimizer(learning_rate_var)$^$^    # enable mixed precision training$^    if flags.automatic_mixed_precision:$^        log_info('enabling automatic mixed precision training.')$^        optimizer = tfv1.train.experimental.enable_mixed_precision_graph_rewrite(optimizer)$^$^    if flags.horovod:$^        loss, non_finite_files = calculate_mean_edit_distance_and_loss(iterator, dropout_rates, reuse=false)$^        gradients = optimizer.compute_gradients(loss)$^$^        tfv1.summary.scalar(name='step_loss', tensor=loss, collections=['step_summaries'])$^        log_grads_and_vars(gradients)$^$^        # global_step is automagically incremented by the optimizer$^        global_step = tfv1.train.get_or_create_global_step()$^        apply_gradient_op = optimizer.apply_gradients(gradients, global_step=global_step)$^    else:$^        gradients, loss, non_finite_files = get_tower_results(iterator, optimizer, dropout_rates)$^$^        # average tower gradients across gpus$^        avg_tower_gradients = average_gradients(gradients)$^        log_grads_and_vars(avg_tower_gradients)$^$^        # global_step is automagically incremented by the optimizer$^        global_step = tfv1.train.get_or_create_global_step()$^        apply_gradient_op = optimizer.apply_gradients(avg_tower_gradients, global_step=global_step)$^$^    # summaries$^    step_summaries_op = tfv1.summary.merge_all('step_summaries')$^    step_summary_writers = {$^        'train': tfv1.summary.filewriter(os.path.join(flags.summary_dir, 'train'), max_queue=120),$^        'dev': tfv1.summary.filewriter(os.path.join(flags.summary_dir, 'dev'), max_queue=120),$^        'metrics': tfv1.summary.filewriter(os.path.join(flags.summary_dir, 'metrics'), max_queue=120),$^    }$^$^    human_readable_set_names = {$^        'train': 'training',$^        'dev': 'validation',$^        'metrics': 'metrics',$^    }$^$^    # checkpointing$^    if config.is_master_process:$^        checkpoint_saver = tfv1.train.saver(max_to_keep=flags.max_to_keep)$^        checkpoint_path = os.path.join(flags.save_checkpoint_dir, 'train')$^$^        best_dev_saver = tfv1.train.saver(max_to_keep=1)$^        best_dev_path = os.path.join(flags.save_checkpoint_dir, 'best_dev')$^$^        # save flags next to checkpoints$^        if not is_remote_path(flags.save_checkpoint_dir):$^            os.makedirs(flags.save_checkpoint_dir, exist_ok=true)$^        flags_file = os.path.join(flags.save_checkpoint_dir, 'flags.txt')$^        with open_remote(flags_file, 'w') as fout:$^            fout.write(flags.flags_into_string())$^$^    if flags.horovod:$^        bcast = hvd.broadcast_global_variables(0)$^$^    with tfv1.session(config=config.session_config) as session:$^        log_debug('session opened.')$^$^        # prevent further graph changes$^        tfv1.get_default_graph().finalize()$^$^        # load checkpoint or initialize variables$^        load_or_init_graph_for_training(session)$^        if flags.horovod:$^            bcast.run()$^$^        def run_set(set_name, epoch, init_op, dataset=none):$^            is_train = set_name == 'train'$^            train_op = apply_gradient_op if is_train else []$^            feed_dict = dropout_feed_dict if is_train else no_dropout_feed_dict$^$^            total_loss = 0.0$^            step_count = 0$^$^            step_summary_writer = step_summary_writers.get(set_name)$^            checkpoint_time = time.time()$^$^            if is_train and flags.cache_for_epochs > 0 and flags.feature_cache:$^                feature_cache_index = flags.feature_cache + '.index'$^                if epoch % flags.cache_for_epochs == 0 and os.path.isfile(feature_cache_index):$^                    log_info('invalidating feature cache')$^                    remove_remote(feature_cache_index)  # this will let tf also overwrite the related cache data files$^$^            # setup progress bar$^            class losswidget(progressbar.widgets.formatlabel):$^                def __init__(self):$^                    progressbar.widgets.formatlabel.__init__(self, format='loss: %(mean_loss)f')$^$^                def __call__(self, progress, data, **kwargs):$^                    data['mean_loss'] = total_loss / step_count if step_count else 0.0$^                    return progressbar.widgets.formatlabel.__call__(self, progress, data, **kwargs)$^$^            if config.is_master_process:$^                prefix = 'epoch {} | {:>10}'.format(epoch, human_readable_set_names[set_name])$^                widgets = [' | ', progressbar.widgets.timer(),$^                           ' | steps: ', progressbar.widgets.counter(),$^                           ' | ', losswidget()]$^                suffix = ' | dataset: {}'.format(dataset) if dataset else none$^                pbar = create_progressbar(prefix=prefix, widgets=widgets, suffix=suffix).start()$^$^            # initialize iterator to the appropriate dataset$^            session.run(init_op)$^$^            # batch loop$^            while true:$^                try:$^                    _, current_step, batch_loss, problem_files, step_summary = \$^                        session.run([train_op, global_step, loss, non_finite_files, step_summaries_op],$^                                    feed_dict=feed_dict)$^                    exception_box.raise_if_set()$^                except tf.errors.outofrangeerror:$^                    exception_box.raise_if_set()$^                    break$^$^                if problem_files.size > 0:$^                    problem_files = [f.decode('utf8') for f in problem_files[..., 0]]$^                    log_error('the following files caused an infinite (or nan) '$^                              'loss: {}'.format(','.join(problem_files)))$^$^                total_loss += batch_loss$^                step_count += 1$^$^                if config.is_master_process:$^                    pbar.update(step_count)$^$^                    step_summary_writer.add_summary(step_summary, current_step)$^$^                    if is_train and flags.checkpoint_secs > 0 and time.time() - checkpoint_time > flags.checkpoint_secs:$^                        checkpoint_saver.save(session, checkpoint_path, global_step=current_step)$^                        checkpoint_time = time.time()$^$^            if config.is_master_process:$^                pbar.finish()$^            mean_loss = total_loss / step_count if step_count > 0 else 0.0$^            return mean_loss, step_count$^$^        log_info('starting optimization')$^        train_start_time = datetime.utcnow()$^        best_dev_loss = float('inf')$^        dev_losses = []$^        epochs_without_improvement = 0$^        try:$^            for epoch in range(flags.epochs):$^                # training$^                if config.is_master_process:$^                    log_progress('training epoch %d...' % epoch)$^                train_loss, _ = run_set('train', epoch, train_init_op)$^                if config.is_master_process:$^                    log_progress('finished training epoch %d - loss: %f' % (epoch, train_loss))$^                    checkpoint_saver.save(session, checkpoint_path, global_step=global_step)$^$^                if flags.dev_files:$^                    # validation$^                    dev_loss = 0.0$^                    total_steps = 0$^                    for source, init_op in zip(dev_sources, dev_init_ops):$^                        if config.is_master_process:$^                            log_progress('validating epoch %d on %s...' % (epoch, source))$^                        set_loss, steps = run_set('dev', epoch, init_op, dataset=source)$^                        dev_loss += set_loss * steps$^                        total_steps += steps$^                        if config.is_master_process:$^                            log_progress('finished validating epoch %d on %s - loss: %f' % (epoch, source, set_loss))$^$^                    dev_loss = dev_loss / total_steps$^                    dev_losses.append(dev_loss)$^$^                    # count epochs without an improvement for early stopping and reduction of learning rate on a plateau$^                    # the improvement has to be greater than flags.es_min_delta$^                    if dev_loss > best_dev_loss - flags.es_min_delta:$^                        epochs_without_improvement += 1$^                    else:$^                        epochs_without_improvement = 0$^$^                    if config.is_master_process:$^                        # save new best model$^                        if dev_loss < best_dev_loss:$^                            best_dev_loss = dev_loss$^                            save_path = best_dev_saver.save(session, best_dev_path, global_step=global_step,$^                                                            latest_filename='best_dev_checkpoint')$^                            log_info("saved new best validating model with loss %f to: %s" % (best_dev_loss, save_path))$^$^                    # early stopping$^                    if flags.early_stop and epochs_without_improvement == flags.es_epochs:$^                        if config.is_master_process:$^                            log_info('early stop triggered as the loss did not improve the last {} epochs'.format($^                                epochs_without_improvement))$^                        break$^$^                    # reduce learning rate on plateau$^                    # if the learning rate was reduced and there is still no improvement$^                    # wait flags.plateau_epochs before the learning rate is reduced again$^                    if ($^                        flags.reduce_lr_on_plateau$^                        and epochs_without_improvement > 0$^                        and epochs_without_improvement % flags.plateau_epochs == 0$^                    ):$^                        # reload checkpoint that we use the best_dev weights again$^                        reload_best_checkpoint(session)$^$^                        # reduce learning rate$^                        session.run(reduce_learning_rate_op)$^                        current_learning_rate = learning_rate_var.eval()$^                        if config.is_master_process:$^                            log_info('encountered a plateau, reducing learning rate to {}'.format($^                                current_learning_rate))$^$^                            # overwrite best checkpoint with new learning rate value$^                            save_path = best_dev_saver.save(session, best_dev_path, global_step=global_step,$^                                                            latest_filename='best_dev_checkpoint')$^                            log_info("saved best validating model with reduced learning rate to: %s" % (save_path))$^$^                if flags.metrics_files:$^                    # read only metrics, not affecting best validation loss tracking$^                    for source, init_op in zip(metrics_sources, metrics_init_ops):$^                        if config.is_master_process:$^                            log_progress('metrics for epoch %d on %s...' % (epoch, source))$^                        set_loss, _ = run_set('metrics', epoch, init_op, dataset=source)$^                        if config.is_master_process:$^                            log_progress('metrics for epoch %d on %s - loss: %f' % (epoch, source, set_loss))$^$^                print('-' * 80)$^$^$^        except keyboardinterrupt:$^            pass$^        if config.is_master_process:$^            log_info('finished optimization in {}'.format(datetime.utcnow() - train_start_time))$^    log_debug('session closed.')$^$^$^def test():$^    samples = evaluate(flags.test_files.split(','), create_model)$^    if flags.test_output_file:$^        save_samples_json(samples, flags.test_output_file)$^$^$^def create_inference_graph(batch_size=1, n_steps=16, tflite=false):$^    batch_size = batch_size if batch_size > 0 else none$^$^    # create feature computation graph$^    input_samples = tfv1.placeholder(tf.float32, [config.audio_window_samples], 'input_samples')$^    samples = tf.expand_dims(input_samples, -1)$^    mfccs, _ = audio_to_features(samples, flags.audio_sample_rate)$^    mfccs = tf.identity(mfccs, name='mfccs')$^$^    # input tensor will be of shape [batch_size, n_steps, 2*n_context+1, n_input]$^    # this shape is read by the native_client in ds_createmodel to know the$^    # value of n_steps, n_context and n_input. make sure you update the code$^    # there if this shape is changed.$^    input_tensor = tfv1.placeholder(tf.float32, [batch_size, n_steps if n_steps > 0 else none, 2 * config.n_context + 1, config.n_input], name='input_node')$^    seq_length = tfv1.placeholder(tf.int32, [batch_size], name='input_lengths')$^$^    if batch_size <= 0:$^        # no state management since n_step is expected to be dynamic too (see below)$^        previous_state = none$^    else:$^        previous_state_c = tfv1.placeholder(tf.float32, [batch_size, config.n_cell_dim], name='previous_state_c')$^        previous_state_h = tfv1.placeholder(tf.float32, [batch_size, config.n_cell_dim], name='previous_state_h')$^$^        previous_state = tf.nn.rnn_cell.lstmstatetuple(previous_state_c, previous_state_h)$^$^    # one rate per layer$^    no_dropout = [none] * 6$^$^    if tflite:$^        rnn_impl = rnn_impl_static_rnn$^    else:$^        rnn_impl = rnn_impl_lstmblockfusedcell$^$^    logits, layers = create_model(batch_x=input_tensor,$^                                  batch_size=batch_size,$^                                  seq_length=seq_length if not flags.export_tflite else none,$^                                  dropout=no_dropout,$^                                  previous_state=previous_state,$^                                  overlap=false,$^                                  rnn_impl=rnn_impl)$^$^    # tf lite runtime will check that input dimensions are 1, 2 or 4$^    # by default we get 3, the middle one being batch_size which is forced to$^    # one on inference graph, so remove that dimension$^    if tflite:$^        logits = tf.squeeze(logits, [1])$^$^    # apply softmax for ctc decoder$^    probs = tf.nn.softmax(logits, name='logits')$^$^    if batch_size <= 0:$^        if tflite:$^            raise notimplementederror('dynamic batch_size does not support tflite nor streaming')$^        if n_steps > 0:$^            raise notimplementederror('dynamic batch_size expect n_steps to be dynamic too')$^        return ($^            {$^                'input': input_tensor,$^                'input_lengths': seq_length,$^            },$^            {$^                'outputs': probs,$^            },$^            layers$^        )$^$^    new_state_c, new_state_h = layers['rnn_output_state']$^    new_state_c = tf.identity(new_state_c, name='new_state_c')$^    new_state_h = tf.identity(new_state_h, name='new_state_h')$^$^    inputs = {$^        'input': input_tensor,$^        'previous_state_c': previous_state_c,$^        'previous_state_h': previous_state_h,$^        'input_samples': input_samples,$^    }$^$^    if not flags.export_tflite:$^        inputs['input_lengths'] = seq_length$^$^    outputs = {$^        'outputs': probs,$^        'new_state_c': new_state_c,$^        'new_state_h': new_state_h,$^        'mfccs': mfccs,$^$^        # expose internal layers for downstream applications$^        'layer_3': layers['layer_3'],$^        'layer_5': layers['layer_5']$^    }$^$^    return inputs, outputs, layers$^$^$^def file_relative_read(fname):$^    return open(os.path.join(os.path.dirname(__file__), fname)).read()$^$^$^def export():$^    r'''$^    restores the trained variables into a simpler graph that will be exported for serving.$^    '''$^    log_info('exporting the model...')$^$^    inputs, outputs, _ = create_inference_graph(batch_size=flags.export_batch_size, n_steps=flags.n_steps, tflite=flags.export_tflite)$^$^    graph_version = int(file_relative_read('graph_version').strip())$^    assert graph_version > 0$^$^    outputs['metadata_version'] = tf.constant([graph_version], name='metadata_version')$^    outputs['metadata_sample_rate'] = tf.constant([flags.audio_sample_rate], name='metadata_sample_rate')$^    outputs['metadata_feature_win_len'] = tf.constant([flags.feature_win_len], name='metadata_feature_win_len')$^    outputs['metadata_feature_win_step'] = tf.constant([flags.feature_win_step], name='metadata_feature_win_step')$^    outputs['metadata_beam_width'] = tf.constant([flags.export_beam_width], name='metadata_beam_width')$^    outputs['metadata_alphabet'] = tf.constant([config.alphabet.serialize()], name='metadata_alphabet')$^$^    if flags.export_language:$^        outputs['metadata_language'] = tf.constant([flags.export_language.encode('utf-8')], name='metadata_language')$^$^    # prevent further graph changes$^    tfv1.get_default_graph().finalize()$^$^    output_names_tensors = [tensor.op.name for tensor in outputs.values() if isinstance(tensor, tf.tensor)]$^    output_names_ops = [op.name for op in outputs.values() if isinstance(op, tf.operation)]$^    output_names = output_names_tensors + output_names_ops$^$^    with tf.session() as session:$^        # restore variables from checkpoint$^        load_graph_for_evaluation(session)$^$^        output_filename = flags.export_file_name + '.pb'$^        if flags.remove_export:$^            if isdir_remote(flags.export_dir):$^                log_info('removing old export')$^                remove_remote(flags.export_dir)$^$^        output_graph_path = os.path.join(flags.export_dir, output_filename)$^$^        if not is_remote_path(flags.export_dir) and not os.path.isdir(flags.export_dir):$^            os.makedirs(flags.export_dir)$^$^        frozen_graph = tfv1.graph_util.convert_variables_to_constants($^            sess=session,$^            input_graph_def=tfv1.get_default_graph().as_graph_def(),$^            output_node_names=output_names)$^$^        frozen_graph = tfv1.graph_util.extract_sub_graph($^            graph_def=frozen_graph,$^            dest_nodes=output_names)$^$^        if not flags.export_tflite:$^            with open_remote(output_graph_path, 'wb') as fout:$^                fout.write(frozen_graph.serializetostring())$^        else:$^            output_tflite_path = os.path.join(flags.export_dir, output_filename.replace('.pb', '.tflite'))$^$^            converter = tf.lite.tfliteconverter(frozen_graph, input_tensors=inputs.values(), output_tensors=outputs.values())$^            converter.optimizations = [tf.lite.optimize.default]$^            # audiospectrogram and mfcc ops are custom but have built-in kernels in tflite$^            converter.allow_custom_ops = true$^            tflite_model = converter.convert()$^$^            with open_remote(output_tflite_path, 'wb') as fout:$^                fout.write(tflite_model)$^$^        log_info('models exported at %s' % (flags.export_dir))$^$^    metadata_fname = os.path.join(flags.export_dir, '{}_{}_{}.md'.format($^        flags.export_author_id,$^        flags.export_model_name,$^        flags.export_model_version))$^$^    model_runtime = 'tflite' if flags.export_tflite else 'tensorflow'$^    with open_remote(metadata_fname, 'w') as f:$^        f.write('---\n')$^        f.write('author: {}\n'.format(flags.export_author_id))$^        f.write('model_name: {}\n'.format(flags.export_model_name))$^        f.write('model_version: {}\n'.format(flags.export_model_version))$^        f.write('contact_info: {}\n'.format(flags.export_contact_info))$^        f.write('license: {}\n'.format(flags.export_license))$^        f.write('language: {}\n'.format(flags.export_language))$^        f.write('runtime: {}\n'.format(model_runtime))$^        f.write('min_ds_version: {}\n'.format(flags.export_min_ds_version))$^        f.write('max_ds_version: {}\n'.format(flags.export_max_ds_version))$^        f.write('acoustic_model_url: <replace this with a publicly available url of the acoustic model>\n')$^        f.write('scorer_url: <replace this with a publicly available url of the scorer, if present>\n')$^        f.write('---\n')$^        f.write('{}\n'.format(flags.export_description))$^$^    log_info('model metadata file saved to {}. before submitting the exported model for publishing make sure all information in the metadata file is correct, and complete the url fields.'.format(metadata_fname))$^$^$^def package_zip():$^    # --export_dir path/to/export/lang_code/ => path/to/export/lang_code.zip$^    export_dir = os.path.join(os.path.abspath(flags.export_dir), '') # force ending '/'$^    if is_remote_path(export_dir):$^        log_error("cannot package remote path zip %s. please do this manually." % export_dir)$^        return$^$^    zip_filename = os.path.dirname(export_dir)$^    $^    shutil.copy(flags.scorer_path, export_dir)$^$^    archive = shutil.make_archive(zip_filename, 'zip', export_dir)$^    log_info('exported packaged model {}'.format(archive))$^$^$^def do_single_file_inference(input_file_path):$^    with tfv1.session(config=config.session_config) as session:$^        inputs, outputs, _ = create_inference_graph(batch_size=1, n_steps=-1)$^$^        # restore variables from training checkpoint$^        load_graph_for_evaluation(session)$^$^        features, features_len = audiofile_to_features(input_file_path)$^        previous_state_c = np.zeros([1, config.n_cell_dim])$^        previous_state_h = np.zeros([1, config.n_cell_dim])$^$^        # add batch dimension$^        features = tf.expand_dims(features, 0)$^        features_len = tf.expand_dims(features_len, 0)$^$^        # evaluate$^        features = create_overlapping_windows(features).eval(session=session)$^        features_len = features_len.eval(session=session)$^$^        probs = outputs['outputs'].eval(feed_dict={$^            inputs['input']: features,$^            inputs['input_lengths']: features_len,$^            inputs['previous_state_c']: previous_state_c,$^            inputs['previous_state_h']: previous_state_h,$^        }, session=session)$^$^        probs = np.squeeze(probs)$^$^        if flags.scorer_path:$^            scorer = scorer(flags.lm_alpha, flags.lm_beta,$^                            flags.scorer_path, config.alphabet)$^        else:$^            scorer = none$^        decoded = ctc_beam_search_decoder(probs, config.alphabet, flags.beam_width,$^                                          scorer=scorer, cutoff_prob=flags.cutoff_prob,$^                                          cutoff_top_n=flags.cutoff_top_n)$^        # print highest probability result$^        print(decoded[0][1])$^$^$^def early_training_checks():$^    # check for proper scorer early$^    if flags.scorer_path:$^        scorer = scorer(flags.lm_alpha, flags.lm_beta,$^                        flags.scorer_path, config.alphabet)$^        del scorer$^$^    if flags.train_files and flags.test_files and flags.load_checkpoint_dir != flags.save_checkpoint_dir:$^        log_warn('warning: you specified different values for --load_checkpoint_dir '$^                 'and --save_checkpoint_dir, but you are running training and testing '$^                 'in a single invocation. the testing step will respect --load_checkpoint_dir, '$^                 'and thus will not test the checkpoint created by the training step. '$^                 'train and test in two separate invocations, specifying the correct '$^                 '--load_checkpoint_dir in both cases, or use the same location '$^                 'for loading and saving.')$^$^$^def main(_):$^    initialize_globals()$^    early_training_checks()$^$^    if flags.train_files:$^        tfv1.reset_default_graph()$^        tfv1.set_random_seed(flags.random_seed)$^$^        train()$^$^    if config.is_master_process:$^        if flags.test_files:$^            tfv1.reset_default_graph()$^            test()$^$^        if flags.export_dir and not flags.export_zip:$^            tfv1.reset_default_graph()$^            export()$^$^        if flags.export_zip:$^            tfv1.reset_default_graph()$^            flags.export_tflite = true$^$^            if listdir_remote(flags.export_dir):$^                log_error('directory {} is not empty, please fix this.'.format(flags.export_dir))$^                sys.exit(1)$^$^            export()$^            package_zip()$^$^        if flags.one_shot_infer:$^            tfv1.reset_default_graph()$^            do_single_file_inference(flags.one_shot_infer)$^$^$^def run_script():$^    create_flags()$^    absl.app.run(main)$^$^if __name__ == '__main__':$^    run_script()$^#!/usr/bin/env python$^# -*- coding: utf-8 -*-$^from __future__ import absolute_import, division, print_function$^$^import json$^import sys$^$^from multiprocessing import cpu_count$^$^import absl.app$^import progressbar$^import tensorflow as tf$^import tensorflow.compat.v1 as tfv1$^$^from ds_ctcdecoder import ctc_beam_search_decoder_batch, scorer$^from six.moves import zip$^$^from .util.config import config, initialize_globals$^from .util.checkpoints import load_graph_for_evaluation$^from .util.evaluate_tools import calculate_and_print_report, save_samples_json$^from .util.feeding import create_dataset$^from .util.flags import create_flags, flags$^from .util.helpers import check_ctcdecoder_version$^from .util.logging import create_progressbar, log_error, log_progress$^$^check_ctcdecoder_version()$^$^def sparse_tensor_value_to_texts(value, alphabet):$^    r"""$^    given a :class:`tf.sparsetensor` ``value``, return an array of python strings$^    representing its values, converting tokens to strings using ``alphabet``.$^    """$^    return sparse_tuple_to_texts((value.indices, value.values, value.dense_shape), alphabet)$^$^$^def sparse_tuple_to_texts(sp_tuple, alphabet):$^    indices = sp_tuple[0]$^    values = sp_tuple[1]$^    results = [[] for _ in range(sp_tuple[2][0])]$^    for i, index in enumerate(indices):$^        results[index[0]].append(values[i])$^    # list of strings$^    return [alphabet.decode(res) for res in results]$^$^$^def evaluate(test_csvs, create_model):$^    if flags.scorer_path:$^        scorer = scorer(flags.lm_alpha, flags.lm_beta,$^                        flags.scorer_path, config.alphabet)$^    else:$^        scorer = none$^$^    test_sets = [create_dataset([csv],$^                                batch_size=flags.test_batch_size,$^                                train_phase=false,$^                                reverse=flags.reverse_test,$^                                limit=flags.limit_test) for csv in test_csvs]$^    iterator = tfv1.data.iterator.from_structure(tfv1.data.get_output_types(test_sets[0]),$^                                                 tfv1.data.get_output_shapes(test_sets[0]),$^                                                 output_classes=tfv1.data.get_output_classes(test_sets[0]))$^    test_init_ops = [iterator.make_initializer(test_set) for test_set in test_sets]$^$^    batch_wav_filename, (batch_x, batch_x_len), batch_y = iterator.get_next()$^$^    # one rate per layer$^    no_dropout = [none] * 6$^    logits, _ = create_model(batch_x=batch_x,$^                             seq_length=batch_x_len,$^                             dropout=no_dropout)$^$^    # transpose to batch major and apply softmax for decoder$^    transposed = tf.nn.softmax(tf.transpose(a=logits, perm=[1, 0, 2]))$^$^    loss = tfv1.nn.ctc_loss(labels=batch_y,$^                            inputs=logits,$^                            sequence_length=batch_x_len)$^$^    tfv1.train.get_or_create_global_step()$^$^    # get number of accessible cpu cores for this process$^    try:$^        num_processes = cpu_count()$^    except notimplementederror:$^        num_processes = 1$^$^    with tfv1.session(config=config.session_config) as session:$^        load_graph_for_evaluation(session)$^$^        def run_test(init_op, dataset):$^            wav_filenames = []$^            losses = []$^            predictions = []$^            ground_truths = []$^$^            bar = create_progressbar(prefix='test epoch | ',$^                                     widgets=['steps: ', progressbar.counter(), ' | ', progressbar.timer()]).start()$^            log_progress('test epoch...')$^$^            step_count = 0$^$^            # initialize iterator to the appropriate dataset$^            session.run(init_op)$^$^            # first pass, compute losses and transposed logits for decoding$^            while true:$^                try:$^                    batch_wav_filenames, batch_logits, batch_loss, batch_lengths, batch_transcripts = \$^                        session.run([batch_wav_filename, transposed, loss, batch_x_len, batch_y])$^                except tf.errors.outofrangeerror:$^                    break$^$^                decoded = ctc_beam_search_decoder_batch(batch_logits, batch_lengths, config.alphabet, flags.beam_width,$^                                                        num_processes=num_processes, scorer=scorer,$^                                                        cutoff_prob=flags.cutoff_prob, cutoff_top_n=flags.cutoff_top_n)$^                predictions.extend(d[0][1] for d in decoded)$^                ground_truths.extend(sparse_tensor_value_to_texts(batch_transcripts, config.alphabet))$^                wav_filenames.extend(wav_filename.decode('utf-8') for wav_filename in batch_wav_filenames)$^                losses.extend(batch_loss)$^$^                step_count += 1$^                bar.update(step_count)$^$^            bar.finish()$^$^            # print test summary$^            test_samples = calculate_and_print_report(wav_filenames, ground_truths, predictions, losses, dataset)$^            return test_samples$^$^        samples = []$^        for csv, init_op in zip(test_csvs, test_init_ops):$^            print('testing model on {}'.format(csv))$^            samples.extend(run_test(init_op, dataset=csv))$^        return samples$^$^$^def main(_):$^    initialize_globals()$^$^    if not flags.test_files:$^        log_error('you need to specify what files to use for evaluation via '$^                  'the --test_files flag.')$^        sys.exit(1)$^$^    from .train import create_model # pylint: disable=cyclic-import,import-outside-toplevel$^    samples = evaluate(flags.test_files.split(','), create_model)$^$^    if flags.test_output_file:$^        save_samples_json(samples, flags.test_output_file)$^$^$^def run_script():$^    create_flags()$^    absl.app.run(main)$^$^if __name__ == '__main__':$^    run_script()$^def validate_label(label):$^    return label$^import unittest$^import os$^$^from ds_ctcdecoder import alphabet$^$^class testalphabetparsing(unittest.testcase):$^$^    def _ending_tester(self, file, expected):$^        alphabet = alphabet(os.path.join(os.path.dirname(__file__), 'test_data', file))$^        label = ''$^        label_id = -1$^        for expected_label, expected_label_id in expected:$^            try:$^                label_id = alphabet.encode(expected_label)$^            except keyerror:$^                pass$^            self.assertequal(label_id, [expected_label_id])$^            try:$^                label = alphabet.decode([expected_label_id])$^            except keyerror:$^                pass$^            self.assertequal(label, expected_label)$^$^    def test_macos_ending(self):$^        self._ending_tester('alphabet_macos.txt', [('a', 0), ('b', 1), ('c', 2)])$^$^    def test_unix_ending(self):$^        self._ending_tester('alphabet_unix.txt', [('a', 0), ('b', 1), ('c', 2)])$^$^    def test_windows_ending(self):$^        self._ending_tester('alphabet_windows.txt', [('a', 0), ('b', 1), ('c', 2)])$^$^if __name__ == '__main__':$^    unittest.main()$^import unittest$^$^from argparse import namespace$^from deepspeech_training.util.importers import validate_label_eng, get_validate_label$^from pathlib import path$^$^def from_here(path):$^    here = path(__file__)$^    return here.parent / path$^$^class testvalidatelabeleng(unittest.testcase):$^    def test_numbers(self):$^        label = validate_label_eng("this is a 1 2 3 test")$^        self.assertequal(label, none)$^$^class testgetvalidatelabel(unittest.testcase):$^$^    def test_no_validate_label_locale(self):$^        f = get_validate_label(namespace())$^        self.assertequal(f('toto'), 'toto')$^        self.assertequal(f('toto1234'), none)$^        self.assertequal(f('toto1234[{[{[]'), none)$^$^    def test_validate_label_locale_default(self):$^        f = get_validate_label(namespace(validate_label_locale=none))$^        self.assertequal(f('toto'), 'toto')$^        self.assertequal(f('toto1234'), none)$^        self.assertequal(f('toto1234[{[{[]'), none)$^$^    def test_get_validate_label_missing(self):$^        args = namespace(validate_label_locale=from_here('test_data/validate_locale_ger.py'))$^        f = get_validate_label(args)$^        self.assertequal(f, none)$^$^    def test_get_validate_label(self):$^        args = namespace(validate_label_locale=from_here('test_data/validate_locale_fra.py'))$^        f = get_validate_label(args)$^        l = f('toto')$^        self.assertequal(l, 'toto')$^$^if __name__ == '__main__':$^    unittest.main()$^import unittest$^$^import numpy as np$^import tensorflow as tf$^from deepspeech_training.util.helpers import valuerange, get_value_range, pick_value_from_range, tf_pick_value_from_range$^$^$^class testvaluerange(unittest.testcase):$